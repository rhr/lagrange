/* Generated by Cython 0.16 on Thu Jul 12 21:49:28 2012 */

#define PY_SSIZE_T_CLEAN
#include "Python.h"
#ifndef Py_PYTHON_H
    #error Python headers needed to compile C extensions, please install development version of Python.
#elif PY_VERSION_HEX < 0x02040000
    #error Cython requires Python 2.4+.
#else
#include <stddef.h> /* For offsetof */
#ifndef offsetof
#define offsetof(type, member) ( (size_t) & ((type*)0) -> member )
#endif

#if !defined(WIN32) && !defined(MS_WINDOWS)
  #ifndef __stdcall
    #define __stdcall
  #endif
  #ifndef __cdecl
    #define __cdecl
  #endif
  #ifndef __fastcall
    #define __fastcall
  #endif
#endif

#ifndef DL_IMPORT
  #define DL_IMPORT(t) t
#endif
#ifndef DL_EXPORT
  #define DL_EXPORT(t) t
#endif

#ifndef PY_LONG_LONG
  #define PY_LONG_LONG LONG_LONG
#endif

#ifndef Py_HUGE_VAL
  #define Py_HUGE_VAL HUGE_VAL
#endif

#ifdef PYPY_VERSION
#define CYTHON_COMPILING_IN_PYPY 1
#define CYTHON_COMPILING_IN_CPYTHON 0
#else
#define CYTHON_COMPILING_IN_PYPY 0
#define CYTHON_COMPILING_IN_CPYTHON 1
#endif

#if CYTHON_COMPILING_IN_PYPY
  #define __Pyx_PyCFunction_Call PyObject_Call
#else
  #define __Pyx_PyCFunction_Call PyCFunction_Call
#endif

#if PY_VERSION_HEX < 0x02050000
  typedef int Py_ssize_t;
  #define PY_SSIZE_T_MAX INT_MAX
  #define PY_SSIZE_T_MIN INT_MIN
  #define PY_FORMAT_SIZE_T ""
  #define PyInt_FromSsize_t(z) PyInt_FromLong(z)
  #define PyInt_AsSsize_t(o)   __Pyx_PyInt_AsInt(o)
  #define PyNumber_Index(o)    PyNumber_Int(o)
  #define PyIndex_Check(o)     PyNumber_Check(o)
  #define PyErr_WarnEx(category, message, stacklevel) PyErr_Warn(category, message)
  #define __PYX_BUILD_PY_SSIZE_T "i"
#else
  #define __PYX_BUILD_PY_SSIZE_T "n"
#endif

#if PY_VERSION_HEX < 0x02060000
  #define Py_REFCNT(ob) (((PyObject*)(ob))->ob_refcnt)
  #define Py_TYPE(ob)   (((PyObject*)(ob))->ob_type)
  #define Py_SIZE(ob)   (((PyVarObject*)(ob))->ob_size)
  #define PyVarObject_HEAD_INIT(type, size) \
          PyObject_HEAD_INIT(type) size,
  #define PyType_Modified(t)

  typedef struct {
     void *buf;
     PyObject *obj;
     Py_ssize_t len;
     Py_ssize_t itemsize;
     int readonly;
     int ndim;
     char *format;
     Py_ssize_t *shape;
     Py_ssize_t *strides;
     Py_ssize_t *suboffsets;
     void *internal;
  } Py_buffer;

  #define PyBUF_SIMPLE 0
  #define PyBUF_WRITABLE 0x0001
  #define PyBUF_FORMAT 0x0004
  #define PyBUF_ND 0x0008
  #define PyBUF_STRIDES (0x0010 | PyBUF_ND)
  #define PyBUF_C_CONTIGUOUS (0x0020 | PyBUF_STRIDES)
  #define PyBUF_F_CONTIGUOUS (0x0040 | PyBUF_STRIDES)
  #define PyBUF_ANY_CONTIGUOUS (0x0080 | PyBUF_STRIDES)
  #define PyBUF_INDIRECT (0x0100 | PyBUF_STRIDES)
  #define PyBUF_RECORDS (PyBUF_STRIDES | PyBUF_FORMAT | PyBUF_WRITABLE)
  #define PyBUF_FULL (PyBUF_INDIRECT | PyBUF_FORMAT | PyBUF_WRITABLE)

  typedef int (*getbufferproc)(PyObject *, Py_buffer *, int);
  typedef void (*releasebufferproc)(PyObject *, Py_buffer *);
#endif

#if PY_MAJOR_VERSION < 3
  #define __Pyx_BUILTIN_MODULE_NAME "__builtin__"
  #define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos) \
          PyCode_New(a, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
#else
  #define __Pyx_BUILTIN_MODULE_NAME "builtins"
  #define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos) \
          PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
#endif

#if PY_MAJOR_VERSION < 3 && PY_MINOR_VERSION < 6
  #define PyUnicode_FromString(s) PyUnicode_Decode(s, strlen(s), "UTF-8", "strict")
#endif

#if PY_MAJOR_VERSION >= 3
  #define Py_TPFLAGS_CHECKTYPES 0
  #define Py_TPFLAGS_HAVE_INDEX 0
#endif

#if (PY_VERSION_HEX < 0x02060000) || (PY_MAJOR_VERSION >= 3)
  #define Py_TPFLAGS_HAVE_NEWBUFFER 0
#endif


#if PY_VERSION_HEX > 0x03030000 && defined(PyUnicode_GET_LENGTH)
  #define CYTHON_PEP393_ENABLED 1
  #define __Pyx_PyUnicode_GET_LENGTH(u) PyUnicode_GET_LENGTH(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) PyUnicode_READ_CHAR(u, i)
#else
  #define CYTHON_PEP393_ENABLED 0
  #define __Pyx_PyUnicode_GET_LENGTH(u) PyUnicode_GET_SIZE(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) ((Py_UCS4)(PyUnicode_AS_UNICODE(u)[i]))
#endif

#if PY_MAJOR_VERSION >= 3
  #define PyBaseString_Type            PyUnicode_Type
  #define PyStringObject               PyUnicodeObject
  #define PyString_Type                PyUnicode_Type
  #define PyString_Check               PyUnicode_Check
  #define PyString_CheckExact          PyUnicode_CheckExact
#endif

#if PY_VERSION_HEX < 0x02060000
  #define PyBytesObject                PyStringObject
  #define PyBytes_Type                 PyString_Type
  #define PyBytes_Check                PyString_Check
  #define PyBytes_CheckExact           PyString_CheckExact
  #define PyBytes_FromString           PyString_FromString
  #define PyBytes_FromStringAndSize    PyString_FromStringAndSize
  #define PyBytes_FromFormat           PyString_FromFormat
  #define PyBytes_DecodeEscape         PyString_DecodeEscape
  #define PyBytes_AsString             PyString_AsString
  #define PyBytes_AsStringAndSize      PyString_AsStringAndSize
  #define PyBytes_Size                 PyString_Size
  #define PyBytes_AS_STRING            PyString_AS_STRING
  #define PyBytes_GET_SIZE             PyString_GET_SIZE
  #define PyBytes_Repr                 PyString_Repr
  #define PyBytes_Concat               PyString_Concat
  #define PyBytes_ConcatAndDel         PyString_ConcatAndDel
#endif

#if PY_VERSION_HEX < 0x02060000
  #define PySet_Check(obj)             PyObject_TypeCheck(obj, &PySet_Type)
  #define PyFrozenSet_Check(obj)       PyObject_TypeCheck(obj, &PyFrozenSet_Type)
#endif
#ifndef PySet_CheckExact
  #define PySet_CheckExact(obj)        (Py_TYPE(obj) == &PySet_Type)
#endif

#define __Pyx_TypeCheck(obj, type) PyObject_TypeCheck(obj, (PyTypeObject *)type)

#if PY_MAJOR_VERSION >= 3
  #define PyIntObject                  PyLongObject
  #define PyInt_Type                   PyLong_Type
  #define PyInt_Check(op)              PyLong_Check(op)
  #define PyInt_CheckExact(op)         PyLong_CheckExact(op)
  #define PyInt_FromString             PyLong_FromString
  #define PyInt_FromUnicode            PyLong_FromUnicode
  #define PyInt_FromLong               PyLong_FromLong
  #define PyInt_FromSize_t             PyLong_FromSize_t
  #define PyInt_FromSsize_t            PyLong_FromSsize_t
  #define PyInt_AsLong                 PyLong_AsLong
  #define PyInt_AS_LONG                PyLong_AS_LONG
  #define PyInt_AsSsize_t              PyLong_AsSsize_t
  #define PyInt_AsUnsignedLongMask     PyLong_AsUnsignedLongMask
  #define PyInt_AsUnsignedLongLongMask PyLong_AsUnsignedLongLongMask
#endif

#if PY_MAJOR_VERSION >= 3
  #define PyBoolObject                 PyLongObject
#endif

#if PY_VERSION_HEX < 0x03020000
  typedef long Py_hash_t;
  #define __Pyx_PyInt_FromHash_t PyInt_FromLong
  #define __Pyx_PyInt_AsHash_t   PyInt_AsLong
#else
  #define __Pyx_PyInt_FromHash_t PyInt_FromSsize_t
  #define __Pyx_PyInt_AsHash_t   PyInt_AsSsize_t
#endif

#if (PY_MAJOR_VERSION < 3) || (PY_VERSION_HEX >= 0x03010300)
  #define __Pyx_PySequence_GetSlice(obj, a, b) PySequence_GetSlice(obj, a, b)
  #define __Pyx_PySequence_SetSlice(obj, a, b, value) PySequence_SetSlice(obj, a, b, value)
  #define __Pyx_PySequence_DelSlice(obj, a, b) PySequence_DelSlice(obj, a, b)
#else
  #define __Pyx_PySequence_GetSlice(obj, a, b) (unlikely(!(obj)) ? \
        (PyErr_SetString(PyExc_SystemError, "null argument to internal routine"), (PyObject*)0) : \
        (likely((obj)->ob_type->tp_as_mapping) ? (PySequence_GetSlice(obj, a, b)) : \
            (PyErr_Format(PyExc_TypeError, "'%.200s' object is unsliceable", (obj)->ob_type->tp_name), (PyObject*)0)))
  #define __Pyx_PySequence_SetSlice(obj, a, b, value) (unlikely(!(obj)) ? \
        (PyErr_SetString(PyExc_SystemError, "null argument to internal routine"), -1) : \
        (likely((obj)->ob_type->tp_as_mapping) ? (PySequence_SetSlice(obj, a, b, value)) : \
            (PyErr_Format(PyExc_TypeError, "'%.200s' object doesn't support slice assignment", (obj)->ob_type->tp_name), -1)))
  #define __Pyx_PySequence_DelSlice(obj, a, b) (unlikely(!(obj)) ? \
        (PyErr_SetString(PyExc_SystemError, "null argument to internal routine"), -1) : \
        (likely((obj)->ob_type->tp_as_mapping) ? (PySequence_DelSlice(obj, a, b)) : \
            (PyErr_Format(PyExc_TypeError, "'%.200s' object doesn't support slice deletion", (obj)->ob_type->tp_name), -1)))
#endif

#if PY_MAJOR_VERSION >= 3
  #define PyMethod_New(func, self, klass) ((self) ? PyMethod_New(func, self) : PyInstanceMethod_New(func))
#endif

#if PY_VERSION_HEX < 0x02050000
  #define __Pyx_GetAttrString(o,n)   PyObject_GetAttrString((o),((char *)(n)))
  #define __Pyx_SetAttrString(o,n,a) PyObject_SetAttrString((o),((char *)(n)),(a))
  #define __Pyx_DelAttrString(o,n)   PyObject_DelAttrString((o),((char *)(n)))
#else
  #define __Pyx_GetAttrString(o,n)   PyObject_GetAttrString((o),(n))
  #define __Pyx_SetAttrString(o,n,a) PyObject_SetAttrString((o),(n),(a))
  #define __Pyx_DelAttrString(o,n)   PyObject_DelAttrString((o),(n))
#endif

#if PY_VERSION_HEX < 0x02050000
  #define __Pyx_NAMESTR(n) ((char *)(n))
  #define __Pyx_DOCSTR(n)  ((char *)(n))
#else
  #define __Pyx_NAMESTR(n) (n)
  #define __Pyx_DOCSTR(n)  (n)
#endif

#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_TrueDivide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceTrueDivide(x,y)
#else
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_Divide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceDivide(x,y)
#endif

#ifndef __PYX_EXTERN_C
  #ifdef __cplusplus
    #define __PYX_EXTERN_C extern "C"
  #else
    #define __PYX_EXTERN_C extern
  #endif
#endif

#if defined(WIN32) || defined(MS_WINDOWS)
#define _USE_MATH_DEFINES
#endif
#include <math.h>
#define __PYX_HAVE__lgcpp
#define __PYX_HAVE_API__lgcpp
#include <vector>
#include <string>
#include <utility>
#include <map>
#include "math.h"
#include "superdouble.h"
#include "node.h"
#include "BranchSegment.h"
#include "RateModel.h"
#include "tree.h"
#include "tree_reader.h"
#include "AncSplit.h"
#include "OptimizeBioGeo.h"
#include "BioGeoTree.h"
#include "BioGeoTreeTools.h"
#include "InputReader.h"
#ifdef _OPENMP
#include <omp.h>
#endif /* _OPENMP */

#ifdef PYREX_WITHOUT_ASSERTIONS
#define CYTHON_WITHOUT_ASSERTIONS
#endif


/* inline attribute */
#ifndef CYTHON_INLINE
  #if defined(__GNUC__)
    #define CYTHON_INLINE __inline__
  #elif defined(_MSC_VER)
    #define CYTHON_INLINE __inline
  #elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define CYTHON_INLINE inline
  #else
    #define CYTHON_INLINE
  #endif
#endif

/* unused attribute */
#ifndef CYTHON_UNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define CYTHON_UNUSED __attribute__ ((__unused__))
#   else
#     define CYTHON_UNUSED
#   endif
# elif defined(__ICC) || (defined(__INTEL_COMPILER) && !defined(_MSC_VER))
#   define CYTHON_UNUSED __attribute__ ((__unused__))
# else
#   define CYTHON_UNUSED
# endif
#endif

typedef struct {PyObject **p; char *s; const long n; const char* encoding; const char is_unicode; const char is_str; const char intern; } __Pyx_StringTabEntry; /*proto*/


/* Type Conversion Predeclarations */

#define __Pyx_PyBytes_FromUString(s) PyBytes_FromString((char*)s)
#define __Pyx_PyBytes_AsUString(s)   ((unsigned char*) PyBytes_AsString(s))

#define __Pyx_Owned_Py_None(b) (Py_INCREF(Py_None), Py_None)
#define __Pyx_PyBool_FromLong(b) ((b) ? (Py_INCREF(Py_True), Py_True) : (Py_INCREF(Py_False), Py_False))
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject*);
static CYTHON_INLINE PyObject* __Pyx_PyNumber_Int(PyObject* x);

static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject*);
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t);
static CYTHON_INLINE size_t __Pyx_PyInt_AsSize_t(PyObject*);

#define __pyx_PyFloat_AsDouble(x) (PyFloat_CheckExact(x) ? PyFloat_AS_DOUBLE(x) : PyFloat_AsDouble(x))
#define __pyx_PyFloat_AsFloat(x) ((float) __pyx_PyFloat_AsDouble(x))

#ifdef __GNUC__
  /* Test for GCC > 2.95 */
  #if __GNUC__ > 2 || (__GNUC__ == 2 && (__GNUC_MINOR__ > 95))
    #define likely(x)   __builtin_expect(!!(x), 1)
    #define unlikely(x) __builtin_expect(!!(x), 0)
  #else /* __GNUC__ > 2 ... */
    #define likely(x)   (x)
    #define unlikely(x) (x)
  #endif /* __GNUC__ > 2 ... */
#else /* __GNUC__ */
  #define likely(x)   (x)
  #define unlikely(x) (x)
#endif /* __GNUC__ */
    
static PyObject *__pyx_m;
static PyObject *__pyx_b;
static PyObject *__pyx_empty_tuple;
static PyObject *__pyx_empty_bytes;
static int __pyx_lineno;
static int __pyx_clineno = 0;
static const char * __pyx_cfilenm= __FILE__;
static const char *__pyx_filename;


static const char *__pyx_f[] = {
  "lgcpp.pyx",
};

/*--- Type declarations ---*/
struct __pyx_obj_5lgcpp_BranchSegment;
struct __pyx_obj_5lgcpp_Superdouble;
struct __pyx_obj_5lgcpp_InputReader;
struct __pyx_obj_5lgcpp_RateModel;
struct __pyx_obj_5lgcpp_BioGeoTree;
struct __pyx_obj_5lgcpp_Tree;
struct __pyx_obj_5lgcpp_Node;

/* "lgcpp.pyx":104
 *         vector[_Superdouble]* distconds
 * 
 * cdef class BranchSegment:             # <<<<<<<<<<<<<<
 *     cdef _BranchSegment* ptr
 *     def __cinit__(self):
 */
struct __pyx_obj_5lgcpp_BranchSegment {
  PyObject_HEAD
  BranchSegment *ptr;
};


/* "lgcpp.pyx":47
 *     return &x
 * 
 * cdef class Superdouble:             # <<<<<<<<<<<<<<
 *     cdef _Superdouble* ptr
 *     def __cinit__(self, long double mantissa=1.0, int exponent=0):
 */
struct __pyx_obj_5lgcpp_Superdouble {
  PyObject_HEAD
  Superdouble *ptr;
};


/* "lgcpp.pyx":415
 *         int nspecies
 * 
 * cdef class InputReader:             # <<<<<<<<<<<<<<
 *     cdef _InputReader* ptr
 *     ## cdef vector[_Tree*]* trees
 */
struct __pyx_obj_5lgcpp_InputReader {
  PyObject_HEAD
  InputReader *ptr;
};


/* "lgcpp.pyx":135
 *         vector[vector[int]] * getDists()
 * 
 * cdef class RateModel:             # <<<<<<<<<<<<<<
 *     cdef _RateModel* ptr
 *     def __cinit__(self, int na, bool ge, list periods, bool is_sparse):
 */
struct __pyx_obj_5lgcpp_RateModel {
  PyObject_HEAD
  RateModel *ptr;
};


/* "lgcpp.pyx":263
 *         void setFossilatBranchByMRCA_id(_Node *, int, double)
 * 
 * cdef class BioGeoTree:             # <<<<<<<<<<<<<<
 *     cdef _BioGeoTree* ptr
 *     def __cinit__(self, Tree t, list periods):
 */
struct __pyx_obj_5lgcpp_BioGeoTree {
  PyObject_HEAD
  BioGeoTree *ptr;
};


/* "lgcpp.pyx":182
 *         _Node* getMRCA(vector[string] innodes)
 * 
 * cdef class Tree:             # <<<<<<<<<<<<<<
 *     cdef _Tree* ptr
 *     def __cinit__(self):
 */
struct __pyx_obj_5lgcpp_Tree {
  PyObject_HEAD
  Tree *ptr;
};


/* "lgcpp.pyx":77
 *         _Node * getParent()
 * 
 * cdef class Node:             # <<<<<<<<<<<<<<
 *     cdef _Node* ptr
 *     def __cinit__(self):
 */
struct __pyx_obj_5lgcpp_Node {
  PyObject_HEAD
  Node *ptr;
};

#ifndef CYTHON_REFNANNY
  #define CYTHON_REFNANNY 0
#endif
#if CYTHON_REFNANNY
  typedef struct {
    void (*INCREF)(void*, PyObject*, int);
    void (*DECREF)(void*, PyObject*, int);
    void (*GOTREF)(void*, PyObject*, int);
    void (*GIVEREF)(void*, PyObject*, int);
    void* (*SetupContext)(const char*, int, const char*);
    void (*FinishContext)(void**);
  } __Pyx_RefNannyAPIStruct;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNanny = NULL;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname); /*proto*/
  #define __Pyx_RefNannyDeclarations void *__pyx_refnanny = NULL;
#ifdef WITH_THREAD
  #define __Pyx_RefNannySetupContext(name, acquire_gil) \
          if (acquire_gil) { \
              PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure(); \
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__); \
              PyGILState_Release(__pyx_gilstate_save); \
          } else { \
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__); \
          }
#else
  #define __Pyx_RefNannySetupContext(name, acquire_gil) \
          __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__)
#endif
  #define __Pyx_RefNannyFinishContext() \
          __Pyx_RefNanny->FinishContext(&__pyx_refnanny)
  #define __Pyx_INCREF(r)  __Pyx_RefNanny->INCREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_DECREF(r)  __Pyx_RefNanny->DECREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_GOTREF(r)  __Pyx_RefNanny->GOTREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_GIVEREF(r) __Pyx_RefNanny->GIVEREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_XINCREF(r)  do { if((r) != NULL) {__Pyx_INCREF(r); }} while(0)
  #define __Pyx_XDECREF(r)  do { if((r) != NULL) {__Pyx_DECREF(r); }} while(0)
  #define __Pyx_XGOTREF(r)  do { if((r) != NULL) {__Pyx_GOTREF(r); }} while(0)
  #define __Pyx_XGIVEREF(r) do { if((r) != NULL) {__Pyx_GIVEREF(r);}} while(0)
#else
  #define __Pyx_RefNannyDeclarations
  #define __Pyx_RefNannySetupContext(name, acquire_gil)
  #define __Pyx_RefNannyFinishContext()
  #define __Pyx_INCREF(r) Py_INCREF(r)
  #define __Pyx_DECREF(r) Py_DECREF(r)
  #define __Pyx_GOTREF(r)
  #define __Pyx_GIVEREF(r)
  #define __Pyx_XINCREF(r) Py_XINCREF(r)
  #define __Pyx_XDECREF(r) Py_XDECREF(r)
  #define __Pyx_XGOTREF(r)
  #define __Pyx_XGIVEREF(r)
#endif /* CYTHON_REFNANNY */
#define __Pyx_CLEAR(r)    do { PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);} while(0)
#define __Pyx_XCLEAR(r)   do { if((r) != NULL) {PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);}} while(0)

static PyObject *__Pyx_GetName(PyObject *dict, PyObject *name); /*proto*/

static void __Pyx_RaiseDoubleKeywordsError(const char* func_name, PyObject* kw_name); /*proto*/

static int __Pyx_ParseOptionalKeywords(PyObject *kwds, PyObject **argnames[], \
    PyObject *kwds2, PyObject *values[], Py_ssize_t num_pos_args, \
    const char* function_name); /*proto*/

static void __Pyx_RaiseArgtupleInvalid(const char* func_name, int exact,
    Py_ssize_t num_min, Py_ssize_t num_max, Py_ssize_t num_found); /*proto*/

static double __Pyx__PyObject_AsDouble(PyObject* obj); /* proto */
#define __Pyx_PyObject_AsDouble(obj) \
((likely(PyFloat_CheckExact(obj))) ? \
 PyFloat_AS_DOUBLE(obj) : __Pyx__PyObject_AsDouble(obj))

static CYTHON_INLINE PyObject* __Pyx_tp_new(PyObject* type_obj) {
    return (PyObject*) (((PyTypeObject*)(type_obj))->tp_new(
        (PyTypeObject*)(type_obj), __pyx_empty_tuple, NULL));
}

static CYTHON_INLINE int __Pyx_TypeTest(PyObject *obj, PyTypeObject *type); /*proto*/

static CYTHON_INLINE int __Pyx_CheckKeywordStrings(PyObject *kwdict, const char* function_name, int kw_allowed); /*proto*/

static int __Pyx_ArgTypeTest(PyObject *obj, PyTypeObject *type, int none_allowed,
    const char *name, int exact); /*proto*/

static CYTHON_INLINE void __Pyx_RaiseNeedMoreValuesError(Py_ssize_t index);

static CYTHON_INLINE void __Pyx_RaiseTooManyValuesError(Py_ssize_t expected);

static int __Pyx_IternextUnpackEndCheck(PyObject *retval, Py_ssize_t expected); /*proto*/

#define __Pyx_SetItemInt(o, i, v, size, to_py_func) (((size) <= sizeof(Py_ssize_t)) ? \
                                                    __Pyx_SetItemInt_Fast(o, i, v) : \
                                                    __Pyx_SetItemInt_Generic(o, to_py_func(i), v))
static CYTHON_INLINE int __Pyx_SetItemInt_Generic(PyObject *o, PyObject *j, PyObject *v) {
    int r;
    if (!j) return -1;
    r = PyObject_SetItem(o, j, v);
    Py_DECREF(j);
    return r;
}
static CYTHON_INLINE int __Pyx_SetItemInt_Fast(PyObject *o, Py_ssize_t i, PyObject *v) {
    if (PyList_CheckExact(o)) {
        Py_ssize_t n = (likely(i >= 0)) ? i : i + PyList_GET_SIZE(o);
        if (likely((n >= 0) & (n < PyList_GET_SIZE(o)))) {
            PyObject* old = PyList_GET_ITEM(o, n);
            Py_INCREF(v);
            PyList_SET_ITEM(o, n, v);
            Py_DECREF(old);
            return 1;
        }
    }
    else if (likely(i >= 0)) {
        PySequenceMethods *m = Py_TYPE(o)->tp_as_sequence;
        if (likely(m && m->sq_ass_item)) {
            return m->sq_ass_item(o, i, v);
        }
    }
    return __Pyx_SetItemInt_Generic(o, PyInt_FromSsize_t(i), v);
}

static PyObject *__Pyx_Import(PyObject *name, PyObject *from_list, long level); /*proto*/

static CYTHON_INLINE void __Pyx_RaiseImportError(PyObject *name);

static int __Pyx_Print(PyObject*, PyObject *, int); /*proto*/
#if PY_MAJOR_VERSION >= 3
static PyObject* __pyx_print = 0;
static PyObject* __pyx_print_kwargs = 0;
#endif

static int __Pyx_PrintOne(PyObject* stream, PyObject *o); /*proto*/

static CYTHON_INLINE unsigned char __Pyx_PyInt_AsUnsignedChar(PyObject *);

static CYTHON_INLINE unsigned short __Pyx_PyInt_AsUnsignedShort(PyObject *);

static CYTHON_INLINE unsigned int __Pyx_PyInt_AsUnsignedInt(PyObject *);

static CYTHON_INLINE char __Pyx_PyInt_AsChar(PyObject *);

static CYTHON_INLINE short __Pyx_PyInt_AsShort(PyObject *);

static CYTHON_INLINE int __Pyx_PyInt_AsInt(PyObject *);

static CYTHON_INLINE signed char __Pyx_PyInt_AsSignedChar(PyObject *);

static CYTHON_INLINE signed short __Pyx_PyInt_AsSignedShort(PyObject *);

static CYTHON_INLINE signed int __Pyx_PyInt_AsSignedInt(PyObject *);

static CYTHON_INLINE int __Pyx_PyInt_AsLongDouble(PyObject *);

static CYTHON_INLINE unsigned long __Pyx_PyInt_AsUnsignedLong(PyObject *);

static CYTHON_INLINE unsigned PY_LONG_LONG __Pyx_PyInt_AsUnsignedLongLong(PyObject *);

static CYTHON_INLINE long __Pyx_PyInt_AsLong(PyObject *);

static CYTHON_INLINE PY_LONG_LONG __Pyx_PyInt_AsLongLong(PyObject *);

static CYTHON_INLINE signed long __Pyx_PyInt_AsSignedLong(PyObject *);

static CYTHON_INLINE signed PY_LONG_LONG __Pyx_PyInt_AsSignedLongLong(PyObject *);

static int __Pyx_check_binary_version(void);

typedef struct {
    int code_line;
    PyCodeObject* code_object;
} __Pyx_CodeObjectCacheEntry;
struct __Pyx_CodeObjectCache {
    int count;
    int max_count;
    __Pyx_CodeObjectCacheEntry* entries;
};
static struct __Pyx_CodeObjectCache __pyx_code_cache = {0,0,NULL};
static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line);
static PyCodeObject *__pyx_find_code_object(int code_line);
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object);

static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename); /*proto*/

static int __Pyx_InitStrings(__Pyx_StringTabEntry *t); /*proto*/


/* Module declarations from 'libcpp' */

/* Module declarations from 'libcpp.vector' */

/* Module declarations from 'libcpp.string' */

/* Module declarations from 'libcpp.utility' */

/* Module declarations from 'libcpp.map' */

/* Module declarations from 'lgcpp' */
static PyTypeObject *__pyx_ptype_5lgcpp_Superdouble = 0;
static PyTypeObject *__pyx_ptype_5lgcpp_Node = 0;
static PyTypeObject *__pyx_ptype_5lgcpp_BranchSegment = 0;
static PyTypeObject *__pyx_ptype_5lgcpp_RateModel = 0;
static PyTypeObject *__pyx_ptype_5lgcpp_Tree = 0;
static PyTypeObject *__pyx_ptype_5lgcpp_BioGeoTree = 0;
static PyTypeObject *__pyx_ptype_5lgcpp_InputReader = 0;
static Superdouble *__pyx_f_5lgcpp_superptr(Superdouble); /*proto*/
static struct __pyx_obj_5lgcpp_Superdouble *__pyx_f_5lgcpp_superdouble_factory(Superdouble *); /*proto*/
static struct __pyx_obj_5lgcpp_Node *__pyx_f_5lgcpp_node_factory(Node *); /*proto*/
#define __Pyx_MODULE_NAME "lgcpp"
int __pyx_module_is_main_lgcpp = 0;

/* Implementation of 'lgcpp' */
static PyObject *__pyx_builtin_range;
static PyObject *__pyx_builtin_sorted;
static PyObject *__pyx_builtin_enumerate;
static PyObject *__pyx_builtin_reversed;
static int __pyx_pf_5lgcpp_11Superdouble___cinit__(struct __pyx_obj_5lgcpp_Superdouble *__pyx_v_self, long double __pyx_v_mantissa, int __pyx_v_exponent); /* proto */
static PyObject *__pyx_pf_5lgcpp_11Superdouble_2__str__(struct __pyx_obj_5lgcpp_Superdouble *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5lgcpp_11Superdouble_4__float__(struct __pyx_obj_5lgcpp_Superdouble *__pyx_v_self); /* proto */
static int __pyx_pf_5lgcpp_4Node___cinit__(struct __pyx_obj_5lgcpp_Node *__pyx_v_self); /* proto */
static void __pyx_pf_5lgcpp_4Node_2__dealloc__(CYTHON_UNUSED struct __pyx_obj_5lgcpp_Node *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5lgcpp_4Node_4getName(struct __pyx_obj_5lgcpp_Node *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5lgcpp_4Node_6getNumber(struct __pyx_obj_5lgcpp_Node *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5lgcpp_4Node_8getParent(struct __pyx_obj_5lgcpp_Node *__pyx_v_self); /* proto */
static int __pyx_pf_5lgcpp_13BranchSegment___cinit__(struct __pyx_obj_5lgcpp_BranchSegment *__pyx_v_self); /* proto */
static void __pyx_pf_5lgcpp_13BranchSegment_2__dealloc__(CYTHON_UNUSED struct __pyx_obj_5lgcpp_BranchSegment *__pyx_v_self); /* proto */
static int __pyx_pf_5lgcpp_9RateModel___cinit__(struct __pyx_obj_5lgcpp_RateModel *__pyx_v_self, int __pyx_v_na, bool __pyx_v_ge, PyObject *__pyx_v_periods, bool __pyx_v_is_sparse); /* proto */
static void __pyx_pf_5lgcpp_9RateModel_2__dealloc__(CYTHON_UNUSED struct __pyx_obj_5lgcpp_RateModel *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5lgcpp_9RateModel_4set_nthreads(struct __pyx_obj_5lgcpp_RateModel *__pyx_v_self, int __pyx_v_n); /* proto */
static PyObject *__pyx_pf_5lgcpp_9RateModel_6get_nthreads(struct __pyx_obj_5lgcpp_RateModel *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5lgcpp_9RateModel_8setup_dists(struct __pyx_obj_5lgcpp_RateModel *__pyx_v_self, PyObject *__pyx_v_indists, bool __pyx_v_incl); /* proto */
static PyObject *__pyx_pf_5lgcpp_9RateModel_10setup_D(struct __pyx_obj_5lgcpp_RateModel *__pyx_v_self, double __pyx_v_x); /* proto */
static PyObject *__pyx_pf_5lgcpp_9RateModel_12setup_E(struct __pyx_obj_5lgcpp_RateModel *__pyx_v_self, double __pyx_v_x); /* proto */
static PyObject *__pyx_pf_5lgcpp_9RateModel_14setup_Q(struct __pyx_obj_5lgcpp_RateModel *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5lgcpp_9RateModel_16setup_Dmask(struct __pyx_obj_5lgcpp_RateModel *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5lgcpp_9RateModel_18set_Dmask_cell(struct __pyx_obj_5lgcpp_RateModel *__pyx_v_self, int __pyx_v_period, int __pyx_v_area, int __pyx_v_area2, double __pyx_v_prob, bool __pyx_v_sym); /* proto */
static int __pyx_pf_5lgcpp_4Tree___cinit__(struct __pyx_obj_5lgcpp_Tree *__pyx_v_self); /* proto */
static void __pyx_pf_5lgcpp_4Tree_2__dealloc__(CYTHON_UNUSED struct __pyx_obj_5lgcpp_Tree *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5lgcpp_4Tree_4getNodeCount(struct __pyx_obj_5lgcpp_Tree *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5lgcpp_4Tree_6getExternalNodeCount(struct __pyx_obj_5lgcpp_Tree *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5lgcpp_4Tree_8getInternalNodeCount(struct __pyx_obj_5lgcpp_Tree *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5lgcpp_4Tree_10getExternalNode(struct __pyx_obj_5lgcpp_Tree *__pyx_v_self, int __pyx_v_i); /* proto */
static PyObject *__pyx_pf_5lgcpp_4Tree_12getInternalNode(struct __pyx_obj_5lgcpp_Tree *__pyx_v_self, int __pyx_v_i); /* proto */
static PyObject *__pyx_pf_5lgcpp_4Tree_14getMRCA(struct __pyx_obj_5lgcpp_Tree *__pyx_v_self, PyObject *__pyx_v_names); /* proto */
static PyObject *__pyx_pf_5lgcpp_4Tree_16internalNodes(struct __pyx_obj_5lgcpp_Tree *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5lgcpp_4Tree_18newick(struct __pyx_obj_5lgcpp_Tree *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5lgcpp_readtree(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_s); /* proto */
static int __pyx_pf_5lgcpp_10BioGeoTree___cinit__(struct __pyx_obj_5lgcpp_BioGeoTree *__pyx_v_self, struct __pyx_obj_5lgcpp_Tree *__pyx_v_t, PyObject *__pyx_v_periods); /* proto */
static void __pyx_pf_5lgcpp_10BioGeoTree_2__dealloc__(CYTHON_UNUSED struct __pyx_obj_5lgcpp_BioGeoTree *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5lgcpp_10BioGeoTree_4set_store_p_matrices(struct __pyx_obj_5lgcpp_BioGeoTree *__pyx_v_self, bool __pyx_v_b); /* proto */
static PyObject *__pyx_pf_5lgcpp_10BioGeoTree_6set_use_stored_matrices(struct __pyx_obj_5lgcpp_BioGeoTree *__pyx_v_self, bool __pyx_v_b); /* proto */
static PyObject *__pyx_pf_5lgcpp_10BioGeoTree_8update_default_model(struct __pyx_obj_5lgcpp_BioGeoTree *__pyx_v_self, struct __pyx_obj_5lgcpp_RateModel *__pyx_v_m); /* proto */
static PyObject *__pyx_pf_5lgcpp_10BioGeoTree_10set_default_model(struct __pyx_obj_5lgcpp_BioGeoTree *__pyx_v_self, struct __pyx_obj_5lgcpp_RateModel *__pyx_v_m); /* proto */
static PyObject *__pyx_pf_5lgcpp_10BioGeoTree_12set_excluded_dist(struct __pyx_obj_5lgcpp_BioGeoTree *__pyx_v_self, PyObject *__pyx_v_dist, struct __pyx_obj_5lgcpp_Node *__pyx_v_n); /* proto */
static PyObject *__pyx_pf_5lgcpp_10BioGeoTree_14set_tip_conditionals(struct __pyx_obj_5lgcpp_BioGeoTree *__pyx_v_self, PyObject *__pyx_v_data); /* proto */
static PyObject *__pyx_pf_5lgcpp_10BioGeoTree_16optimize_global_dispersal_extinction(struct __pyx_obj_5lgcpp_BioGeoTree *__pyx_v_self, bool __pyx_v_marginal, struct __pyx_obj_5lgcpp_RateModel *__pyx_v_m); /* proto */
static PyObject *__pyx_pf_5lgcpp_10BioGeoTree_18ancsplits(struct __pyx_obj_5lgcpp_BioGeoTree *__pyx_v_self, struct __pyx_obj_5lgcpp_Tree *__pyx_v_intree, bool __pyx_v_marginal, struct __pyx_obj_5lgcpp_RateModel *__pyx_v_m, PyObject *__pyx_v_areas); /* proto */
static PyObject *__pyx_pf_5lgcpp_10BioGeoTree_20setFossilatNodebyMRCA(struct __pyx_obj_5lgcpp_BioGeoTree *__pyx_v_self, PyObject *__pyx_v_names, int __pyx_v_area); /* proto */
static PyObject *__pyx_pf_5lgcpp_10BioGeoTree_22setFossilatNodebyMRCA_id(struct __pyx_obj_5lgcpp_BioGeoTree *__pyx_v_self, struct __pyx_obj_5lgcpp_Node *__pyx_v_n, int __pyx_v_area); /* proto */
static PyObject *__pyx_pf_5lgcpp_10BioGeoTree_24setFossilatBranchbyMRCA(struct __pyx_obj_5lgcpp_BioGeoTree *__pyx_v_self, PyObject *__pyx_v_names, int __pyx_v_area, double __pyx_v_age); /* proto */
static PyObject *__pyx_pf_5lgcpp_10BioGeoTree_26setFossilatBranchbyMRCA_id(struct __pyx_obj_5lgcpp_BioGeoTree *__pyx_v_self, struct __pyx_obj_5lgcpp_Node *__pyx_v_n, int __pyx_v_area, double __pyx_v_age); /* proto */
static int __pyx_pf_5lgcpp_11InputReader___cinit__(struct __pyx_obj_5lgcpp_InputReader *__pyx_v_self); /* proto */
static void __pyx_pf_5lgcpp_11InputReader_2__dealloc__(CYTHON_UNUSED struct __pyx_obj_5lgcpp_InputReader *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5lgcpp_11InputReader_4read_treefile(struct __pyx_obj_5lgcpp_InputReader *__pyx_v_self, PyObject *__pyx_v_filename); /* proto */
static char __pyx_k_1[] = "%ge%d";
static char __pyx_k_2[] = "";
static char __pyx_k_3[] = ";";
static char __pyx_k_4[] = "optimizing rate parameters...";
static char __pyx_k_5[] = "dispersal = %s; extinction = %s; -lnL = %s";
static char __pyx_k_6[] = "calculating ancestral splits...";
static char __pyx_k_9[] = "/home/rree/src/lagrange/src/lgcpp.pyx";
static char __pyx_k__m[] = "m";
static char __pyx_k__n[] = "n";
static char __pyx_k__s[] = "s";
static char __pyx_k__t[] = "t";
static char __pyx_k__ge[] = "ge";
static char __pyx_k__na[] = "na";
static char __pyx_k__age[] = "age";
static char __pyx_k__log[] = "log";
static char __pyx_k__sym[] = "sym";
static char __pyx_k__sys[] = "sys";
static char __pyx_k__Done[] = "Done";
static char __pyx_k__area[] = "area";
static char __pyx_k__dist[] = "dist";
static char __pyx_k__incl[] = "incl";
static char __pyx_k__join[] = "join";
static char __pyx_k__math[] = "math";
static char __pyx_k__prob[] = "prob";
static char __pyx_k__tree[] = "tree";
static char __pyx_k__area2[] = "area2";
static char __pyx_k__areas[] = "areas";
static char __pyx_k__items[] = "items";
static char __pyx_k__lgcpp[] = "lgcpp";
static char __pyx_k__names[] = "names";
static char __pyx_k__range[] = "range";
static char __pyx_k__intree[] = "intree";
static char __pyx_k__number[] = "number";
static char __pyx_k__period[] = "period";
static char __pyx_k__reader[] = "reader";
static char __pyx_k__sorted[] = "sorted";
static char __pyx_k__stderr[] = "stderr";
static char __pyx_k__indists[] = "indists";
static char __pyx_k__periods[] = "periods";
static char __pyx_k__setup_D[] = "setup_D";
static char __pyx_k__setup_E[] = "setup_E";
static char __pyx_k__setup_Q[] = "setup_Q";
static char __pyx_k__treestr[] = "treestr";
static char __pyx_k____main__[] = "__main__";
static char __pyx_k____test__[] = "__test__";
static char __pyx_k__exponent[] = "exponent";
static char __pyx_k__mantissa[] = "mantissa";
static char __pyx_k__marginal[] = "marginal";
static char __pyx_k__readtree[] = "readtree";
static char __pyx_k__reversed[] = "reversed";
static char __pyx_k__enumerate[] = "enumerate";
static char __pyx_k__is_sparse[] = "is_sparse";
static PyObject *__pyx_kp_s_1;
static PyObject *__pyx_kp_s_2;
static PyObject *__pyx_kp_s_3;
static PyObject *__pyx_kp_s_4;
static PyObject *__pyx_kp_s_5;
static PyObject *__pyx_kp_s_6;
static PyObject *__pyx_kp_s_9;
static PyObject *__pyx_n_s__Done;
static PyObject *__pyx_n_s____main__;
static PyObject *__pyx_n_s____test__;
static PyObject *__pyx_n_s__age;
static PyObject *__pyx_n_s__area;
static PyObject *__pyx_n_s__area2;
static PyObject *__pyx_n_s__areas;
static PyObject *__pyx_n_s__dist;
static PyObject *__pyx_n_s__enumerate;
static PyObject *__pyx_n_s__exponent;
static PyObject *__pyx_n_s__ge;
static PyObject *__pyx_n_s__incl;
static PyObject *__pyx_n_s__indists;
static PyObject *__pyx_n_s__intree;
static PyObject *__pyx_n_s__is_sparse;
static PyObject *__pyx_n_s__items;
static PyObject *__pyx_n_s__join;
static PyObject *__pyx_n_s__lgcpp;
static PyObject *__pyx_n_s__log;
static PyObject *__pyx_n_s__m;
static PyObject *__pyx_n_s__mantissa;
static PyObject *__pyx_n_s__marginal;
static PyObject *__pyx_n_s__math;
static PyObject *__pyx_n_s__n;
static PyObject *__pyx_n_s__na;
static PyObject *__pyx_n_s__names;
static PyObject *__pyx_n_s__period;
static PyObject *__pyx_n_s__periods;
static PyObject *__pyx_n_s__prob;
static PyObject *__pyx_n_s__range;
static PyObject *__pyx_n_s__reader;
static PyObject *__pyx_n_s__readtree;
static PyObject *__pyx_n_s__reversed;
static PyObject *__pyx_n_s__s;
static PyObject *__pyx_n_s__setup_D;
static PyObject *__pyx_n_s__setup_E;
static PyObject *__pyx_n_s__setup_Q;
static PyObject *__pyx_n_s__sorted;
static PyObject *__pyx_n_s__stderr;
static PyObject *__pyx_n_s__sym;
static PyObject *__pyx_n_s__sys;
static PyObject *__pyx_n_s__t;
static PyObject *__pyx_n_s__tree;
static PyObject *__pyx_n_s__treestr;
static PyObject *__pyx_k_tuple_7;
static PyObject *__pyx_k_codeobj_8;

/* "lgcpp.pyx":44
 *     _Superdouble super_ln(_Superdouble)
 * 
 * cdef _Superdouble * superptr(_Superdouble x):             # <<<<<<<<<<<<<<
 *     return &x
 * 
 */

static Superdouble *__pyx_f_5lgcpp_superptr(Superdouble __pyx_v_x) {
  Superdouble *__pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("superptr", 0);

  /* "lgcpp.pyx":45
 * 
 * cdef _Superdouble * superptr(_Superdouble x):
 *     return &x             # <<<<<<<<<<<<<<
 * 
 * cdef class Superdouble:
 */
  __pyx_r = (&__pyx_v_x);
  goto __pyx_L0;

  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_5lgcpp_11Superdouble_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_5lgcpp_11Superdouble_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  long double __pyx_v_mantissa;
  int __pyx_v_exponent;
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__mantissa,&__pyx_n_s__exponent,0};
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  {
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s__mantissa);
          if (value) { values[0] = value; kw_args--; }
        }
        case  1:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s__exponent);
          if (value) { values[1] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__cinit__") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 49; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
      if (values[0]) {
      } else {

        /* "lgcpp.pyx":49
 * cdef class Superdouble:
 *     cdef _Superdouble* ptr
 *     def __cinit__(self, long double mantissa=1.0, int exponent=0):             # <<<<<<<<<<<<<<
 *         self.ptr = new _Superdouble(mantissa, exponent)
 *     def __str__(self):
 */
        __pyx_v_mantissa = ((long double)1.0);
      }
      if (values[1]) {
      } else {
        __pyx_v_exponent = ((int)0);
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    if (values[0]) {
      __pyx_v_mantissa = __pyx_PyFloat_AsDouble(values[0]); if (unlikely((__pyx_v_mantissa == (long double)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 49; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    } else {
      __pyx_v_mantissa = ((long double)1.0);
    }
    if (values[1]) {
      __pyx_v_exponent = __Pyx_PyInt_AsInt(values[1]); if (unlikely((__pyx_v_exponent == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 49; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    } else {
      __pyx_v_exponent = ((int)0);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__cinit__", 0, 0, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 49; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("lgcpp.Superdouble.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5lgcpp_11Superdouble___cinit__(((struct __pyx_obj_5lgcpp_Superdouble *)__pyx_v_self), __pyx_v_mantissa, __pyx_v_exponent);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5lgcpp_11Superdouble___cinit__(struct __pyx_obj_5lgcpp_Superdouble *__pyx_v_self, long double __pyx_v_mantissa, int __pyx_v_exponent) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "lgcpp.pyx":50
 *     cdef _Superdouble* ptr
 *     def __cinit__(self, long double mantissa=1.0, int exponent=0):
 *         self.ptr = new _Superdouble(mantissa, exponent)             # <<<<<<<<<<<<<<
 *     def __str__(self):
 *         self.ptr.adjustDecimal()
 */
  __pyx_v_self->ptr = new Superdouble(__pyx_v_mantissa, __pyx_v_exponent);

  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_5lgcpp_11Superdouble_3__str__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5lgcpp_11Superdouble_3__str__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__str__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5lgcpp_11Superdouble_2__str__(((struct __pyx_obj_5lgcpp_Superdouble *)__pyx_v_self));
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "lgcpp.pyx":51
 *     def __cinit__(self, long double mantissa=1.0, int exponent=0):
 *         self.ptr = new _Superdouble(mantissa, exponent)
 *     def __str__(self):             # <<<<<<<<<<<<<<
 *         self.ptr.adjustDecimal()
 *         return "%ge%d" % (self.ptr.getMantissa(), self.ptr.getExponent())
 */

static PyObject *__pyx_pf_5lgcpp_11Superdouble_2__str__(struct __pyx_obj_5lgcpp_Superdouble *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__str__", 0);

  /* "lgcpp.pyx":52
 *         self.ptr = new _Superdouble(mantissa, exponent)
 *     def __str__(self):
 *         self.ptr.adjustDecimal()             # <<<<<<<<<<<<<<
 *         return "%ge%d" % (self.ptr.getMantissa(), self.ptr.getExponent())
 *     def __float__(self):
 */
  __pyx_v_self->ptr->adjustDecimal();

  /* "lgcpp.pyx":53
 *     def __str__(self):
 *         self.ptr.adjustDecimal()
 *         return "%ge%d" % (self.ptr.getMantissa(), self.ptr.getExponent())             # <<<<<<<<<<<<<<
 *     def __float__(self):
 *         return float(str(self))
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->ptr->getMantissa()); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 53; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyInt_FromLong(__pyx_v_self->ptr->getExponent()); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 53; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 53; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_2);
  __pyx_t_1 = 0;
  __pyx_t_2 = 0;
  __pyx_t_2 = PyNumber_Remainder(((PyObject *)__pyx_kp_s_1), ((PyObject *)__pyx_t_3)); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 53; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_2));
  __Pyx_DECREF(((PyObject *)__pyx_t_3)); __pyx_t_3 = 0;
  __pyx_r = ((PyObject *)__pyx_t_2);
  __pyx_t_2 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("lgcpp.Superdouble.__str__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_5lgcpp_11Superdouble_5__float__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5lgcpp_11Superdouble_5__float__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__float__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5lgcpp_11Superdouble_4__float__(((struct __pyx_obj_5lgcpp_Superdouble *)__pyx_v_self));
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "lgcpp.pyx":54
 *         self.ptr.adjustDecimal()
 *         return "%ge%d" % (self.ptr.getMantissa(), self.ptr.getExponent())
 *     def __float__(self):             # <<<<<<<<<<<<<<
 *         return float(str(self))
 *     ## def getLn(self):
 */

static PyObject *__pyx_pf_5lgcpp_11Superdouble_4__float__(struct __pyx_obj_5lgcpp_Superdouble *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  double __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__float__", 0);

  /* "lgcpp.pyx":55
 *         return "%ge%d" % (self.ptr.getMantissa(), self.ptr.getExponent())
 *     def __float__(self):
 *         return float(str(self))             # <<<<<<<<<<<<<<
 *     ## def getLn(self):
 *     ##     return super_ln(self.ptr)
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 55; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(((PyObject *)__pyx_v_self));
  PyTuple_SET_ITEM(__pyx_t_1, 0, ((PyObject *)__pyx_v_self));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_self));
  __pyx_t_2 = PyObject_Call(((PyObject *)((PyObject*)(&PyString_Type))), ((PyObject *)__pyx_t_1), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 55; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(((PyObject *)__pyx_t_1)); __pyx_t_1 = 0;
  __pyx_t_3 = __Pyx_PyObject_AsDouble(__pyx_t_2); if (unlikely(__pyx_t_3 == ((double)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 55; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyFloat_FromDouble(__pyx_t_3); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 55; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("lgcpp.Superdouble.__float__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "lgcpp.pyx":59
 *     ##     return super_ln(self.ptr)
 * 
 * cdef Superdouble superdouble_factory(_Superdouble *p):             # <<<<<<<<<<<<<<
 *     cdef Superdouble n = Superdouble.__new__(Superdouble)
 *     n.ptr = p
 */

static struct __pyx_obj_5lgcpp_Superdouble *__pyx_f_5lgcpp_superdouble_factory(Superdouble *__pyx_v_p) {
  struct __pyx_obj_5lgcpp_Superdouble *__pyx_v_n = 0;
  struct __pyx_obj_5lgcpp_Superdouble *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("superdouble_factory", 0);

  /* "lgcpp.pyx":60
 * 
 * cdef Superdouble superdouble_factory(_Superdouble *p):
 *     cdef Superdouble n = Superdouble.__new__(Superdouble)             # <<<<<<<<<<<<<<
 *     n.ptr = p
 *     return n
 */
  __pyx_t_1 = __Pyx_tp_new(((PyObject*)__pyx_ptype_5lgcpp_Superdouble)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 60; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_5lgcpp_Superdouble)))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 60; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_n = ((struct __pyx_obj_5lgcpp_Superdouble *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "lgcpp.pyx":61
 * cdef Superdouble superdouble_factory(_Superdouble *p):
 *     cdef Superdouble n = Superdouble.__new__(Superdouble)
 *     n.ptr = p             # <<<<<<<<<<<<<<
 *     return n
 * 
 */
  __pyx_v_n->ptr = __pyx_v_p;

  /* "lgcpp.pyx":62
 *     cdef Superdouble n = Superdouble.__new__(Superdouble)
 *     n.ptr = p
 *     return n             # <<<<<<<<<<<<<<
 * 
 * ## cdef long double super2double(_Superdouble x):
 */
  __Pyx_XDECREF(((PyObject *)__pyx_r));
  __Pyx_INCREF(((PyObject *)__pyx_v_n));
  __pyx_r = __pyx_v_n;
  goto __pyx_L0;

  __pyx_r = ((struct __pyx_obj_5lgcpp_Superdouble *)Py_None); __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("lgcpp.superdouble_factory", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_n);
  __Pyx_XGIVEREF((PyObject *)__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_5lgcpp_4Node_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_5lgcpp_4Node_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return -1;}
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__cinit__", 0))) return -1;
  __pyx_r = __pyx_pf_5lgcpp_4Node___cinit__(((struct __pyx_obj_5lgcpp_Node *)__pyx_v_self));
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "lgcpp.pyx":79
 * cdef class Node:
 *     cdef _Node* ptr
 *     def __cinit__(self):             # <<<<<<<<<<<<<<
 *         self.ptr = NULL
 *     def __dealloc__(self):
 */

static int __pyx_pf_5lgcpp_4Node___cinit__(struct __pyx_obj_5lgcpp_Node *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "lgcpp.pyx":80
 *     cdef _Node* ptr
 *     def __cinit__(self):
 *         self.ptr = NULL             # <<<<<<<<<<<<<<
 *     def __dealloc__(self):
 *         del self.ptr
 */
  __pyx_v_self->ptr = NULL;

  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static void __pyx_pw_5lgcpp_4Node_3__dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pw_5lgcpp_4Node_3__dealloc__(PyObject *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_pf_5lgcpp_4Node_2__dealloc__(((struct __pyx_obj_5lgcpp_Node *)__pyx_v_self));
  __Pyx_RefNannyFinishContext();
}

/* "lgcpp.pyx":81
 *     def __cinit__(self):
 *         self.ptr = NULL
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         del self.ptr
 *     def getName(self):
 */

static void __pyx_pf_5lgcpp_4Node_2__dealloc__(CYTHON_UNUSED struct __pyx_obj_5lgcpp_Node *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__", 0);

  /* "lgcpp.pyx":82
 *         self.ptr = NULL
 *     def __dealloc__(self):
 *         del self.ptr             # <<<<<<<<<<<<<<
 *     def getName(self):
 *         return self.ptr.getName().c_str()
 */
  delete __pyx_v_self->ptr;

  __Pyx_RefNannyFinishContext();
}

/* Python wrapper */
static PyObject *__pyx_pw_5lgcpp_4Node_5getName(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_5lgcpp_4Node_5getName(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getName (wrapper)", 0);
  __pyx_r = __pyx_pf_5lgcpp_4Node_4getName(((struct __pyx_obj_5lgcpp_Node *)__pyx_v_self));
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "lgcpp.pyx":83
 *     def __dealloc__(self):
 *         del self.ptr
 *     def getName(self):             # <<<<<<<<<<<<<<
 *         return self.ptr.getName().c_str()
 *     def getNumber(self):
 */

static PyObject *__pyx_pf_5lgcpp_4Node_4getName(struct __pyx_obj_5lgcpp_Node *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getName", 0);

  /* "lgcpp.pyx":84
 *         del self.ptr
 *     def getName(self):
 *         return self.ptr.getName().c_str()             # <<<<<<<<<<<<<<
 *     def getNumber(self):
 *         return self.ptr.getNumber()
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyBytes_FromString(__pyx_v_self->ptr->getName().c_str()); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 84; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_1));
  __pyx_r = ((PyObject *)__pyx_t_1);
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("lgcpp.Node.getName", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_5lgcpp_4Node_7getNumber(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_5lgcpp_4Node_7getNumber(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getNumber (wrapper)", 0);
  __pyx_r = __pyx_pf_5lgcpp_4Node_6getNumber(((struct __pyx_obj_5lgcpp_Node *)__pyx_v_self));
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "lgcpp.pyx":85
 *     def getName(self):
 *         return self.ptr.getName().c_str()
 *     def getNumber(self):             # <<<<<<<<<<<<<<
 *         return self.ptr.getNumber()
 *     def getParent(self):
 */

static PyObject *__pyx_pf_5lgcpp_4Node_6getNumber(struct __pyx_obj_5lgcpp_Node *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getNumber", 0);

  /* "lgcpp.pyx":86
 *         return self.ptr.getName().c_str()
 *     def getNumber(self):
 *         return self.ptr.getNumber()             # <<<<<<<<<<<<<<
 *     def getParent(self):
 *         return node_factory(self.ptr.getParent())
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyInt_FromLong(__pyx_v_self->ptr->getNumber()); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 86; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("lgcpp.Node.getNumber", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_5lgcpp_4Node_9getParent(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_5lgcpp_4Node_9getParent(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getParent (wrapper)", 0);
  __pyx_r = __pyx_pf_5lgcpp_4Node_8getParent(((struct __pyx_obj_5lgcpp_Node *)__pyx_v_self));
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "lgcpp.pyx":87
 *     def getNumber(self):
 *         return self.ptr.getNumber()
 *     def getParent(self):             # <<<<<<<<<<<<<<
 *         return node_factory(self.ptr.getParent())
 *     ## def set_tip_conditional(self, double i):
 */

static PyObject *__pyx_pf_5lgcpp_4Node_8getParent(struct __pyx_obj_5lgcpp_Node *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getParent", 0);

  /* "lgcpp.pyx":88
 *         return self.ptr.getNumber()
 *     def getParent(self):
 *         return node_factory(self.ptr.getParent())             # <<<<<<<<<<<<<<
 *     ## def set_tip_conditional(self, double i):
 *     ##     cdef vector[_BranchSegment]* v = self.ptr.getSegVector()
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = ((PyObject *)__pyx_f_5lgcpp_node_factory(__pyx_v_self->ptr->getParent())); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 88; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("lgcpp.Node.getParent", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "lgcpp.pyx":94
 *     ##     seg.distconds.at(i) = <double>i
 * 
 * cdef Node node_factory(_Node *p):             # <<<<<<<<<<<<<<
 *     cdef Node n = Node.__new__(Node)
 *     n.ptr = p
 */

static struct __pyx_obj_5lgcpp_Node *__pyx_f_5lgcpp_node_factory(Node *__pyx_v_p) {
  struct __pyx_obj_5lgcpp_Node *__pyx_v_n = 0;
  struct __pyx_obj_5lgcpp_Node *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("node_factory", 0);

  /* "lgcpp.pyx":95
 * 
 * cdef Node node_factory(_Node *p):
 *     cdef Node n = Node.__new__(Node)             # <<<<<<<<<<<<<<
 *     n.ptr = p
 *     return n
 */
  __pyx_t_1 = __Pyx_tp_new(((PyObject*)__pyx_ptype_5lgcpp_Node)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 95; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_5lgcpp_Node)))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 95; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_n = ((struct __pyx_obj_5lgcpp_Node *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "lgcpp.pyx":96
 * cdef Node node_factory(_Node *p):
 *     cdef Node n = Node.__new__(Node)
 *     n.ptr = p             # <<<<<<<<<<<<<<
 *     return n
 * 
 */
  __pyx_v_n->ptr = __pyx_v_p;

  /* "lgcpp.pyx":97
 *     cdef Node n = Node.__new__(Node)
 *     n.ptr = p
 *     return n             # <<<<<<<<<<<<<<
 * 
 * cdef extern from "BranchSegment.h":
 */
  __Pyx_XDECREF(((PyObject *)__pyx_r));
  __Pyx_INCREF(((PyObject *)__pyx_v_n));
  __pyx_r = __pyx_v_n;
  goto __pyx_L0;

  __pyx_r = ((struct __pyx_obj_5lgcpp_Node *)Py_None); __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("lgcpp.node_factory", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_n);
  __Pyx_XGIVEREF((PyObject *)__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_5lgcpp_13BranchSegment_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_5lgcpp_13BranchSegment_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return -1;}
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__cinit__", 0))) return -1;
  __pyx_r = __pyx_pf_5lgcpp_13BranchSegment___cinit__(((struct __pyx_obj_5lgcpp_BranchSegment *)__pyx_v_self));
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "lgcpp.pyx":106
 * cdef class BranchSegment:
 *     cdef _BranchSegment* ptr
 *     def __cinit__(self):             # <<<<<<<<<<<<<<
 *         self.ptr = NULL
 *     def __dealloc__(self):
 */

static int __pyx_pf_5lgcpp_13BranchSegment___cinit__(struct __pyx_obj_5lgcpp_BranchSegment *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "lgcpp.pyx":107
 *     cdef _BranchSegment* ptr
 *     def __cinit__(self):
 *         self.ptr = NULL             # <<<<<<<<<<<<<<
 *     def __dealloc__(self):
 *         del self.ptr
 */
  __pyx_v_self->ptr = NULL;

  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static void __pyx_pw_5lgcpp_13BranchSegment_3__dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pw_5lgcpp_13BranchSegment_3__dealloc__(PyObject *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_pf_5lgcpp_13BranchSegment_2__dealloc__(((struct __pyx_obj_5lgcpp_BranchSegment *)__pyx_v_self));
  __Pyx_RefNannyFinishContext();
}

/* "lgcpp.pyx":108
 *     def __cinit__(self):
 *         self.ptr = NULL
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         del self.ptr
 *     ## property distconds:
 */

static void __pyx_pf_5lgcpp_13BranchSegment_2__dealloc__(CYTHON_UNUSED struct __pyx_obj_5lgcpp_BranchSegment *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__", 0);

  /* "lgcpp.pyx":109
 *         self.ptr = NULL
 *     def __dealloc__(self):
 *         del self.ptr             # <<<<<<<<<<<<<<
 *     ## property distconds:
 *     ##     def __get__(self):
 */
  delete __pyx_v_self->ptr;

  __Pyx_RefNannyFinishContext();
}

/* "lgcpp.pyx":114
 *     ##         return self.ptr.distconds
 * 
 * cdef BranchSegment branchsegment_factory(_BranchSegment *p):             # <<<<<<<<<<<<<<
 *     cdef BranchSegment bs = BranchSegment.__new__(BranchSegment)
 *     bs.ptr = p
 */

static struct __pyx_obj_5lgcpp_BranchSegment *__pyx_f_5lgcpp_branchsegment_factory(BranchSegment *__pyx_v_p) {
  struct __pyx_obj_5lgcpp_BranchSegment *__pyx_v_bs = 0;
  struct __pyx_obj_5lgcpp_BranchSegment *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("branchsegment_factory", 0);

  /* "lgcpp.pyx":115
 * 
 * cdef BranchSegment branchsegment_factory(_BranchSegment *p):
 *     cdef BranchSegment bs = BranchSegment.__new__(BranchSegment)             # <<<<<<<<<<<<<<
 *     bs.ptr = p
 *     return bs
 */
  __pyx_t_1 = __Pyx_tp_new(((PyObject*)__pyx_ptype_5lgcpp_BranchSegment)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 115; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_5lgcpp_BranchSegment)))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 115; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_bs = ((struct __pyx_obj_5lgcpp_BranchSegment *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "lgcpp.pyx":116
 * cdef BranchSegment branchsegment_factory(_BranchSegment *p):
 *     cdef BranchSegment bs = BranchSegment.__new__(BranchSegment)
 *     bs.ptr = p             # <<<<<<<<<<<<<<
 *     return bs
 * 
 */
  __pyx_v_bs->ptr = __pyx_v_p;

  /* "lgcpp.pyx":117
 *     cdef BranchSegment bs = BranchSegment.__new__(BranchSegment)
 *     bs.ptr = p
 *     return bs             # <<<<<<<<<<<<<<
 * 
 * cdef extern from "RateModel.h":
 */
  __Pyx_XDECREF(((PyObject *)__pyx_r));
  __Pyx_INCREF(((PyObject *)__pyx_v_bs));
  __pyx_r = __pyx_v_bs;
  goto __pyx_L0;

  __pyx_r = ((struct __pyx_obj_5lgcpp_BranchSegment *)Py_None); __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("lgcpp.branchsegment_factory", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_bs);
  __Pyx_XGIVEREF((PyObject *)__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_5lgcpp_9RateModel_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_5lgcpp_9RateModel_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_v_na;
  bool __pyx_v_ge;
  PyObject *__pyx_v_periods = 0;
  bool __pyx_v_is_sparse;
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__na,&__pyx_n_s__ge,&__pyx_n_s__periods,&__pyx_n_s__is_sparse,0};
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  {
    PyObject* values[4] = {0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__na);
        if (likely(values[0])) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__ge);
        if (likely(values[1])) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 4, 4, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 137; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  2:
        values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__periods);
        if (likely(values[2])) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 4, 4, 2); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 137; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  3:
        values[3] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__is_sparse);
        if (likely(values[3])) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 4, 4, 3); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 137; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__cinit__") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 137; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 4) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
    }
    __pyx_v_na = __Pyx_PyInt_AsInt(values[0]); if (unlikely((__pyx_v_na == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 137; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    __pyx_v_ge = __Pyx_PyObject_IsTrue(values[1]); if (unlikely((__pyx_v_ge == (bool)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 137; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    __pyx_v_periods = ((PyObject*)values[2]);
    __pyx_v_is_sparse = __Pyx_PyObject_IsTrue(values[3]); if (unlikely((__pyx_v_is_sparse == (bool)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 137; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 4, 4, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 137; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("lgcpp.RateModel.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_periods), (&PyList_Type), 1, "periods", 1))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 137; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_pf_5lgcpp_9RateModel___cinit__(((struct __pyx_obj_5lgcpp_RateModel *)__pyx_v_self), __pyx_v_na, __pyx_v_ge, __pyx_v_periods, __pyx_v_is_sparse);
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "lgcpp.pyx":137
 * cdef class RateModel:
 *     cdef _RateModel* ptr
 *     def __cinit__(self, int na, bool ge, list periods, bool is_sparse):             # <<<<<<<<<<<<<<
 *         cdef vector[double] v = vector[double]()
 *         for x in periods: v.push_back(x)
 */

static int __pyx_pf_5lgcpp_9RateModel___cinit__(struct __pyx_obj_5lgcpp_RateModel *__pyx_v_self, int __pyx_v_na, bool __pyx_v_ge, PyObject *__pyx_v_periods, bool __pyx_v_is_sparse) {
  std::vector<double> __pyx_v_v;
  PyObject *__pyx_v_x = NULL;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  double __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "lgcpp.pyx":138
 *     cdef _RateModel* ptr
 *     def __cinit__(self, int na, bool ge, list periods, bool is_sparse):
 *         cdef vector[double] v = vector[double]()             # <<<<<<<<<<<<<<
 *         for x in periods: v.push_back(x)
 *         self.ptr = new _RateModel(na, ge, v, is_sparse)
 */
  __pyx_v_v = std::vector<double>();

  /* "lgcpp.pyx":139
 *     def __cinit__(self, int na, bool ge, list periods, bool is_sparse):
 *         cdef vector[double] v = vector[double]()
 *         for x in periods: v.push_back(x)             # <<<<<<<<<<<<<<
 *         self.ptr = new _RateModel(na, ge, v, is_sparse)
 *     def __dealloc__(self):
 */
  if (unlikely(((PyObject *)__pyx_v_periods) == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable"); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 139; __pyx_clineno = __LINE__; goto __pyx_L1_error;} 
  }
  __pyx_t_1 = ((PyObject *)__pyx_v_periods); __Pyx_INCREF(__pyx_t_1); __pyx_t_2 = 0;
  for (;;) {
    if (__pyx_t_2 >= PyList_GET_SIZE(__pyx_t_1)) break;
    __pyx_t_3 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_3); __pyx_t_2++;
    __Pyx_XDECREF(__pyx_v_x);
    __pyx_v_x = __pyx_t_3;
    __pyx_t_3 = 0;
    __pyx_t_4 = __pyx_PyFloat_AsDouble(__pyx_v_x); if (unlikely((__pyx_t_4 == (double)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 139; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_v_v.push_back(__pyx_t_4);
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "lgcpp.pyx":140
 *         cdef vector[double] v = vector[double]()
 *         for x in periods: v.push_back(x)
 *         self.ptr = new _RateModel(na, ge, v, is_sparse)             # <<<<<<<<<<<<<<
 *     def __dealloc__(self):
 *         del self.ptr
 */
  __pyx_v_self->ptr = new RateModel(__pyx_v_na, __pyx_v_ge, __pyx_v_v, __pyx_v_is_sparse);

  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("lgcpp.RateModel.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_x);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static void __pyx_pw_5lgcpp_9RateModel_3__dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pw_5lgcpp_9RateModel_3__dealloc__(PyObject *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_pf_5lgcpp_9RateModel_2__dealloc__(((struct __pyx_obj_5lgcpp_RateModel *)__pyx_v_self));
  __Pyx_RefNannyFinishContext();
}

/* "lgcpp.pyx":141
 *         for x in periods: v.push_back(x)
 *         self.ptr = new _RateModel(na, ge, v, is_sparse)
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         del self.ptr
 *     def set_nthreads(self, int n):
 */

static void __pyx_pf_5lgcpp_9RateModel_2__dealloc__(CYTHON_UNUSED struct __pyx_obj_5lgcpp_RateModel *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__", 0);

  /* "lgcpp.pyx":142
 *         self.ptr = new _RateModel(na, ge, v, is_sparse)
 *     def __dealloc__(self):
 *         del self.ptr             # <<<<<<<<<<<<<<
 *     def set_nthreads(self, int n):
 *         self.ptr.set_nthreads(n)
 */
  delete __pyx_v_self->ptr;

  __Pyx_RefNannyFinishContext();
}

/* Python wrapper */
static PyObject *__pyx_pw_5lgcpp_9RateModel_5set_nthreads(PyObject *__pyx_v_self, PyObject *__pyx_arg_n); /*proto*/
static PyObject *__pyx_pw_5lgcpp_9RateModel_5set_nthreads(PyObject *__pyx_v_self, PyObject *__pyx_arg_n) {
  int __pyx_v_n;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_nthreads (wrapper)", 0);
  assert(__pyx_arg_n); {
    __pyx_v_n = __Pyx_PyInt_AsInt(__pyx_arg_n); if (unlikely((__pyx_v_n == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 143; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("lgcpp.RateModel.set_nthreads", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5lgcpp_9RateModel_4set_nthreads(((struct __pyx_obj_5lgcpp_RateModel *)__pyx_v_self), ((int)__pyx_v_n));
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "lgcpp.pyx":143
 *     def __dealloc__(self):
 *         del self.ptr
 *     def set_nthreads(self, int n):             # <<<<<<<<<<<<<<
 *         self.ptr.set_nthreads(n)
 *     def get_nthreads(self):
 */

static PyObject *__pyx_pf_5lgcpp_9RateModel_4set_nthreads(struct __pyx_obj_5lgcpp_RateModel *__pyx_v_self, int __pyx_v_n) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_nthreads", 0);

  /* "lgcpp.pyx":144
 *         del self.ptr
 *     def set_nthreads(self, int n):
 *         self.ptr.set_nthreads(n)             # <<<<<<<<<<<<<<
 *     def get_nthreads(self):
 *         return self.ptr.get_nthreads()
 */
  __pyx_v_self->ptr->set_nthreads(__pyx_v_n);

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_5lgcpp_9RateModel_7get_nthreads(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_5lgcpp_9RateModel_7get_nthreads(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_nthreads (wrapper)", 0);
  __pyx_r = __pyx_pf_5lgcpp_9RateModel_6get_nthreads(((struct __pyx_obj_5lgcpp_RateModel *)__pyx_v_self));
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "lgcpp.pyx":145
 *     def set_nthreads(self, int n):
 *         self.ptr.set_nthreads(n)
 *     def get_nthreads(self):             # <<<<<<<<<<<<<<
 *         return self.ptr.get_nthreads()
 *     def setup_dists(self, list indists=None, bool incl=True):
 */

static PyObject *__pyx_pf_5lgcpp_9RateModel_6get_nthreads(struct __pyx_obj_5lgcpp_RateModel *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_nthreads", 0);

  /* "lgcpp.pyx":146
 *         self.ptr.set_nthreads(n)
 *     def get_nthreads(self):
 *         return self.ptr.get_nthreads()             # <<<<<<<<<<<<<<
 *     def setup_dists(self, list indists=None, bool incl=True):
 *         cdef vector[vector[int]] v = vector[vector[int]]()
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyInt_FromLong(__pyx_v_self->ptr->get_nthreads()); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 146; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("lgcpp.RateModel.get_nthreads", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_5lgcpp_9RateModel_9setup_dists(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_5lgcpp_9RateModel_9setup_dists(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_indists = 0;
  bool __pyx_v_incl;
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__indists,&__pyx_n_s__incl,0};
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("setup_dists (wrapper)", 0);
  {
    PyObject* values[2] = {0,0};

    /* "lgcpp.pyx":147
 *     def get_nthreads(self):
 *         return self.ptr.get_nthreads()
 *     def setup_dists(self, list indists=None, bool incl=True):             # <<<<<<<<<<<<<<
 *         cdef vector[vector[int]] v = vector[vector[int]]()
 *         cdef vector[int]* k
 */
    values[0] = ((PyObject*)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s__indists);
          if (value) { values[0] = value; kw_args--; }
        }
        case  1:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s__incl);
          if (value) { values[1] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "setup_dists") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 147; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
      if (values[1]) {
      } else {
        __pyx_v_incl = ((bool)1);
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_indists = ((PyObject*)values[0]);
    if (values[1]) {
      __pyx_v_incl = __Pyx_PyObject_IsTrue(values[1]); if (unlikely((__pyx_v_incl == (bool)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 147; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    } else {
      __pyx_v_incl = ((bool)1);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("setup_dists", 0, 0, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 147; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("lgcpp.RateModel.setup_dists", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_indists), (&PyList_Type), 1, "indists", 1))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 147; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_pf_5lgcpp_9RateModel_8setup_dists(((struct __pyx_obj_5lgcpp_RateModel *)__pyx_v_self), __pyx_v_indists, __pyx_v_incl);
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5lgcpp_9RateModel_8setup_dists(struct __pyx_obj_5lgcpp_RateModel *__pyx_v_self, PyObject *__pyx_v_indists, bool __pyx_v_incl) {
  std::vector<std::vector<int> > __pyx_v_v;
  std::vector<int> *__pyx_v_k;
  PyObject *__pyx_v_row = NULL;
  PyObject *__pyx_v_x = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  Py_ssize_t __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  Py_ssize_t __pyx_t_5;
  PyObject *(*__pyx_t_6)(PyObject *);
  PyObject *__pyx_t_7 = NULL;
  int __pyx_t_8;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("setup_dists", 0);

  /* "lgcpp.pyx":148
 *         return self.ptr.get_nthreads()
 *     def setup_dists(self, list indists=None, bool incl=True):
 *         cdef vector[vector[int]] v = vector[vector[int]]()             # <<<<<<<<<<<<<<
 *         cdef vector[int]* k
 *         if indists:
 */
  __pyx_v_v = std::vector<std::vector<int> >();

  /* "lgcpp.pyx":150
 *         cdef vector[vector[int]] v = vector[vector[int]]()
 *         cdef vector[int]* k
 *         if indists:             # <<<<<<<<<<<<<<
 *             for row in indists:
 *                 k = new vector[int]()
 */
  __pyx_t_1 = (((PyObject *)__pyx_v_indists) != Py_None) && (PyList_GET_SIZE(((PyObject *)__pyx_v_indists)) != 0);
  if (__pyx_t_1) {

    /* "lgcpp.pyx":151
 *         cdef vector[int]* k
 *         if indists:
 *             for row in indists:             # <<<<<<<<<<<<<<
 *                 k = new vector[int]()
 *                 for x in row: k.push_back(x)
 */
    if (unlikely(((PyObject *)__pyx_v_indists) == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable"); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 151; __pyx_clineno = __LINE__; goto __pyx_L1_error;} 
    }
    __pyx_t_2 = ((PyObject *)__pyx_v_indists); __Pyx_INCREF(__pyx_t_2); __pyx_t_3 = 0;
    for (;;) {
      if (__pyx_t_3 >= PyList_GET_SIZE(__pyx_t_2)) break;
      __pyx_t_4 = PyList_GET_ITEM(__pyx_t_2, __pyx_t_3); __Pyx_INCREF(__pyx_t_4); __pyx_t_3++;
      __Pyx_XDECREF(__pyx_v_row);
      __pyx_v_row = __pyx_t_4;
      __pyx_t_4 = 0;

      /* "lgcpp.pyx":152
 *         if indists:
 *             for row in indists:
 *                 k = new vector[int]()             # <<<<<<<<<<<<<<
 *                 for x in row: k.push_back(x)
 *                 v.push_back(deref(k))
 */
      __pyx_v_k = new std::vector<int>();

      /* "lgcpp.pyx":153
 *             for row in indists:
 *                 k = new vector[int]()
 *                 for x in row: k.push_back(x)             # <<<<<<<<<<<<<<
 *                 v.push_back(deref(k))
 *             self.ptr.setup_dists(v, incl)
 */
      if (PyList_CheckExact(__pyx_v_row) || PyTuple_CheckExact(__pyx_v_row)) {
        __pyx_t_4 = __pyx_v_row; __Pyx_INCREF(__pyx_t_4); __pyx_t_5 = 0;
        __pyx_t_6 = NULL;
      } else {
        __pyx_t_5 = -1; __pyx_t_4 = PyObject_GetIter(__pyx_v_row); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 153; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_4);
        __pyx_t_6 = Py_TYPE(__pyx_t_4)->tp_iternext;
      }
      for (;;) {
        if (!__pyx_t_6 && PyList_CheckExact(__pyx_t_4)) {
          if (__pyx_t_5 >= PyList_GET_SIZE(__pyx_t_4)) break;
          __pyx_t_7 = PyList_GET_ITEM(__pyx_t_4, __pyx_t_5); __Pyx_INCREF(__pyx_t_7); __pyx_t_5++;
        } else if (!__pyx_t_6 && PyTuple_CheckExact(__pyx_t_4)) {
          if (__pyx_t_5 >= PyTuple_GET_SIZE(__pyx_t_4)) break;
          __pyx_t_7 = PyTuple_GET_ITEM(__pyx_t_4, __pyx_t_5); __Pyx_INCREF(__pyx_t_7); __pyx_t_5++;
        } else {
          __pyx_t_7 = __pyx_t_6(__pyx_t_4);
          if (unlikely(!__pyx_t_7)) {
            if (PyErr_Occurred()) {
              if (likely(PyErr_ExceptionMatches(PyExc_StopIteration))) PyErr_Clear();
              else {__pyx_filename = __pyx_f[0]; __pyx_lineno = 153; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
            }
            break;
          }
          __Pyx_GOTREF(__pyx_t_7);
        }
        __Pyx_XDECREF(__pyx_v_x);
        __pyx_v_x = __pyx_t_7;
        __pyx_t_7 = 0;
        __pyx_t_8 = __Pyx_PyInt_AsInt(__pyx_v_x); if (unlikely((__pyx_t_8 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 153; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __pyx_v_k->push_back(__pyx_t_8);
      }
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

      /* "lgcpp.pyx":154
 *                 k = new vector[int]()
 *                 for x in row: k.push_back(x)
 *                 v.push_back(deref(k))             # <<<<<<<<<<<<<<
 *             self.ptr.setup_dists(v, incl)
 *         else:
 */
      __pyx_v_v.push_back((*__pyx_v_k));
    }
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "lgcpp.pyx":155
 *                 for x in row: k.push_back(x)
 *                 v.push_back(deref(k))
 *             self.ptr.setup_dists(v, incl)             # <<<<<<<<<<<<<<
 *         else:
 *             self.ptr.setup_dists()
 */
    __pyx_v_self->ptr->setup_dists(__pyx_v_v, __pyx_v_incl);
    goto __pyx_L3;
  }
  /*else*/ {

    /* "lgcpp.pyx":157
 *             self.ptr.setup_dists(v, incl)
 *         else:
 *             self.ptr.setup_dists()             # <<<<<<<<<<<<<<
 *     def setup_D(self, double x):
 *         self.ptr.setup_D(x)
 */
    __pyx_v_self->ptr->setup_dists();
  }
  __pyx_L3:;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("lgcpp.RateModel.setup_dists", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_row);
  __Pyx_XDECREF(__pyx_v_x);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_5lgcpp_9RateModel_11setup_D(PyObject *__pyx_v_self, PyObject *__pyx_arg_x); /*proto*/
static PyObject *__pyx_pw_5lgcpp_9RateModel_11setup_D(PyObject *__pyx_v_self, PyObject *__pyx_arg_x) {
  double __pyx_v_x;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("setup_D (wrapper)", 0);
  assert(__pyx_arg_x); {
    __pyx_v_x = __pyx_PyFloat_AsDouble(__pyx_arg_x); if (unlikely((__pyx_v_x == (double)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 158; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("lgcpp.RateModel.setup_D", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5lgcpp_9RateModel_10setup_D(((struct __pyx_obj_5lgcpp_RateModel *)__pyx_v_self), ((double)__pyx_v_x));
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "lgcpp.pyx":158
 *         else:
 *             self.ptr.setup_dists()
 *     def setup_D(self, double x):             # <<<<<<<<<<<<<<
 *         self.ptr.setup_D(x)
 *     def setup_E(self, double x):
 */

static PyObject *__pyx_pf_5lgcpp_9RateModel_10setup_D(struct __pyx_obj_5lgcpp_RateModel *__pyx_v_self, double __pyx_v_x) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("setup_D", 0);

  /* "lgcpp.pyx":159
 *             self.ptr.setup_dists()
 *     def setup_D(self, double x):
 *         self.ptr.setup_D(x)             # <<<<<<<<<<<<<<
 *     def setup_E(self, double x):
 *         self.ptr.setup_E(x)
 */
  __pyx_v_self->ptr->setup_D(__pyx_v_x);

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_5lgcpp_9RateModel_13setup_E(PyObject *__pyx_v_self, PyObject *__pyx_arg_x); /*proto*/
static PyObject *__pyx_pw_5lgcpp_9RateModel_13setup_E(PyObject *__pyx_v_self, PyObject *__pyx_arg_x) {
  double __pyx_v_x;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("setup_E (wrapper)", 0);
  assert(__pyx_arg_x); {
    __pyx_v_x = __pyx_PyFloat_AsDouble(__pyx_arg_x); if (unlikely((__pyx_v_x == (double)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 160; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("lgcpp.RateModel.setup_E", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5lgcpp_9RateModel_12setup_E(((struct __pyx_obj_5lgcpp_RateModel *)__pyx_v_self), ((double)__pyx_v_x));
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "lgcpp.pyx":160
 *     def setup_D(self, double x):
 *         self.ptr.setup_D(x)
 *     def setup_E(self, double x):             # <<<<<<<<<<<<<<
 *         self.ptr.setup_E(x)
 *     def setup_Q(self):
 */

static PyObject *__pyx_pf_5lgcpp_9RateModel_12setup_E(struct __pyx_obj_5lgcpp_RateModel *__pyx_v_self, double __pyx_v_x) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("setup_E", 0);

  /* "lgcpp.pyx":161
 *         self.ptr.setup_D(x)
 *     def setup_E(self, double x):
 *         self.ptr.setup_E(x)             # <<<<<<<<<<<<<<
 *     def setup_Q(self):
 *         self.ptr.setup_Q()
 */
  __pyx_v_self->ptr->setup_E(__pyx_v_x);

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_5lgcpp_9RateModel_15setup_Q(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_5lgcpp_9RateModel_15setup_Q(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("setup_Q (wrapper)", 0);
  __pyx_r = __pyx_pf_5lgcpp_9RateModel_14setup_Q(((struct __pyx_obj_5lgcpp_RateModel *)__pyx_v_self));
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "lgcpp.pyx":162
 *     def setup_E(self, double x):
 *         self.ptr.setup_E(x)
 *     def setup_Q(self):             # <<<<<<<<<<<<<<
 *         self.ptr.setup_Q()
 * 
 */

static PyObject *__pyx_pf_5lgcpp_9RateModel_14setup_Q(struct __pyx_obj_5lgcpp_RateModel *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("setup_Q", 0);

  /* "lgcpp.pyx":163
 *         self.ptr.setup_E(x)
 *     def setup_Q(self):
 *         self.ptr.setup_Q()             # <<<<<<<<<<<<<<
 * 
 *     def setup_Dmask(self):
 */
  __pyx_v_self->ptr->setup_Q();

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_5lgcpp_9RateModel_17setup_Dmask(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_5lgcpp_9RateModel_17setup_Dmask(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("setup_Dmask (wrapper)", 0);
  __pyx_r = __pyx_pf_5lgcpp_9RateModel_16setup_Dmask(((struct __pyx_obj_5lgcpp_RateModel *)__pyx_v_self));
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "lgcpp.pyx":165
 *         self.ptr.setup_Q()
 * 
 *     def setup_Dmask(self):             # <<<<<<<<<<<<<<
 *         self.ptr.setup_Dmask()
 *     def set_Dmask_cell(self, int period, int area, int area2,
 */

static PyObject *__pyx_pf_5lgcpp_9RateModel_16setup_Dmask(struct __pyx_obj_5lgcpp_RateModel *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("setup_Dmask", 0);

  /* "lgcpp.pyx":166
 * 
 *     def setup_Dmask(self):
 *         self.ptr.setup_Dmask()             # <<<<<<<<<<<<<<
 *     def set_Dmask_cell(self, int period, int area, int area2,
 *                        double prob, bool sym):
 */
  __pyx_v_self->ptr->setup_Dmask();

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_5lgcpp_9RateModel_19set_Dmask_cell(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_5lgcpp_9RateModel_19set_Dmask_cell(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_v_period;
  int __pyx_v_area;
  int __pyx_v_area2;
  double __pyx_v_prob;
  bool __pyx_v_sym;
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__period,&__pyx_n_s__area,&__pyx_n_s__area2,&__pyx_n_s__prob,&__pyx_n_s__sym,0};
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_Dmask_cell (wrapper)", 0);
  {
    PyObject* values[5] = {0,0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__period);
        if (likely(values[0])) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__area);
        if (likely(values[1])) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("set_Dmask_cell", 1, 5, 5, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 167; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  2:
        values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__area2);
        if (likely(values[2])) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("set_Dmask_cell", 1, 5, 5, 2); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 167; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  3:
        values[3] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__prob);
        if (likely(values[3])) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("set_Dmask_cell", 1, 5, 5, 3); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 167; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  4:
        values[4] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__sym);
        if (likely(values[4])) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("set_Dmask_cell", 1, 5, 5, 4); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 167; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "set_Dmask_cell") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 167; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 5) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
      values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
    }
    __pyx_v_period = __Pyx_PyInt_AsInt(values[0]); if (unlikely((__pyx_v_period == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 167; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    __pyx_v_area = __Pyx_PyInt_AsInt(values[1]); if (unlikely((__pyx_v_area == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 167; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    __pyx_v_area2 = __Pyx_PyInt_AsInt(values[2]); if (unlikely((__pyx_v_area2 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 167; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    __pyx_v_prob = __pyx_PyFloat_AsDouble(values[3]); if (unlikely((__pyx_v_prob == (double)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 168; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    __pyx_v_sym = __Pyx_PyObject_IsTrue(values[4]); if (unlikely((__pyx_v_sym == (bool)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 168; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("set_Dmask_cell", 1, 5, 5, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 167; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("lgcpp.RateModel.set_Dmask_cell", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5lgcpp_9RateModel_18set_Dmask_cell(((struct __pyx_obj_5lgcpp_RateModel *)__pyx_v_self), __pyx_v_period, __pyx_v_area, __pyx_v_area2, __pyx_v_prob, __pyx_v_sym);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "lgcpp.pyx":167
 *     def setup_Dmask(self):
 *         self.ptr.setup_Dmask()
 *     def set_Dmask_cell(self, int period, int area, int area2,             # <<<<<<<<<<<<<<
 *                        double prob, bool sym):
 *         self.ptr.set_Dmask_cell(period, area, area2, prob, sym)
 */

static PyObject *__pyx_pf_5lgcpp_9RateModel_18set_Dmask_cell(struct __pyx_obj_5lgcpp_RateModel *__pyx_v_self, int __pyx_v_period, int __pyx_v_area, int __pyx_v_area2, double __pyx_v_prob, bool __pyx_v_sym) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_Dmask_cell", 0);

  /* "lgcpp.pyx":169
 *     def set_Dmask_cell(self, int period, int area, int area2,
 *                        double prob, bool sym):
 *         self.ptr.set_Dmask_cell(period, area, area2, prob, sym)             # <<<<<<<<<<<<<<
 * 
 * cdef extern from "tree.h":
 */
  __pyx_v_self->ptr->set_Dmask_cell(__pyx_v_period, __pyx_v_area, __pyx_v_area2, __pyx_v_prob, __pyx_v_sym);

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_5lgcpp_4Tree_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_5lgcpp_4Tree_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return -1;}
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__cinit__", 0))) return -1;
  __pyx_r = __pyx_pf_5lgcpp_4Tree___cinit__(((struct __pyx_obj_5lgcpp_Tree *)__pyx_v_self));
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "lgcpp.pyx":184
 * cdef class Tree:
 *     cdef _Tree* ptr
 *     def __cinit__(self):             # <<<<<<<<<<<<<<
 *         self.ptr = new _Tree()
 *     def __dealloc__(self):
 */

static int __pyx_pf_5lgcpp_4Tree___cinit__(struct __pyx_obj_5lgcpp_Tree *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "lgcpp.pyx":185
 *     cdef _Tree* ptr
 *     def __cinit__(self):
 *         self.ptr = new _Tree()             # <<<<<<<<<<<<<<
 *     def __dealloc__(self):
 *         del self.ptr
 */
  __pyx_v_self->ptr = new Tree();

  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static void __pyx_pw_5lgcpp_4Tree_3__dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pw_5lgcpp_4Tree_3__dealloc__(PyObject *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_pf_5lgcpp_4Tree_2__dealloc__(((struct __pyx_obj_5lgcpp_Tree *)__pyx_v_self));
  __Pyx_RefNannyFinishContext();
}

/* "lgcpp.pyx":186
 *     def __cinit__(self):
 *         self.ptr = new _Tree()
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         del self.ptr
 *     def getNodeCount(self):
 */

static void __pyx_pf_5lgcpp_4Tree_2__dealloc__(CYTHON_UNUSED struct __pyx_obj_5lgcpp_Tree *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__", 0);

  /* "lgcpp.pyx":187
 *         self.ptr = new _Tree()
 *     def __dealloc__(self):
 *         del self.ptr             # <<<<<<<<<<<<<<
 *     def getNodeCount(self):
 *         return self.ptr.getNodeCount()
 */
  delete __pyx_v_self->ptr;

  __Pyx_RefNannyFinishContext();
}

/* Python wrapper */
static PyObject *__pyx_pw_5lgcpp_4Tree_5getNodeCount(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_5lgcpp_4Tree_5getNodeCount(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getNodeCount (wrapper)", 0);
  __pyx_r = __pyx_pf_5lgcpp_4Tree_4getNodeCount(((struct __pyx_obj_5lgcpp_Tree *)__pyx_v_self));
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "lgcpp.pyx":188
 *     def __dealloc__(self):
 *         del self.ptr
 *     def getNodeCount(self):             # <<<<<<<<<<<<<<
 *         return self.ptr.getNodeCount()
 *     def getExternalNodeCount(self):
 */

static PyObject *__pyx_pf_5lgcpp_4Tree_4getNodeCount(struct __pyx_obj_5lgcpp_Tree *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getNodeCount", 0);

  /* "lgcpp.pyx":189
 *         del self.ptr
 *     def getNodeCount(self):
 *         return self.ptr.getNodeCount()             # <<<<<<<<<<<<<<
 *     def getExternalNodeCount(self):
 *         return self.ptr.getExternalNodeCount()
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyInt_FromLong(__pyx_v_self->ptr->getNodeCount()); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 189; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("lgcpp.Tree.getNodeCount", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_5lgcpp_4Tree_7getExternalNodeCount(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_5lgcpp_4Tree_7getExternalNodeCount(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getExternalNodeCount (wrapper)", 0);
  __pyx_r = __pyx_pf_5lgcpp_4Tree_6getExternalNodeCount(((struct __pyx_obj_5lgcpp_Tree *)__pyx_v_self));
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "lgcpp.pyx":190
 *     def getNodeCount(self):
 *         return self.ptr.getNodeCount()
 *     def getExternalNodeCount(self):             # <<<<<<<<<<<<<<
 *         return self.ptr.getExternalNodeCount()
 *     def getInternalNodeCount(self):
 */

static PyObject *__pyx_pf_5lgcpp_4Tree_6getExternalNodeCount(struct __pyx_obj_5lgcpp_Tree *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getExternalNodeCount", 0);

  /* "lgcpp.pyx":191
 *         return self.ptr.getNodeCount()
 *     def getExternalNodeCount(self):
 *         return self.ptr.getExternalNodeCount()             # <<<<<<<<<<<<<<
 *     def getInternalNodeCount(self):
 *         return self.ptr.getInternalNodeCount()
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyInt_FromLong(__pyx_v_self->ptr->getExternalNodeCount()); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 191; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("lgcpp.Tree.getExternalNodeCount", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_5lgcpp_4Tree_9getInternalNodeCount(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_5lgcpp_4Tree_9getInternalNodeCount(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getInternalNodeCount (wrapper)", 0);
  __pyx_r = __pyx_pf_5lgcpp_4Tree_8getInternalNodeCount(((struct __pyx_obj_5lgcpp_Tree *)__pyx_v_self));
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "lgcpp.pyx":192
 *     def getExternalNodeCount(self):
 *         return self.ptr.getExternalNodeCount()
 *     def getInternalNodeCount(self):             # <<<<<<<<<<<<<<
 *         return self.ptr.getInternalNodeCount()
 *     def getExternalNode(self, int i):
 */

static PyObject *__pyx_pf_5lgcpp_4Tree_8getInternalNodeCount(struct __pyx_obj_5lgcpp_Tree *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getInternalNodeCount", 0);

  /* "lgcpp.pyx":193
 *         return self.ptr.getExternalNodeCount()
 *     def getInternalNodeCount(self):
 *         return self.ptr.getInternalNodeCount()             # <<<<<<<<<<<<<<
 *     def getExternalNode(self, int i):
 *         cdef _Node* p = self.ptr.getExternalNode(i)
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyInt_FromLong(__pyx_v_self->ptr->getInternalNodeCount()); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 193; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("lgcpp.Tree.getInternalNodeCount", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_5lgcpp_4Tree_11getExternalNode(PyObject *__pyx_v_self, PyObject *__pyx_arg_i); /*proto*/
static PyObject *__pyx_pw_5lgcpp_4Tree_11getExternalNode(PyObject *__pyx_v_self, PyObject *__pyx_arg_i) {
  int __pyx_v_i;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getExternalNode (wrapper)", 0);
  assert(__pyx_arg_i); {
    __pyx_v_i = __Pyx_PyInt_AsInt(__pyx_arg_i); if (unlikely((__pyx_v_i == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 194; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("lgcpp.Tree.getExternalNode", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5lgcpp_4Tree_10getExternalNode(((struct __pyx_obj_5lgcpp_Tree *)__pyx_v_self), ((int)__pyx_v_i));
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "lgcpp.pyx":194
 *     def getInternalNodeCount(self):
 *         return self.ptr.getInternalNodeCount()
 *     def getExternalNode(self, int i):             # <<<<<<<<<<<<<<
 *         cdef _Node* p = self.ptr.getExternalNode(i)
 *         return node_factory(p)
 */

static PyObject *__pyx_pf_5lgcpp_4Tree_10getExternalNode(struct __pyx_obj_5lgcpp_Tree *__pyx_v_self, int __pyx_v_i) {
  Node *__pyx_v_p;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getExternalNode", 0);

  /* "lgcpp.pyx":195
 *         return self.ptr.getInternalNodeCount()
 *     def getExternalNode(self, int i):
 *         cdef _Node* p = self.ptr.getExternalNode(i)             # <<<<<<<<<<<<<<
 *         return node_factory(p)
 *     def getInternalNode(self, int i):
 */
  __pyx_v_p = __pyx_v_self->ptr->getExternalNode(__pyx_v_i);

  /* "lgcpp.pyx":196
 *     def getExternalNode(self, int i):
 *         cdef _Node* p = self.ptr.getExternalNode(i)
 *         return node_factory(p)             # <<<<<<<<<<<<<<
 *     def getInternalNode(self, int i):
 *         cdef _Node* p = self.ptr.getInternalNode(i)
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = ((PyObject *)__pyx_f_5lgcpp_node_factory(__pyx_v_p)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 196; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("lgcpp.Tree.getExternalNode", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_5lgcpp_4Tree_13getInternalNode(PyObject *__pyx_v_self, PyObject *__pyx_arg_i); /*proto*/
static PyObject *__pyx_pw_5lgcpp_4Tree_13getInternalNode(PyObject *__pyx_v_self, PyObject *__pyx_arg_i) {
  int __pyx_v_i;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getInternalNode (wrapper)", 0);
  assert(__pyx_arg_i); {
    __pyx_v_i = __Pyx_PyInt_AsInt(__pyx_arg_i); if (unlikely((__pyx_v_i == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 197; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("lgcpp.Tree.getInternalNode", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5lgcpp_4Tree_12getInternalNode(((struct __pyx_obj_5lgcpp_Tree *)__pyx_v_self), ((int)__pyx_v_i));
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "lgcpp.pyx":197
 *         cdef _Node* p = self.ptr.getExternalNode(i)
 *         return node_factory(p)
 *     def getInternalNode(self, int i):             # <<<<<<<<<<<<<<
 *         cdef _Node* p = self.ptr.getInternalNode(i)
 *         return node_factory(p)
 */

static PyObject *__pyx_pf_5lgcpp_4Tree_12getInternalNode(struct __pyx_obj_5lgcpp_Tree *__pyx_v_self, int __pyx_v_i) {
  Node *__pyx_v_p;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getInternalNode", 0);

  /* "lgcpp.pyx":198
 *         return node_factory(p)
 *     def getInternalNode(self, int i):
 *         cdef _Node* p = self.ptr.getInternalNode(i)             # <<<<<<<<<<<<<<
 *         return node_factory(p)
 *     def getMRCA(self, names):
 */
  __pyx_v_p = __pyx_v_self->ptr->getInternalNode(__pyx_v_i);

  /* "lgcpp.pyx":199
 *     def getInternalNode(self, int i):
 *         cdef _Node* p = self.ptr.getInternalNode(i)
 *         return node_factory(p)             # <<<<<<<<<<<<<<
 *     def getMRCA(self, names):
 *         cdef vector[string] v = vector[string]()
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = ((PyObject *)__pyx_f_5lgcpp_node_factory(__pyx_v_p)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 199; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("lgcpp.Tree.getInternalNode", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_5lgcpp_4Tree_15getMRCA(PyObject *__pyx_v_self, PyObject *__pyx_v_names); /*proto*/
static PyObject *__pyx_pw_5lgcpp_4Tree_15getMRCA(PyObject *__pyx_v_self, PyObject *__pyx_v_names) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getMRCA (wrapper)", 0);
  __pyx_r = __pyx_pf_5lgcpp_4Tree_14getMRCA(((struct __pyx_obj_5lgcpp_Tree *)__pyx_v_self), ((PyObject *)__pyx_v_names));
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "lgcpp.pyx":200
 *         cdef _Node* p = self.ptr.getInternalNode(i)
 *         return node_factory(p)
 *     def getMRCA(self, names):             # <<<<<<<<<<<<<<
 *         cdef vector[string] v = vector[string]()
 *         for s in names: v.push_back(string(<char *>s))
 */

static PyObject *__pyx_pf_5lgcpp_4Tree_14getMRCA(struct __pyx_obj_5lgcpp_Tree *__pyx_v_self, PyObject *__pyx_v_names) {
  std::vector<std::string> __pyx_v_v;
  PyObject *__pyx_v_s = NULL;
  Node *__pyx_v_p;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  PyObject *(*__pyx_t_3)(PyObject *);
  PyObject *__pyx_t_4 = NULL;
  char *__pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getMRCA", 0);

  /* "lgcpp.pyx":201
 *         return node_factory(p)
 *     def getMRCA(self, names):
 *         cdef vector[string] v = vector[string]()             # <<<<<<<<<<<<<<
 *         for s in names: v.push_back(string(<char *>s))
 *         cdef _Node* p = self.ptr.getMRCA(v)
 */
  __pyx_v_v = std::vector<std::string>();

  /* "lgcpp.pyx":202
 *     def getMRCA(self, names):
 *         cdef vector[string] v = vector[string]()
 *         for s in names: v.push_back(string(<char *>s))             # <<<<<<<<<<<<<<
 *         cdef _Node* p = self.ptr.getMRCA(v)
 *         return node_factory(p)
 */
  if (PyList_CheckExact(__pyx_v_names) || PyTuple_CheckExact(__pyx_v_names)) {
    __pyx_t_1 = __pyx_v_names; __Pyx_INCREF(__pyx_t_1); __pyx_t_2 = 0;
    __pyx_t_3 = NULL;
  } else {
    __pyx_t_2 = -1; __pyx_t_1 = PyObject_GetIter(__pyx_v_names); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 202; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = Py_TYPE(__pyx_t_1)->tp_iternext;
  }
  for (;;) {
    if (!__pyx_t_3 && PyList_CheckExact(__pyx_t_1)) {
      if (__pyx_t_2 >= PyList_GET_SIZE(__pyx_t_1)) break;
      __pyx_t_4 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++;
    } else if (!__pyx_t_3 && PyTuple_CheckExact(__pyx_t_1)) {
      if (__pyx_t_2 >= PyTuple_GET_SIZE(__pyx_t_1)) break;
      __pyx_t_4 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++;
    } else {
      __pyx_t_4 = __pyx_t_3(__pyx_t_1);
      if (unlikely(!__pyx_t_4)) {
        if (PyErr_Occurred()) {
          if (likely(PyErr_ExceptionMatches(PyExc_StopIteration))) PyErr_Clear();
          else {__pyx_filename = __pyx_f[0]; __pyx_lineno = 202; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_4);
    }
    __Pyx_XDECREF(__pyx_v_s);
    __pyx_v_s = __pyx_t_4;
    __pyx_t_4 = 0;
    __pyx_t_5 = PyBytes_AsString(__pyx_v_s); if (unlikely((!__pyx_t_5) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 202; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_v_v.push_back(std::string(((char *)__pyx_t_5)));
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "lgcpp.pyx":203
 *         cdef vector[string] v = vector[string]()
 *         for s in names: v.push_back(string(<char *>s))
 *         cdef _Node* p = self.ptr.getMRCA(v)             # <<<<<<<<<<<<<<
 *         return node_factory(p)
 *     def internalNodes(self):
 */
  __pyx_v_p = __pyx_v_self->ptr->getMRCA(__pyx_v_v);

  /* "lgcpp.pyx":204
 *         for s in names: v.push_back(string(<char *>s))
 *         cdef _Node* p = self.ptr.getMRCA(v)
 *         return node_factory(p)             # <<<<<<<<<<<<<<
 *     def internalNodes(self):
 *         cdef int n = self.ptr.getInternalNodeCount()
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = ((PyObject *)__pyx_f_5lgcpp_node_factory(__pyx_v_p)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 204; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("lgcpp.Tree.getMRCA", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_s);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_5lgcpp_4Tree_17internalNodes(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_5lgcpp_4Tree_17internalNodes(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("internalNodes (wrapper)", 0);
  __pyx_r = __pyx_pf_5lgcpp_4Tree_16internalNodes(((struct __pyx_obj_5lgcpp_Tree *)__pyx_v_self));
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "lgcpp.pyx":205
 *         cdef _Node* p = self.ptr.getMRCA(v)
 *         return node_factory(p)
 *     def internalNodes(self):             # <<<<<<<<<<<<<<
 *         cdef int n = self.ptr.getInternalNodeCount()
 *         return [ node_factory(self.ptr.getInternalNode(i)) for i in range(n) ]
 */

static PyObject *__pyx_pf_5lgcpp_4Tree_16internalNodes(struct __pyx_obj_5lgcpp_Tree *__pyx_v_self) {
  int __pyx_v_n;
  PyObject *__pyx_v_i = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  Py_ssize_t __pyx_t_4;
  PyObject *(*__pyx_t_5)(PyObject *);
  int __pyx_t_6;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("internalNodes", 0);

  /* "lgcpp.pyx":206
 *         return node_factory(p)
 *     def internalNodes(self):
 *         cdef int n = self.ptr.getInternalNodeCount()             # <<<<<<<<<<<<<<
 *         return [ node_factory(self.ptr.getInternalNode(i)) for i in range(n) ]
 *     def newick(self):
 */
  __pyx_v_n = __pyx_v_self->ptr->getInternalNodeCount();

  /* "lgcpp.pyx":207
 *     def internalNodes(self):
 *         cdef int n = self.ptr.getInternalNodeCount()
 *         return [ node_factory(self.ptr.getInternalNode(i)) for i in range(n) ]             # <<<<<<<<<<<<<<
 *     def newick(self):
 *         cdef string s = string(<char *>"number")
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 207; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyInt_FromLong(__pyx_v_n); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 207; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 207; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_2);
  __pyx_t_2 = 0;
  __pyx_t_2 = PyObject_Call(__pyx_builtin_range, ((PyObject *)__pyx_t_3), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 207; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(((PyObject *)__pyx_t_3)); __pyx_t_3 = 0;
  if (PyList_CheckExact(__pyx_t_2) || PyTuple_CheckExact(__pyx_t_2)) {
    __pyx_t_3 = __pyx_t_2; __Pyx_INCREF(__pyx_t_3); __pyx_t_4 = 0;
    __pyx_t_5 = NULL;
  } else {
    __pyx_t_4 = -1; __pyx_t_3 = PyObject_GetIter(__pyx_t_2); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 207; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_5 = Py_TYPE(__pyx_t_3)->tp_iternext;
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  for (;;) {
    if (!__pyx_t_5 && PyList_CheckExact(__pyx_t_3)) {
      if (__pyx_t_4 >= PyList_GET_SIZE(__pyx_t_3)) break;
      __pyx_t_2 = PyList_GET_ITEM(__pyx_t_3, __pyx_t_4); __Pyx_INCREF(__pyx_t_2); __pyx_t_4++;
    } else if (!__pyx_t_5 && PyTuple_CheckExact(__pyx_t_3)) {
      if (__pyx_t_4 >= PyTuple_GET_SIZE(__pyx_t_3)) break;
      __pyx_t_2 = PyTuple_GET_ITEM(__pyx_t_3, __pyx_t_4); __Pyx_INCREF(__pyx_t_2); __pyx_t_4++;
    } else {
      __pyx_t_2 = __pyx_t_5(__pyx_t_3);
      if (unlikely(!__pyx_t_2)) {
        if (PyErr_Occurred()) {
          if (likely(PyErr_ExceptionMatches(PyExc_StopIteration))) PyErr_Clear();
          else {__pyx_filename = __pyx_f[0]; __pyx_lineno = 207; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_2);
    }
    __Pyx_XDECREF(__pyx_v_i);
    __pyx_v_i = __pyx_t_2;
    __pyx_t_2 = 0;
    __pyx_t_6 = __Pyx_PyInt_AsInt(__pyx_v_i); if (unlikely((__pyx_t_6 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 207; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_t_2 = ((PyObject *)__pyx_f_5lgcpp_node_factory(__pyx_v_self->ptr->getInternalNode(__pyx_t_6))); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 207; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    if (unlikely(PyList_Append(__pyx_t_1, (PyObject*)__pyx_t_2))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 207; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_INCREF(((PyObject *)__pyx_t_1));
  __pyx_r = ((PyObject *)__pyx_t_1);
  __Pyx_DECREF(((PyObject *)__pyx_t_1)); __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("lgcpp.Tree.internalNodes", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_i);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_5lgcpp_4Tree_19newick(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_5lgcpp_4Tree_19newick(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("newick (wrapper)", 0);
  __pyx_r = __pyx_pf_5lgcpp_4Tree_18newick(((struct __pyx_obj_5lgcpp_Tree *)__pyx_v_self));
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "lgcpp.pyx":208
 *         cdef int n = self.ptr.getInternalNodeCount()
 *         return [ node_factory(self.ptr.getInternalNode(i)) for i in range(n) ]
 *     def newick(self):             # <<<<<<<<<<<<<<
 *         cdef string s = string(<char *>"number")
 *         return "".join([self.ptr.getRoot().getNewick(True, s).c_str(),';'])
 */

static PyObject *__pyx_pf_5lgcpp_4Tree_18newick(struct __pyx_obj_5lgcpp_Tree *__pyx_v_self) {
  std::string __pyx_v_s;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("newick", 0);

  /* "lgcpp.pyx":209
 *         return [ node_factory(self.ptr.getInternalNode(i)) for i in range(n) ]
 *     def newick(self):
 *         cdef string s = string(<char *>"number")             # <<<<<<<<<<<<<<
 *         return "".join([self.ptr.getRoot().getNewick(True, s).c_str(),';'])
 * 
 */
  __pyx_v_s = std::string(((char *)__pyx_k__number));

  /* "lgcpp.pyx":210
 *     def newick(self):
 *         cdef string s = string(<char *>"number")
 *         return "".join([self.ptr.getRoot().getNewick(True, s).c_str(),';'])             # <<<<<<<<<<<<<<
 * 
 * cdef extern from "tree_reader.h":
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyObject_GetAttr(((PyObject *)__pyx_kp_s_2), __pyx_n_s__join); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 210; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyBytes_FromString(__pyx_v_self->ptr->getRoot()->getNewick(1, __pyx_v_s).c_str()); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 210; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_2));
  __pyx_t_3 = PyList_New(2); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 210; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  PyList_SET_ITEM(__pyx_t_3, 0, ((PyObject *)__pyx_t_2));
  __Pyx_GIVEREF(((PyObject *)__pyx_t_2));
  __Pyx_INCREF(((PyObject *)__pyx_kp_s_3));
  PyList_SET_ITEM(__pyx_t_3, 1, ((PyObject *)__pyx_kp_s_3));
  __Pyx_GIVEREF(((PyObject *)__pyx_kp_s_3));
  __pyx_t_2 = 0;
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 210; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_2, 0, ((PyObject *)__pyx_t_3));
  __Pyx_GIVEREF(((PyObject *)__pyx_t_3));
  __pyx_t_3 = 0;
  __pyx_t_3 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_t_2), NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 210; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(((PyObject *)__pyx_t_2)); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("lgcpp.Tree.newick", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_5lgcpp_1readtree(PyObject *__pyx_self, PyObject *__pyx_v_s); /*proto*/
static PyMethodDef __pyx_mdef_5lgcpp_1readtree = {__Pyx_NAMESTR("readtree"), (PyCFunction)__pyx_pw_5lgcpp_1readtree, METH_O, __Pyx_DOCSTR(0)};
static PyObject *__pyx_pw_5lgcpp_1readtree(PyObject *__pyx_self, PyObject *__pyx_v_s) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("readtree (wrapper)", 0);
  __pyx_self = __pyx_self;
  __pyx_r = __pyx_pf_5lgcpp_readtree(__pyx_self, ((PyObject *)__pyx_v_s));
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "lgcpp.pyx":217
 *         _Tree* readTree(string)
 * 
 * def readtree(s):             # <<<<<<<<<<<<<<
 *     cdef _TreeReader* reader = new _TreeReader()
 *     cdef string treestr = string(<char *>s)
 */

static PyObject *__pyx_pf_5lgcpp_readtree(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_s) {
  TreeReader *__pyx_v_reader;
  std::string __pyx_v_treestr;
  Tree *__pyx_v_tree;
  struct __pyx_obj_5lgcpp_Tree *__pyx_v_t = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  char *__pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("readtree", 0);

  /* "lgcpp.pyx":218
 * 
 * def readtree(s):
 *     cdef _TreeReader* reader = new _TreeReader()             # <<<<<<<<<<<<<<
 *     cdef string treestr = string(<char *>s)
 *     cdef _Tree* tree = reader.readTree(<string>treestr)
 */
  __pyx_v_reader = new TreeReader();

  /* "lgcpp.pyx":219
 * def readtree(s):
 *     cdef _TreeReader* reader = new _TreeReader()
 *     cdef string treestr = string(<char *>s)             # <<<<<<<<<<<<<<
 *     cdef _Tree* tree = reader.readTree(<string>treestr)
 *     cdef Tree t = Tree()
 */
  __pyx_t_1 = PyBytes_AsString(__pyx_v_s); if (unlikely((!__pyx_t_1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 219; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_treestr = std::string(((char *)__pyx_t_1));

  /* "lgcpp.pyx":220
 *     cdef _TreeReader* reader = new _TreeReader()
 *     cdef string treestr = string(<char *>s)
 *     cdef _Tree* tree = reader.readTree(<string>treestr)             # <<<<<<<<<<<<<<
 *     cdef Tree t = Tree()
 *     t.ptr = tree
 */
  __pyx_v_tree = __pyx_v_reader->readTree(((std::string)__pyx_v_treestr));

  /* "lgcpp.pyx":221
 *     cdef string treestr = string(<char *>s)
 *     cdef _Tree* tree = reader.readTree(<string>treestr)
 *     cdef Tree t = Tree()             # <<<<<<<<<<<<<<
 *     t.ptr = tree
 *     del reader
 */
  __pyx_t_2 = PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_5lgcpp_Tree)), ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 221; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_v_t = ((struct __pyx_obj_5lgcpp_Tree *)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "lgcpp.pyx":222
 *     cdef _Tree* tree = reader.readTree(<string>treestr)
 *     cdef Tree t = Tree()
 *     t.ptr = tree             # <<<<<<<<<<<<<<
 *     del reader
 *     return t
 */
  __pyx_v_t->ptr = __pyx_v_tree;

  /* "lgcpp.pyx":223
 *     cdef Tree t = Tree()
 *     t.ptr = tree
 *     del reader             # <<<<<<<<<<<<<<
 *     return t
 * 
 */
  delete __pyx_v_reader;

  /* "lgcpp.pyx":224
 *     t.ptr = tree
 *     del reader
 *     return t             # <<<<<<<<<<<<<<
 * 
 * cdef extern from "AncSplit.h":
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_t));
  __pyx_r = ((PyObject *)__pyx_v_t);
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("lgcpp.readtree", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_t);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_5lgcpp_10BioGeoTree_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_5lgcpp_10BioGeoTree_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_5lgcpp_Tree *__pyx_v_t = 0;
  PyObject *__pyx_v_periods = 0;
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__t,&__pyx_n_s__periods,0};
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  {
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__t);
        if (likely(values[0])) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__periods);
        if (likely(values[1])) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 2, 2, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 265; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__cinit__") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 265; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_t = ((struct __pyx_obj_5lgcpp_Tree *)values[0]);
    __pyx_v_periods = ((PyObject*)values[1]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 265; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("lgcpp.BioGeoTree.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_t), __pyx_ptype_5lgcpp_Tree, 1, "t", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 265; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_periods), (&PyList_Type), 1, "periods", 1))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 265; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_pf_5lgcpp_10BioGeoTree___cinit__(((struct __pyx_obj_5lgcpp_BioGeoTree *)__pyx_v_self), __pyx_v_t, __pyx_v_periods);
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "lgcpp.pyx":265
 * cdef class BioGeoTree:
 *     cdef _BioGeoTree* ptr
 *     def __cinit__(self, Tree t, list periods):             # <<<<<<<<<<<<<<
 *         cdef vector[double] v = vector[double]()
 *         for x in periods: v.push_back(x)
 */

static int __pyx_pf_5lgcpp_10BioGeoTree___cinit__(struct __pyx_obj_5lgcpp_BioGeoTree *__pyx_v_self, struct __pyx_obj_5lgcpp_Tree *__pyx_v_t, PyObject *__pyx_v_periods) {
  std::vector<double> __pyx_v_v;
  PyObject *__pyx_v_x = NULL;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  double __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "lgcpp.pyx":266
 *     cdef _BioGeoTree* ptr
 *     def __cinit__(self, Tree t, list periods):
 *         cdef vector[double] v = vector[double]()             # <<<<<<<<<<<<<<
 *         for x in periods: v.push_back(x)
 *         self.ptr = new _BioGeoTree(t.ptr, v)
 */
  __pyx_v_v = std::vector<double>();

  /* "lgcpp.pyx":267
 *     def __cinit__(self, Tree t, list periods):
 *         cdef vector[double] v = vector[double]()
 *         for x in periods: v.push_back(x)             # <<<<<<<<<<<<<<
 *         self.ptr = new _BioGeoTree(t.ptr, v)
 *     def __dealloc__(self):
 */
  if (unlikely(((PyObject *)__pyx_v_periods) == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable"); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 267; __pyx_clineno = __LINE__; goto __pyx_L1_error;} 
  }
  __pyx_t_1 = ((PyObject *)__pyx_v_periods); __Pyx_INCREF(__pyx_t_1); __pyx_t_2 = 0;
  for (;;) {
    if (__pyx_t_2 >= PyList_GET_SIZE(__pyx_t_1)) break;
    __pyx_t_3 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_3); __pyx_t_2++;
    __Pyx_XDECREF(__pyx_v_x);
    __pyx_v_x = __pyx_t_3;
    __pyx_t_3 = 0;
    __pyx_t_4 = __pyx_PyFloat_AsDouble(__pyx_v_x); if (unlikely((__pyx_t_4 == (double)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 267; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_v_v.push_back(__pyx_t_4);
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "lgcpp.pyx":268
 *         cdef vector[double] v = vector[double]()
 *         for x in periods: v.push_back(x)
 *         self.ptr = new _BioGeoTree(t.ptr, v)             # <<<<<<<<<<<<<<
 *     def __dealloc__(self):
 *         del self.ptr
 */
  __pyx_v_self->ptr = new BioGeoTree(__pyx_v_t->ptr, __pyx_v_v);

  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("lgcpp.BioGeoTree.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_x);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static void __pyx_pw_5lgcpp_10BioGeoTree_3__dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pw_5lgcpp_10BioGeoTree_3__dealloc__(PyObject *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_pf_5lgcpp_10BioGeoTree_2__dealloc__(((struct __pyx_obj_5lgcpp_BioGeoTree *)__pyx_v_self));
  __Pyx_RefNannyFinishContext();
}

/* "lgcpp.pyx":269
 *         for x in periods: v.push_back(x)
 *         self.ptr = new _BioGeoTree(t.ptr, v)
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         del self.ptr
 *     def set_store_p_matrices(self, bool b):
 */

static void __pyx_pf_5lgcpp_10BioGeoTree_2__dealloc__(CYTHON_UNUSED struct __pyx_obj_5lgcpp_BioGeoTree *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__", 0);

  /* "lgcpp.pyx":270
 *         self.ptr = new _BioGeoTree(t.ptr, v)
 *     def __dealloc__(self):
 *         del self.ptr             # <<<<<<<<<<<<<<
 *     def set_store_p_matrices(self, bool b):
 *         self.ptr.set_store_p_matrices(b)
 */
  delete __pyx_v_self->ptr;

  __Pyx_RefNannyFinishContext();
}

/* Python wrapper */
static PyObject *__pyx_pw_5lgcpp_10BioGeoTree_5set_store_p_matrices(PyObject *__pyx_v_self, PyObject *__pyx_arg_b); /*proto*/
static PyObject *__pyx_pw_5lgcpp_10BioGeoTree_5set_store_p_matrices(PyObject *__pyx_v_self, PyObject *__pyx_arg_b) {
  bool __pyx_v_b;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_store_p_matrices (wrapper)", 0);
  assert(__pyx_arg_b); {
    __pyx_v_b = __Pyx_PyObject_IsTrue(__pyx_arg_b); if (unlikely((__pyx_v_b == (bool)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 271; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("lgcpp.BioGeoTree.set_store_p_matrices", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5lgcpp_10BioGeoTree_4set_store_p_matrices(((struct __pyx_obj_5lgcpp_BioGeoTree *)__pyx_v_self), ((bool)__pyx_v_b));
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "lgcpp.pyx":271
 *     def __dealloc__(self):
 *         del self.ptr
 *     def set_store_p_matrices(self, bool b):             # <<<<<<<<<<<<<<
 *         self.ptr.set_store_p_matrices(b)
 *     def set_use_stored_matrices(self, bool b):
 */

static PyObject *__pyx_pf_5lgcpp_10BioGeoTree_4set_store_p_matrices(struct __pyx_obj_5lgcpp_BioGeoTree *__pyx_v_self, bool __pyx_v_b) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_store_p_matrices", 0);

  /* "lgcpp.pyx":272
 *         del self.ptr
 *     def set_store_p_matrices(self, bool b):
 *         self.ptr.set_store_p_matrices(b)             # <<<<<<<<<<<<<<
 *     def set_use_stored_matrices(self, bool b):
 *         self.ptr.set_use_stored_matrices(b)
 */
  __pyx_v_self->ptr->set_store_p_matrices(__pyx_v_b);

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_5lgcpp_10BioGeoTree_7set_use_stored_matrices(PyObject *__pyx_v_self, PyObject *__pyx_arg_b); /*proto*/
static PyObject *__pyx_pw_5lgcpp_10BioGeoTree_7set_use_stored_matrices(PyObject *__pyx_v_self, PyObject *__pyx_arg_b) {
  bool __pyx_v_b;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_use_stored_matrices (wrapper)", 0);
  assert(__pyx_arg_b); {
    __pyx_v_b = __Pyx_PyObject_IsTrue(__pyx_arg_b); if (unlikely((__pyx_v_b == (bool)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 273; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("lgcpp.BioGeoTree.set_use_stored_matrices", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5lgcpp_10BioGeoTree_6set_use_stored_matrices(((struct __pyx_obj_5lgcpp_BioGeoTree *)__pyx_v_self), ((bool)__pyx_v_b));
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "lgcpp.pyx":273
 *     def set_store_p_matrices(self, bool b):
 *         self.ptr.set_store_p_matrices(b)
 *     def set_use_stored_matrices(self, bool b):             # <<<<<<<<<<<<<<
 *         self.ptr.set_use_stored_matrices(b)
 *     def update_default_model(self, RateModel m):
 */

static PyObject *__pyx_pf_5lgcpp_10BioGeoTree_6set_use_stored_matrices(struct __pyx_obj_5lgcpp_BioGeoTree *__pyx_v_self, bool __pyx_v_b) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_use_stored_matrices", 0);

  /* "lgcpp.pyx":274
 *         self.ptr.set_store_p_matrices(b)
 *     def set_use_stored_matrices(self, bool b):
 *         self.ptr.set_use_stored_matrices(b)             # <<<<<<<<<<<<<<
 *     def update_default_model(self, RateModel m):
 *         self.ptr.update_default_model(m.ptr)
 */
  __pyx_v_self->ptr->set_use_stored_matrices(__pyx_v_b);

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_5lgcpp_10BioGeoTree_9update_default_model(PyObject *__pyx_v_self, PyObject *__pyx_v_m); /*proto*/
static PyObject *__pyx_pw_5lgcpp_10BioGeoTree_9update_default_model(PyObject *__pyx_v_self, PyObject *__pyx_v_m) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("update_default_model (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_m), __pyx_ptype_5lgcpp_RateModel, 1, "m", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 275; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_pf_5lgcpp_10BioGeoTree_8update_default_model(((struct __pyx_obj_5lgcpp_BioGeoTree *)__pyx_v_self), ((struct __pyx_obj_5lgcpp_RateModel *)__pyx_v_m));
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "lgcpp.pyx":275
 *     def set_use_stored_matrices(self, bool b):
 *         self.ptr.set_use_stored_matrices(b)
 *     def update_default_model(self, RateModel m):             # <<<<<<<<<<<<<<
 *         self.ptr.update_default_model(m.ptr)
 *     def set_default_model(self, RateModel m):
 */

static PyObject *__pyx_pf_5lgcpp_10BioGeoTree_8update_default_model(struct __pyx_obj_5lgcpp_BioGeoTree *__pyx_v_self, struct __pyx_obj_5lgcpp_RateModel *__pyx_v_m) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("update_default_model", 0);

  /* "lgcpp.pyx":276
 *         self.ptr.set_use_stored_matrices(b)
 *     def update_default_model(self, RateModel m):
 *         self.ptr.update_default_model(m.ptr)             # <<<<<<<<<<<<<<
 *     def set_default_model(self, RateModel m):
 *         self.ptr.set_default_model(m.ptr)
 */
  __pyx_v_self->ptr->update_default_model(__pyx_v_m->ptr);

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_5lgcpp_10BioGeoTree_11set_default_model(PyObject *__pyx_v_self, PyObject *__pyx_v_m); /*proto*/
static PyObject *__pyx_pw_5lgcpp_10BioGeoTree_11set_default_model(PyObject *__pyx_v_self, PyObject *__pyx_v_m) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_default_model (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_m), __pyx_ptype_5lgcpp_RateModel, 1, "m", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 277; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_pf_5lgcpp_10BioGeoTree_10set_default_model(((struct __pyx_obj_5lgcpp_BioGeoTree *)__pyx_v_self), ((struct __pyx_obj_5lgcpp_RateModel *)__pyx_v_m));
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "lgcpp.pyx":277
 *     def update_default_model(self, RateModel m):
 *         self.ptr.update_default_model(m.ptr)
 *     def set_default_model(self, RateModel m):             # <<<<<<<<<<<<<<
 *         self.ptr.set_default_model(m.ptr)
 *     def set_excluded_dist(self, dist, Node n):
 */

static PyObject *__pyx_pf_5lgcpp_10BioGeoTree_10set_default_model(struct __pyx_obj_5lgcpp_BioGeoTree *__pyx_v_self, struct __pyx_obj_5lgcpp_RateModel *__pyx_v_m) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_default_model", 0);

  /* "lgcpp.pyx":278
 *         self.ptr.update_default_model(m.ptr)
 *     def set_default_model(self, RateModel m):
 *         self.ptr.set_default_model(m.ptr)             # <<<<<<<<<<<<<<
 *     def set_excluded_dist(self, dist, Node n):
 *         cdef vector[int] v = vector[int]()
 */
  __pyx_v_self->ptr->set_default_model(__pyx_v_m->ptr);

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_5lgcpp_10BioGeoTree_13set_excluded_dist(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_5lgcpp_10BioGeoTree_13set_excluded_dist(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_dist = 0;
  struct __pyx_obj_5lgcpp_Node *__pyx_v_n = 0;
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__dist,&__pyx_n_s__n,0};
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_excluded_dist (wrapper)", 0);
  {
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__dist);
        if (likely(values[0])) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__n);
        if (likely(values[1])) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("set_excluded_dist", 1, 2, 2, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 279; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "set_excluded_dist") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 279; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_dist = values[0];
    __pyx_v_n = ((struct __pyx_obj_5lgcpp_Node *)values[1]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("set_excluded_dist", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 279; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("lgcpp.BioGeoTree.set_excluded_dist", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_n), __pyx_ptype_5lgcpp_Node, 1, "n", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 279; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_pf_5lgcpp_10BioGeoTree_12set_excluded_dist(((struct __pyx_obj_5lgcpp_BioGeoTree *)__pyx_v_self), __pyx_v_dist, __pyx_v_n);
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "lgcpp.pyx":279
 *     def set_default_model(self, RateModel m):
 *         self.ptr.set_default_model(m.ptr)
 *     def set_excluded_dist(self, dist, Node n):             # <<<<<<<<<<<<<<
 *         cdef vector[int] v = vector[int]()
 *         cdef int x
 */

static PyObject *__pyx_pf_5lgcpp_10BioGeoTree_12set_excluded_dist(struct __pyx_obj_5lgcpp_BioGeoTree *__pyx_v_self, PyObject *__pyx_v_dist, struct __pyx_obj_5lgcpp_Node *__pyx_v_n) {
  std::vector<int> __pyx_v_v;
  int __pyx_v_x;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  PyObject *(*__pyx_t_3)(PyObject *);
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("set_excluded_dist", 0);

  /* "lgcpp.pyx":280
 *         self.ptr.set_default_model(m.ptr)
 *     def set_excluded_dist(self, dist, Node n):
 *         cdef vector[int] v = vector[int]()             # <<<<<<<<<<<<<<
 *         cdef int x
 *         for x in dist:
 */
  __pyx_v_v = std::vector<int>();

  /* "lgcpp.pyx":282
 *         cdef vector[int] v = vector[int]()
 *         cdef int x
 *         for x in dist:             # <<<<<<<<<<<<<<
 *             v.push_back(x)
 *         self.ptr.set_excluded_dist(v, n.ptr)
 */
  if (PyList_CheckExact(__pyx_v_dist) || PyTuple_CheckExact(__pyx_v_dist)) {
    __pyx_t_1 = __pyx_v_dist; __Pyx_INCREF(__pyx_t_1); __pyx_t_2 = 0;
    __pyx_t_3 = NULL;
  } else {
    __pyx_t_2 = -1; __pyx_t_1 = PyObject_GetIter(__pyx_v_dist); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 282; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = Py_TYPE(__pyx_t_1)->tp_iternext;
  }
  for (;;) {
    if (!__pyx_t_3 && PyList_CheckExact(__pyx_t_1)) {
      if (__pyx_t_2 >= PyList_GET_SIZE(__pyx_t_1)) break;
      __pyx_t_4 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++;
    } else if (!__pyx_t_3 && PyTuple_CheckExact(__pyx_t_1)) {
      if (__pyx_t_2 >= PyTuple_GET_SIZE(__pyx_t_1)) break;
      __pyx_t_4 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++;
    } else {
      __pyx_t_4 = __pyx_t_3(__pyx_t_1);
      if (unlikely(!__pyx_t_4)) {
        if (PyErr_Occurred()) {
          if (likely(PyErr_ExceptionMatches(PyExc_StopIteration))) PyErr_Clear();
          else {__pyx_filename = __pyx_f[0]; __pyx_lineno = 282; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_4);
    }
    __pyx_t_5 = __Pyx_PyInt_AsInt(__pyx_t_4); if (unlikely((__pyx_t_5 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 282; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_v_x = __pyx_t_5;

    /* "lgcpp.pyx":283
 *         cdef int x
 *         for x in dist:
 *             v.push_back(x)             # <<<<<<<<<<<<<<
 *         self.ptr.set_excluded_dist(v, n.ptr)
 *     def set_tip_conditionals(self, data):
 */
    __pyx_v_v.push_back(__pyx_v_x);
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "lgcpp.pyx":284
 *         for x in dist:
 *             v.push_back(x)
 *         self.ptr.set_excluded_dist(v, n.ptr)             # <<<<<<<<<<<<<<
 *     def set_tip_conditionals(self, data):
 *         cdef map[string,vector[int]] m #= map[string,vector[int]]()
 */
  __pyx_v_self->ptr->set_excluded_dist(__pyx_v_v, __pyx_v_n->ptr);

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("lgcpp.BioGeoTree.set_excluded_dist", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_5lgcpp_10BioGeoTree_15set_tip_conditionals(PyObject *__pyx_v_self, PyObject *__pyx_v_data); /*proto*/
static PyObject *__pyx_pw_5lgcpp_10BioGeoTree_15set_tip_conditionals(PyObject *__pyx_v_self, PyObject *__pyx_v_data) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_tip_conditionals (wrapper)", 0);
  __pyx_r = __pyx_pf_5lgcpp_10BioGeoTree_14set_tip_conditionals(((struct __pyx_obj_5lgcpp_BioGeoTree *)__pyx_v_self), ((PyObject *)__pyx_v_data));
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "lgcpp.pyx":285
 *             v.push_back(x)
 *         self.ptr.set_excluded_dist(v, n.ptr)
 *     def set_tip_conditionals(self, data):             # <<<<<<<<<<<<<<
 *         cdef map[string,vector[int]] m #= map[string,vector[int]]()
 *         #cdef string* s
 */

static PyObject *__pyx_pf_5lgcpp_10BioGeoTree_14set_tip_conditionals(struct __pyx_obj_5lgcpp_BioGeoTree *__pyx_v_self, PyObject *__pyx_v_data) {
  std::map<std::string,std::vector<int> > __pyx_v_m;
  std::vector<int> *__pyx_v_dist;
  PyObject *__pyx_v_k = NULL;
  PyObject *__pyx_v_v = NULL;
  PyObject *__pyx_v_x = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  Py_ssize_t __pyx_t_3;
  PyObject *(*__pyx_t_4)(PyObject *);
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *(*__pyx_t_8)(PyObject *);
  Py_ssize_t __pyx_t_9;
  PyObject *(*__pyx_t_10)(PyObject *);
  int __pyx_t_11;
  char *__pyx_t_12;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("set_tip_conditionals", 0);

  /* "lgcpp.pyx":289
 *         #cdef string* s
 *         cdef vector[int]* dist
 *         for k, v in sorted(data.items()):             # <<<<<<<<<<<<<<
 *             #s = new string(<char *>k)
 *             dist = new vector[int]()
 */
  __pyx_t_1 = PyObject_GetAttr(__pyx_v_data, __pyx_n_s__items); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 289; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 289; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 289; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_2);
  __pyx_t_2 = 0;
  __pyx_t_2 = PyObject_Call(__pyx_builtin_sorted, ((PyObject *)__pyx_t_1), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 289; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(((PyObject *)__pyx_t_1)); __pyx_t_1 = 0;
  if (PyList_CheckExact(__pyx_t_2) || PyTuple_CheckExact(__pyx_t_2)) {
    __pyx_t_1 = __pyx_t_2; __Pyx_INCREF(__pyx_t_1); __pyx_t_3 = 0;
    __pyx_t_4 = NULL;
  } else {
    __pyx_t_3 = -1; __pyx_t_1 = PyObject_GetIter(__pyx_t_2); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 289; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_4 = Py_TYPE(__pyx_t_1)->tp_iternext;
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  for (;;) {
    if (!__pyx_t_4 && PyList_CheckExact(__pyx_t_1)) {
      if (__pyx_t_3 >= PyList_GET_SIZE(__pyx_t_1)) break;
      __pyx_t_2 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_3); __Pyx_INCREF(__pyx_t_2); __pyx_t_3++;
    } else if (!__pyx_t_4 && PyTuple_CheckExact(__pyx_t_1)) {
      if (__pyx_t_3 >= PyTuple_GET_SIZE(__pyx_t_1)) break;
      __pyx_t_2 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_3); __Pyx_INCREF(__pyx_t_2); __pyx_t_3++;
    } else {
      __pyx_t_2 = __pyx_t_4(__pyx_t_1);
      if (unlikely(!__pyx_t_2)) {
        if (PyErr_Occurred()) {
          if (likely(PyErr_ExceptionMatches(PyExc_StopIteration))) PyErr_Clear();
          else {__pyx_filename = __pyx_f[0]; __pyx_lineno = 289; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_2);
    }
    if ((likely(PyTuple_CheckExact(__pyx_t_2))) || (PyList_CheckExact(__pyx_t_2))) {
      PyObject* sequence = __pyx_t_2;
      if (likely(PyTuple_CheckExact(sequence))) {
        if (unlikely(PyTuple_GET_SIZE(sequence) != 2)) {
          if (PyTuple_GET_SIZE(sequence) > 2) __Pyx_RaiseTooManyValuesError(2);
          else __Pyx_RaiseNeedMoreValuesError(PyTuple_GET_SIZE(sequence));
          {__pyx_filename = __pyx_f[0]; __pyx_lineno = 289; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        }
        __pyx_t_5 = PyTuple_GET_ITEM(sequence, 0); 
        __pyx_t_6 = PyTuple_GET_ITEM(sequence, 1); 
      } else {
        if (unlikely(PyList_GET_SIZE(sequence) != 2)) {
          if (PyList_GET_SIZE(sequence) > 2) __Pyx_RaiseTooManyValuesError(2);
          else __Pyx_RaiseNeedMoreValuesError(PyList_GET_SIZE(sequence));
          {__pyx_filename = __pyx_f[0]; __pyx_lineno = 289; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        }
        __pyx_t_5 = PyList_GET_ITEM(sequence, 0); 
        __pyx_t_6 = PyList_GET_ITEM(sequence, 1); 
      }
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    } else {
      Py_ssize_t index = -1;
      __pyx_t_7 = PyObject_GetIter(__pyx_t_2); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 289; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_t_8 = Py_TYPE(__pyx_t_7)->tp_iternext;
      index = 0; __pyx_t_5 = __pyx_t_8(__pyx_t_7); if (unlikely(!__pyx_t_5)) goto __pyx_L5_unpacking_failed;
      __Pyx_GOTREF(__pyx_t_5);
      index = 1; __pyx_t_6 = __pyx_t_8(__pyx_t_7); if (unlikely(!__pyx_t_6)) goto __pyx_L5_unpacking_failed;
      __Pyx_GOTREF(__pyx_t_6);
      if (__Pyx_IternextUnpackEndCheck(__pyx_t_8(__pyx_t_7), 2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 289; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      goto __pyx_L6_unpacking_done;
      __pyx_L5_unpacking_failed:;
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      if (PyErr_Occurred() && PyErr_ExceptionMatches(PyExc_StopIteration)) PyErr_Clear();
      if (!PyErr_Occurred()) __Pyx_RaiseNeedMoreValuesError(index);
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 289; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __pyx_L6_unpacking_done:;
    }
    __Pyx_XDECREF(__pyx_v_k);
    __pyx_v_k = __pyx_t_5;
    __pyx_t_5 = 0;
    __Pyx_XDECREF(__pyx_v_v);
    __pyx_v_v = __pyx_t_6;
    __pyx_t_6 = 0;

    /* "lgcpp.pyx":291
 *         for k, v in sorted(data.items()):
 *             #s = new string(<char *>k)
 *             dist = new vector[int]()             # <<<<<<<<<<<<<<
 *             for x in v: dist.push_back(x)
 *             m[string(<char *>k)] = deref(dist)
 */
    __pyx_v_dist = new std::vector<int>();

    /* "lgcpp.pyx":292
 *             #s = new string(<char *>k)
 *             dist = new vector[int]()
 *             for x in v: dist.push_back(x)             # <<<<<<<<<<<<<<
 *             m[string(<char *>k)] = deref(dist)
 *         ## cdef map[string,vector[int]].iterator it = m.begin()
 */
    if (PyList_CheckExact(__pyx_v_v) || PyTuple_CheckExact(__pyx_v_v)) {
      __pyx_t_2 = __pyx_v_v; __Pyx_INCREF(__pyx_t_2); __pyx_t_9 = 0;
      __pyx_t_10 = NULL;
    } else {
      __pyx_t_9 = -1; __pyx_t_2 = PyObject_GetIter(__pyx_v_v); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 292; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_10 = Py_TYPE(__pyx_t_2)->tp_iternext;
    }
    for (;;) {
      if (!__pyx_t_10 && PyList_CheckExact(__pyx_t_2)) {
        if (__pyx_t_9 >= PyList_GET_SIZE(__pyx_t_2)) break;
        __pyx_t_6 = PyList_GET_ITEM(__pyx_t_2, __pyx_t_9); __Pyx_INCREF(__pyx_t_6); __pyx_t_9++;
      } else if (!__pyx_t_10 && PyTuple_CheckExact(__pyx_t_2)) {
        if (__pyx_t_9 >= PyTuple_GET_SIZE(__pyx_t_2)) break;
        __pyx_t_6 = PyTuple_GET_ITEM(__pyx_t_2, __pyx_t_9); __Pyx_INCREF(__pyx_t_6); __pyx_t_9++;
      } else {
        __pyx_t_6 = __pyx_t_10(__pyx_t_2);
        if (unlikely(!__pyx_t_6)) {
          if (PyErr_Occurred()) {
            if (likely(PyErr_ExceptionMatches(PyExc_StopIteration))) PyErr_Clear();
            else {__pyx_filename = __pyx_f[0]; __pyx_lineno = 292; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          }
          break;
        }
        __Pyx_GOTREF(__pyx_t_6);
      }
      __Pyx_XDECREF(__pyx_v_x);
      __pyx_v_x = __pyx_t_6;
      __pyx_t_6 = 0;
      __pyx_t_11 = __Pyx_PyInt_AsInt(__pyx_v_x); if (unlikely((__pyx_t_11 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 292; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __pyx_v_dist->push_back(__pyx_t_11);
    }
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "lgcpp.pyx":293
 *             dist = new vector[int]()
 *             for x in v: dist.push_back(x)
 *             m[string(<char *>k)] = deref(dist)             # <<<<<<<<<<<<<<
 *         ## cdef map[string,vector[int]].iterator it = m.begin()
 *         ## while it != m.end():
 */
    __pyx_t_12 = PyBytes_AsString(__pyx_v_k); if (unlikely((!__pyx_t_12) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 293; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    (__pyx_v_m[std::string(((char *)__pyx_t_12))]) = (*__pyx_v_dist);
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "lgcpp.pyx":298
 *         ##     print deref(it).first.c_str()#, deref(it).second
 *         ##     inc(it)
 *         self.ptr.set_tip_conditionals(m)             # <<<<<<<<<<<<<<
 * 
 *     def optimize_global_dispersal_extinction(self, bool marginal, RateModel m):
 */
  __pyx_v_self->ptr->set_tip_conditionals(__pyx_v_m);

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("lgcpp.BioGeoTree.set_tip_conditionals", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_k);
  __Pyx_XDECREF(__pyx_v_v);
  __Pyx_XDECREF(__pyx_v_x);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_5lgcpp_10BioGeoTree_17optimize_global_dispersal_extinction(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_5lgcpp_10BioGeoTree_17optimize_global_dispersal_extinction(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  bool __pyx_v_marginal;
  struct __pyx_obj_5lgcpp_RateModel *__pyx_v_m = 0;
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__marginal,&__pyx_n_s__m,0};
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("optimize_global_dispersal_extinction (wrapper)", 0);
  {
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__marginal);
        if (likely(values[0])) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__m);
        if (likely(values[1])) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("optimize_global_dispersal_extinction", 1, 2, 2, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 300; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "optimize_global_dispersal_extinction") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 300; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_marginal = __Pyx_PyObject_IsTrue(values[0]); if (unlikely((__pyx_v_marginal == (bool)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 300; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    __pyx_v_m = ((struct __pyx_obj_5lgcpp_RateModel *)values[1]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("optimize_global_dispersal_extinction", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 300; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("lgcpp.BioGeoTree.optimize_global_dispersal_extinction", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_m), __pyx_ptype_5lgcpp_RateModel, 1, "m", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 300; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_pf_5lgcpp_10BioGeoTree_16optimize_global_dispersal_extinction(((struct __pyx_obj_5lgcpp_BioGeoTree *)__pyx_v_self), __pyx_v_marginal, __pyx_v_m);
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "lgcpp.pyx":300
 *         self.ptr.set_tip_conditionals(m)
 * 
 *     def optimize_global_dispersal_extinction(self, bool marginal, RateModel m):             # <<<<<<<<<<<<<<
 *         ## cdef double initL = super2double(self.ptr.eval_likelihood(marginal))
 *         print >> sys.stderr, "optimizing rate parameters..."
 */

static PyObject *__pyx_pf_5lgcpp_10BioGeoTree_16optimize_global_dispersal_extinction(struct __pyx_obj_5lgcpp_BioGeoTree *__pyx_v_self, bool __pyx_v_marginal, struct __pyx_obj_5lgcpp_RateModel *__pyx_v_m) {
  OptimizeBioGeo *__pyx_v_opt;
  std::vector<double> __pyx_v_disext;
  double __pyx_v_d;
  double __pyx_v_e;
  double __pyx_v_neglnL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  double __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("optimize_global_dispersal_extinction", 0);

  /* "lgcpp.pyx":302
 *     def optimize_global_dispersal_extinction(self, bool marginal, RateModel m):
 *         ## cdef double initL = super2double(self.ptr.eval_likelihood(marginal))
 *         print >> sys.stderr, "optimizing rate parameters..."             # <<<<<<<<<<<<<<
 *         cdef _OptimizeBioGeo* opt = new _OptimizeBioGeo(self.ptr, m.ptr, marginal)
 *         cdef vector[double] disext = opt.optimize_global_dispersal_extinction()
 */
  __pyx_t_1 = __Pyx_GetName(__pyx_m, __pyx_n_s__sys); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 302; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyObject_GetAttr(__pyx_t_1, __pyx_n_s__stderr); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 302; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__Pyx_PrintOne(__pyx_t_2, ((PyObject *)__pyx_kp_s_4)) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 302; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "lgcpp.pyx":303
 *         ## cdef double initL = super2double(self.ptr.eval_likelihood(marginal))
 *         print >> sys.stderr, "optimizing rate parameters..."
 *         cdef _OptimizeBioGeo* opt = new _OptimizeBioGeo(self.ptr, m.ptr, marginal)             # <<<<<<<<<<<<<<
 *         cdef vector[double] disext = opt.optimize_global_dispersal_extinction()
 *         cdef double d, e, neglnL
 */
  __pyx_v_opt = new OptimizeBioGeo(__pyx_v_self->ptr, __pyx_v_m->ptr, __pyx_v_marginal);

  /* "lgcpp.pyx":304
 *         print >> sys.stderr, "optimizing rate parameters..."
 *         cdef _OptimizeBioGeo* opt = new _OptimizeBioGeo(self.ptr, m.ptr, marginal)
 *         cdef vector[double] disext = opt.optimize_global_dispersal_extinction()             # <<<<<<<<<<<<<<
 *         cdef double d, e, neglnL
 *         d = disext[0]; e = disext[1]
 */
  __pyx_v_disext = __pyx_v_opt->optimize_global_dispersal_extinction();

  /* "lgcpp.pyx":306
 *         cdef vector[double] disext = opt.optimize_global_dispersal_extinction()
 *         cdef double d, e, neglnL
 *         d = disext[0]; e = disext[1]             # <<<<<<<<<<<<<<
 *         ## print "dispersal rate:", disext[0]
 *         ## print "local extinction rate:", disext[1]
 */
  __pyx_v_d = (__pyx_v_disext[0]);
  __pyx_v_e = (__pyx_v_disext[1]);

  /* "lgcpp.pyx":310
 *         ## print "local extinction rate:", disext[1]
 *         ## print
 *         m.setup_D(disext[0])             # <<<<<<<<<<<<<<
 *         m.setup_E(disext[1])
 *         m.setup_Q()
 */
  __pyx_t_2 = PyObject_GetAttr(((PyObject *)__pyx_v_m), __pyx_n_s__setup_D); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 310; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = PyFloat_FromDouble((__pyx_v_disext[0])); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 310; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 310; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_1 = PyObject_Call(__pyx_t_2, ((PyObject *)__pyx_t_3), NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 310; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(((PyObject *)__pyx_t_3)); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "lgcpp.pyx":311
 *         ## print
 *         m.setup_D(disext[0])
 *         m.setup_E(disext[1])             # <<<<<<<<<<<<<<
 *         m.setup_Q()
 *         self.ptr.update_default_model(m.ptr)
 */
  __pyx_t_1 = PyObject_GetAttr(((PyObject *)__pyx_v_m), __pyx_n_s__setup_E); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 311; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = PyFloat_FromDouble((__pyx_v_disext[1])); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 311; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 311; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_3);
  __pyx_t_3 = 0;
  __pyx_t_3 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_t_2), NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 311; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(((PyObject *)__pyx_t_2)); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "lgcpp.pyx":312
 *         m.setup_D(disext[0])
 *         m.setup_E(disext[1])
 *         m.setup_Q()             # <<<<<<<<<<<<<<
 *         self.ptr.update_default_model(m.ptr)
 *         self.ptr.set_store_p_matrices(True)
 */
  __pyx_t_3 = PyObject_GetAttr(((PyObject *)__pyx_v_m), __pyx_n_s__setup_Q); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 312; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = PyObject_Call(__pyx_t_3, ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 312; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "lgcpp.pyx":313
 *         m.setup_E(disext[1])
 *         m.setup_Q()
 *         self.ptr.update_default_model(m.ptr)             # <<<<<<<<<<<<<<
 *         self.ptr.set_store_p_matrices(True)
 *         neglnL = float(superdouble_factory(superptr(self.ptr.eval_likelihood(marginal))))
 */
  __pyx_v_self->ptr->update_default_model(__pyx_v_m->ptr);

  /* "lgcpp.pyx":314
 *         m.setup_Q()
 *         self.ptr.update_default_model(m.ptr)
 *         self.ptr.set_store_p_matrices(True)             # <<<<<<<<<<<<<<
 *         neglnL = float(superdouble_factory(superptr(self.ptr.eval_likelihood(marginal))))
 *         ## print "-lnL:", neglnL
 */
  __pyx_v_self->ptr->set_store_p_matrices(1);

  /* "lgcpp.pyx":315
 *         self.ptr.update_default_model(m.ptr)
 *         self.ptr.set_store_p_matrices(True)
 *         neglnL = float(superdouble_factory(superptr(self.ptr.eval_likelihood(marginal))))             # <<<<<<<<<<<<<<
 *         ## print "-lnL:", neglnL
 *         ## print
 */
  __pyx_t_2 = ((PyObject *)__pyx_f_5lgcpp_superdouble_factory(__pyx_f_5lgcpp_superptr(__pyx_v_self->ptr->eval_likelihood(__pyx_v_marginal)))); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 315; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = __Pyx_PyObject_AsDouble(__pyx_t_2); if (unlikely(__pyx_t_4 == ((double)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 315; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_neglnL = __pyx_t_4;

  /* "lgcpp.pyx":319
 *         ## print
 *         ## self.ptr.set_store_p_matrices(False)
 *         print >> sys.stderr, ("dispersal = %s; extinction = %s; -lnL = %s" %             # <<<<<<<<<<<<<<
 *                               (d, e, neglnL))
 *         return (d, e, neglnL)
 */
  __pyx_t_2 = __Pyx_GetName(__pyx_m, __pyx_n_s__sys); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 319; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyObject_GetAttr(__pyx_t_2, __pyx_n_s__stderr); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 319; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "lgcpp.pyx":320
 *         ## self.ptr.set_store_p_matrices(False)
 *         print >> sys.stderr, ("dispersal = %s; extinction = %s; -lnL = %s" %
 *                               (d, e, neglnL))             # <<<<<<<<<<<<<<
 *         return (d, e, neglnL)
 * 
 */
  __pyx_t_2 = PyFloat_FromDouble(__pyx_v_d); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 320; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_e); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 320; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_5 = PyFloat_FromDouble(__pyx_v_neglnL); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 320; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_6 = PyTuple_New(3); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 320; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_6);
  PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_6, 1, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_6, 2, __pyx_t_5);
  __Pyx_GIVEREF(__pyx_t_5);
  __pyx_t_2 = 0;
  __pyx_t_1 = 0;
  __pyx_t_5 = 0;
  __pyx_t_5 = PyNumber_Remainder(((PyObject *)__pyx_kp_s_5), ((PyObject *)__pyx_t_6)); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 319; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_5));
  __Pyx_DECREF(((PyObject *)__pyx_t_6)); __pyx_t_6 = 0;
  if (__Pyx_PrintOne(__pyx_t_3, ((PyObject *)__pyx_t_5)) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 319; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(((PyObject *)__pyx_t_5)); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "lgcpp.pyx":321
 *         print >> sys.stderr, ("dispersal = %s; extinction = %s; -lnL = %s" %
 *                               (d, e, neglnL))
 *         return (d, e, neglnL)             # <<<<<<<<<<<<<<
 * 
 *     def ancsplits(self, Tree intree, bool marginal, RateModel m, list areas):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_3 = PyFloat_FromDouble(__pyx_v_d); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 321; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_5 = PyFloat_FromDouble(__pyx_v_e); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 321; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_6 = PyFloat_FromDouble(__pyx_v_neglnL); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 321; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_1 = PyTuple_New(3); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 321; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_t_5);
  __Pyx_GIVEREF(__pyx_t_5);
  PyTuple_SET_ITEM(__pyx_t_1, 2, __pyx_t_6);
  __Pyx_GIVEREF(__pyx_t_6);
  __pyx_t_3 = 0;
  __pyx_t_5 = 0;
  __pyx_t_6 = 0;
  __pyx_r = ((PyObject *)__pyx_t_1);
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("lgcpp.BioGeoTree.optimize_global_dispersal_extinction", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_5lgcpp_10BioGeoTree_19ancsplits(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_5lgcpp_10BioGeoTree_19ancsplits(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_5lgcpp_Tree *__pyx_v_intree = 0;
  bool __pyx_v_marginal;
  struct __pyx_obj_5lgcpp_RateModel *__pyx_v_m = 0;
  PyObject *__pyx_v_areas = 0;
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__intree,&__pyx_n_s__marginal,&__pyx_n_s__m,&__pyx_n_s__areas,0};
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("ancsplits (wrapper)", 0);
  {
    PyObject* values[4] = {0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__intree);
        if (likely(values[0])) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__marginal);
        if (likely(values[1])) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("ancsplits", 1, 4, 4, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 323; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  2:
        values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__m);
        if (likely(values[2])) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("ancsplits", 1, 4, 4, 2); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 323; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  3:
        values[3] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__areas);
        if (likely(values[3])) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("ancsplits", 1, 4, 4, 3); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 323; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "ancsplits") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 323; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 4) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
    }
    __pyx_v_intree = ((struct __pyx_obj_5lgcpp_Tree *)values[0]);
    __pyx_v_marginal = __Pyx_PyObject_IsTrue(values[1]); if (unlikely((__pyx_v_marginal == (bool)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 323; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    __pyx_v_m = ((struct __pyx_obj_5lgcpp_RateModel *)values[2]);
    __pyx_v_areas = ((PyObject*)values[3]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("ancsplits", 1, 4, 4, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 323; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("lgcpp.BioGeoTree.ancsplits", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_intree), __pyx_ptype_5lgcpp_Tree, 1, "intree", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 323; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_m), __pyx_ptype_5lgcpp_RateModel, 1, "m", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 323; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_areas), (&PyList_Type), 1, "areas", 1))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 323; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_pf_5lgcpp_10BioGeoTree_18ancsplits(((struct __pyx_obj_5lgcpp_BioGeoTree *)__pyx_v_self), __pyx_v_intree, __pyx_v_marginal, __pyx_v_m, __pyx_v_areas);
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "lgcpp.pyx":323
 *         return (d, e, neglnL)
 * 
 *     def ancsplits(self, Tree intree, bool marginal, RateModel m, list areas):             # <<<<<<<<<<<<<<
 *         print >> sys.stderr, "calculating ancestral splits..."
 *         cdef int n = intree.ptr.getInternalNodeCount()
 */

static PyObject *__pyx_pf_5lgcpp_10BioGeoTree_18ancsplits(struct __pyx_obj_5lgcpp_BioGeoTree *__pyx_v_self, struct __pyx_obj_5lgcpp_Tree *__pyx_v_intree, bool __pyx_v_marginal, struct __pyx_obj_5lgcpp_RateModel *__pyx_v_m, PyObject *__pyx_v_areas) {
  int __pyx_v_n;
  int __pyx_v_i;
  int __pyx_v_k;
  Node *__pyx_v_node;
  std::map<std::vector<int>,std::vector<AncSplit> > __pyx_v_ras;
  std::map<std::vector<int>,std::vector<AncSplit> >::iterator __pyx_v_rasit;
  std::vector<AncSplit> *__pyx_v_tans;
  std::vector<AncSplit>::iterator __pyx_v_tansit;
  std::map<int,std::string> __pyx_v_area_i2s;
  BioGeoTreeTools __pyx_v_tt;
  std::map<Superdouble,std::string> __pyx_v_summary;
  std::map<Superdouble,std::string>::iterator __pyx_v_it;
  Superdouble __pyx_v_totL;
  Superdouble *__pyx_v_prop;
  PyObject *__pyx_v_a = NULL;
  PyObject *__pyx_v_d = NULL;
  PyObject *__pyx_v_v = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  Py_ssize_t __pyx_t_4;
  char *__pyx_t_5;
  int __pyx_t_6;
  int __pyx_t_7;
  double __pyx_t_8;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  int __pyx_t_11;
  long __pyx_t_12;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("ancsplits", 0);

  /* "lgcpp.pyx":324
 * 
 *     def ancsplits(self, Tree intree, bool marginal, RateModel m, list areas):
 *         print >> sys.stderr, "calculating ancestral splits..."             # <<<<<<<<<<<<<<
 *         cdef int n = intree.ptr.getInternalNodeCount()
 *         #print >> sys.stderr, "%s nodes" % n
 */
  __pyx_t_1 = __Pyx_GetName(__pyx_m, __pyx_n_s__sys); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 324; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyObject_GetAttr(__pyx_t_1, __pyx_n_s__stderr); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 324; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__Pyx_PrintOne(__pyx_t_2, ((PyObject *)__pyx_kp_s_6)) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 324; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "lgcpp.pyx":325
 *     def ancsplits(self, Tree intree, bool marginal, RateModel m, list areas):
 *         print >> sys.stderr, "calculating ancestral splits..."
 *         cdef int n = intree.ptr.getInternalNodeCount()             # <<<<<<<<<<<<<<
 *         #print >> sys.stderr, "%s nodes" % n
 *         cdef int i, j, k
 */
  __pyx_v_n = __pyx_v_intree->ptr->getInternalNodeCount();

  /* "lgcpp.pyx":334
 *         cdef vector[_AncSplit].iterator tansit
 *         cdef _AncSplit* ancsplit
 *         cdef map[int,string] area_i2s = map[int,string]()             # <<<<<<<<<<<<<<
 *         cdef _BioGeoTreeTools tt
 *         cdef map[_Superdouble,string] summary
 */
  __pyx_v_area_i2s = std::map<int,std::string>();

  /* "lgcpp.pyx":341
 *         cdef _Superdouble* prop, lnl
 * 
 *         self.ptr.set_use_stored_matrices(True)             # <<<<<<<<<<<<<<
 *         self.ptr.prepare_ancstate_reverse()
 * 
 */
  __pyx_v_self->ptr->set_use_stored_matrices(1);

  /* "lgcpp.pyx":342
 * 
 *         self.ptr.set_use_stored_matrices(True)
 *         self.ptr.prepare_ancstate_reverse()             # <<<<<<<<<<<<<<
 * 
 *         for i, a in enumerate(areas):
 */
  __pyx_v_self->ptr->prepare_ancstate_reverse();

  /* "lgcpp.pyx":344
 *         self.ptr.prepare_ancstate_reverse()
 * 
 *         for i, a in enumerate(areas):             # <<<<<<<<<<<<<<
 *             area_i2s[i] = string(<char *>a)
 * 
 */
  __pyx_t_3 = 0;
  __pyx_t_2 = ((PyObject *)__pyx_v_areas); __Pyx_INCREF(__pyx_t_2); __pyx_t_4 = 0;
  for (;;) {
    if (__pyx_t_4 >= PyList_GET_SIZE(__pyx_t_2)) break;
    __pyx_t_1 = PyList_GET_ITEM(__pyx_t_2, __pyx_t_4); __Pyx_INCREF(__pyx_t_1); __pyx_t_4++;
    __Pyx_XDECREF(__pyx_v_a);
    __pyx_v_a = __pyx_t_1;
    __pyx_t_1 = 0;
    __pyx_v_i = __pyx_t_3;
    __pyx_t_3 = (__pyx_t_3 + 1);

    /* "lgcpp.pyx":345
 * 
 *         for i, a in enumerate(areas):
 *             area_i2s[i] = string(<char *>a)             # <<<<<<<<<<<<<<
 * 
 *         d = {}
 */
    __pyx_t_5 = PyBytes_AsString(__pyx_v_a); if (unlikely((!__pyx_t_5) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 345; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    (__pyx_v_area_i2s[__pyx_v_i]) = std::string(((char *)__pyx_t_5));
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "lgcpp.pyx":347
 *             area_i2s[i] = string(<char *>a)
 * 
 *         d = {}             # <<<<<<<<<<<<<<
 *         for i in range(n):
 *             ## print 'i is', i
 */
  __pyx_t_2 = PyDict_New(); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 347; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_2));
  __pyx_v_d = __pyx_t_2;
  __pyx_t_2 = 0;

  /* "lgcpp.pyx":348
 * 
 *         d = {}
 *         for i in range(n):             # <<<<<<<<<<<<<<
 *             ## print 'i is', i
 *             node = intree.ptr.getInternalNode(i)
 */
  __pyx_t_3 = __pyx_v_n;
  for (__pyx_t_6 = 0; __pyx_t_6 < __pyx_t_3; __pyx_t_6+=1) {
    __pyx_v_i = __pyx_t_6;

    /* "lgcpp.pyx":350
 *         for i in range(n):
 *             ## print 'i is', i
 *             node = intree.ptr.getInternalNode(i)             # <<<<<<<<<<<<<<
 *             totL = _Superdouble(0,0)
 *             ras = self.ptr.calculate_ancsplit_reverse(deref(node), marginal)
 */
    __pyx_v_node = __pyx_v_intree->ptr->getInternalNode(__pyx_v_i);

    /* "lgcpp.pyx":351
 *             ## print 'i is', i
 *             node = intree.ptr.getInternalNode(i)
 *             totL = _Superdouble(0,0)             # <<<<<<<<<<<<<<
 *             ras = self.ptr.calculate_ancsplit_reverse(deref(node), marginal)
 *             rasit = ras.begin()
 */
    __pyx_v_totL = Superdouble(0.0, 0);

    /* "lgcpp.pyx":352
 *             node = intree.ptr.getInternalNode(i)
 *             totL = _Superdouble(0,0)
 *             ras = self.ptr.calculate_ancsplit_reverse(deref(node), marginal)             # <<<<<<<<<<<<<<
 *             rasit = ras.begin()
 *             while rasit != ras.end():
 */
    __pyx_v_ras = __pyx_v_self->ptr->calculate_ancsplit_reverse((*__pyx_v_node), __pyx_v_marginal);

    /* "lgcpp.pyx":353
 *             totL = _Superdouble(0,0)
 *             ras = self.ptr.calculate_ancsplit_reverse(deref(node), marginal)
 *             rasit = ras.begin()             # <<<<<<<<<<<<<<
 *             while rasit != ras.end():
 *                 tans = &deref(rasit).second
 */
    __pyx_v_rasit = __pyx_v_ras.begin();

    /* "lgcpp.pyx":354
 *             ras = self.ptr.calculate_ancsplit_reverse(deref(node), marginal)
 *             rasit = ras.begin()
 *             while rasit != ras.end():             # <<<<<<<<<<<<<<
 *                 tans = &deref(rasit).second
 *                 tansit = tans.begin()
 */
    while (1) {
      __pyx_t_7 = (__pyx_v_rasit != __pyx_v_ras.end());
      if (!__pyx_t_7) break;

      /* "lgcpp.pyx":355
 *             rasit = ras.begin()
 *             while rasit != ras.end():
 *                 tans = &deref(rasit).second             # <<<<<<<<<<<<<<
 *                 tansit = tans.begin()
 *                 while tansit != tans.end():
 */
      __pyx_v_tans = (&(*__pyx_v_rasit).second);

      /* "lgcpp.pyx":356
 *             while rasit != ras.end():
 *                 tans = &deref(rasit).second
 *                 tansit = tans.begin()             # <<<<<<<<<<<<<<
 *                 while tansit != tans.end():
 *                     #ancsplit = deref(tansit)
 */
      __pyx_v_tansit = __pyx_v_tans->begin();

      /* "lgcpp.pyx":357
 *                 tans = &deref(rasit).second
 *                 tansit = tans.begin()
 *                 while tansit != tans.end():             # <<<<<<<<<<<<<<
 *                     #ancsplit = deref(tansit)
 *                     totL += deref(tansit).getLikelihood()
 */
      while (1) {
        __pyx_t_7 = (__pyx_v_tansit != __pyx_v_tans->end());
        if (!__pyx_t_7) break;

        /* "lgcpp.pyx":359
 *                 while tansit != tans.end():
 *                     #ancsplit = deref(tansit)
 *                     totL += deref(tansit).getLikelihood()             # <<<<<<<<<<<<<<
 *                     inc(tansit)
 *                 inc(rasit)
 */
        __pyx_v_totL += (*__pyx_v_tansit).getLikelihood();

        /* "lgcpp.pyx":360
 *                     #ancsplit = deref(tansit)
 *                     totL += deref(tansit).getLikelihood()
 *                     inc(tansit)             # <<<<<<<<<<<<<<
 *                 inc(rasit)
 *             #print "totL:", superdouble_factory(&totL)
 */
        (++__pyx_v_tansit);
      }

      /* "lgcpp.pyx":361
 *                     totL += deref(tansit).getLikelihood()
 *                     inc(tansit)
 *                 inc(rasit)             # <<<<<<<<<<<<<<
 *             #print "totL:", superdouble_factory(&totL)
 * 
 */
      (++__pyx_v_rasit);
    }

    /* "lgcpp.pyx":364
 *             #print "totL:", superdouble_factory(&totL)
 * 
 *             summary = tt.summarizeSplits(node, ras, area_i2s, m.ptr)             # <<<<<<<<<<<<<<
 *             #print >> sys.stderr, 'node %s (summary: %s)' % (i, summary.size())
 *             k = 0
 */
    __pyx_v_summary = __pyx_v_tt.summarizeSplits(__pyx_v_node, __pyx_v_ras, __pyx_v_area_i2s, __pyx_v_m->ptr);

    /* "lgcpp.pyx":366
 *             summary = tt.summarizeSplits(node, ras, area_i2s, m.ptr)
 *             #print >> sys.stderr, 'node %s (summary: %s)' % (i, summary.size())
 *             k = 0             # <<<<<<<<<<<<<<
 *             it = summary.begin()
 *             v = []
 */
    __pyx_v_k = 0;

    /* "lgcpp.pyx":367
 *             #print >> sys.stderr, 'node %s (summary: %s)' % (i, summary.size())
 *             k = 0
 *             it = summary.begin()             # <<<<<<<<<<<<<<
 *             v = []
 *             while it != summary.end():
 */
    __pyx_v_it = __pyx_v_summary.begin();

    /* "lgcpp.pyx":368
 *             k = 0
 *             it = summary.begin()
 *             v = []             # <<<<<<<<<<<<<<
 *             while it != summary.end():
 *                 prop = superptr(super_divide(deref(it).first, totL))
 */
    __pyx_t_2 = PyList_New(0); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 368; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_XDECREF(((PyObject *)__pyx_v_v));
    __pyx_v_v = __pyx_t_2;
    __pyx_t_2 = 0;

    /* "lgcpp.pyx":369
 *             it = summary.begin()
 *             v = []
 *             while it != summary.end():             # <<<<<<<<<<<<<<
 *                 prop = superptr(super_divide(deref(it).first, totL))
 *                 #print "prop", float(superdouble_factory(prop))
 */
    while (1) {
      __pyx_t_7 = (__pyx_v_it != __pyx_v_summary.end());
      if (!__pyx_t_7) break;

      /* "lgcpp.pyx":370
 *             v = []
 *             while it != summary.end():
 *                 prop = superptr(super_divide(deref(it).first, totL))             # <<<<<<<<<<<<<<
 *                 #print "prop", float(superdouble_factory(prop))
 *                 v.append((float(superdouble_factory(superptr(super_ln(deref(it).first)))),
 */
      __pyx_v_prop = __pyx_f_5lgcpp_superptr(super_divide((*__pyx_v_it).first, __pyx_v_totL));

      /* "lgcpp.pyx":372
 *                 prop = superptr(super_divide(deref(it).first, totL))
 *                 #print "prop", float(superdouble_factory(prop))
 *                 v.append((float(superdouble_factory(superptr(super_ln(deref(it).first)))),             # <<<<<<<<<<<<<<
 *                           float(superdouble_factory(prop)),
 *                           deref(it).second.c_str()))
 */
      __pyx_t_2 = ((PyObject *)__pyx_f_5lgcpp_superdouble_factory(__pyx_f_5lgcpp_superptr(super_ln((*__pyx_v_it).first)))); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 372; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_8 = __Pyx_PyObject_AsDouble(__pyx_t_2); if (unlikely(__pyx_t_8 == ((double)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 372; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_t_2 = PyFloat_FromDouble(__pyx_t_8); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 372; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_2);

      /* "lgcpp.pyx":373
 *                 #print "prop", float(superdouble_factory(prop))
 *                 v.append((float(superdouble_factory(superptr(super_ln(deref(it).first)))),
 *                           float(superdouble_factory(prop)),             # <<<<<<<<<<<<<<
 *                           deref(it).second.c_str()))
 *                 inc(it)
 */
      __pyx_t_1 = ((PyObject *)__pyx_f_5lgcpp_superdouble_factory(__pyx_v_prop)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 373; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_8 = __Pyx_PyObject_AsDouble(__pyx_t_1); if (unlikely(__pyx_t_8 == ((double)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 373; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_t_1 = PyFloat_FromDouble(__pyx_t_8); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 373; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_1);

      /* "lgcpp.pyx":374
 *                 v.append((float(superdouble_factory(superptr(super_ln(deref(it).first)))),
 *                           float(superdouble_factory(prop)),
 *                           deref(it).second.c_str()))             # <<<<<<<<<<<<<<
 *                 inc(it)
 *                 k += 1
 */
      __pyx_t_9 = PyBytes_FromString((*__pyx_v_it).second.c_str()); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 374; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(((PyObject *)__pyx_t_9));
      __pyx_t_10 = PyTuple_New(3); if (unlikely(!__pyx_t_10)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 372; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_10);
      PyTuple_SET_ITEM(__pyx_t_10, 0, __pyx_t_2);
      __Pyx_GIVEREF(__pyx_t_2);
      PyTuple_SET_ITEM(__pyx_t_10, 1, __pyx_t_1);
      __Pyx_GIVEREF(__pyx_t_1);
      PyTuple_SET_ITEM(__pyx_t_10, 2, ((PyObject *)__pyx_t_9));
      __Pyx_GIVEREF(((PyObject *)__pyx_t_9));
      __pyx_t_2 = 0;
      __pyx_t_1 = 0;
      __pyx_t_9 = 0;
      __pyx_t_11 = PyList_Append(__pyx_v_v, ((PyObject *)__pyx_t_10)); if (unlikely(__pyx_t_11 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 372; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(((PyObject *)__pyx_t_10)); __pyx_t_10 = 0;

      /* "lgcpp.pyx":375
 *                           float(superdouble_factory(prop)),
 *                           deref(it).second.c_str()))
 *                 inc(it)             # <<<<<<<<<<<<<<
 *                 k += 1
 *             d[i+1] = list(reversed(sorted(v)))
 */
      (++__pyx_v_it);

      /* "lgcpp.pyx":376
 *                           deref(it).second.c_str()))
 *                 inc(it)
 *                 k += 1             # <<<<<<<<<<<<<<
 *             d[i+1] = list(reversed(sorted(v)))
 *         print >> sys.stderr, "Done"
 */
      __pyx_v_k = (__pyx_v_k + 1);
    }

    /* "lgcpp.pyx":377
 *                 inc(it)
 *                 k += 1
 *             d[i+1] = list(reversed(sorted(v)))             # <<<<<<<<<<<<<<
 *         print >> sys.stderr, "Done"
 *         return d
 */
    __pyx_t_10 = PyTuple_New(1); if (unlikely(!__pyx_t_10)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 377; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_10);
    __Pyx_INCREF(((PyObject *)__pyx_v_v));
    PyTuple_SET_ITEM(__pyx_t_10, 0, ((PyObject *)__pyx_v_v));
    __Pyx_GIVEREF(((PyObject *)__pyx_v_v));
    __pyx_t_9 = PyObject_Call(__pyx_builtin_sorted, ((PyObject *)__pyx_t_10), NULL); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 377; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_9);
    __Pyx_DECREF(((PyObject *)__pyx_t_10)); __pyx_t_10 = 0;
    __pyx_t_10 = PyTuple_New(1); if (unlikely(!__pyx_t_10)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 377; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_10);
    PyTuple_SET_ITEM(__pyx_t_10, 0, __pyx_t_9);
    __Pyx_GIVEREF(__pyx_t_9);
    __pyx_t_9 = 0;
    __pyx_t_9 = PyObject_Call(__pyx_builtin_reversed, ((PyObject *)__pyx_t_10), NULL); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 377; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_9);
    __Pyx_DECREF(((PyObject *)__pyx_t_10)); __pyx_t_10 = 0;
    __pyx_t_10 = PyTuple_New(1); if (unlikely(!__pyx_t_10)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 377; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_10);
    PyTuple_SET_ITEM(__pyx_t_10, 0, __pyx_t_9);
    __Pyx_GIVEREF(__pyx_t_9);
    __pyx_t_9 = 0;
    __pyx_t_9 = PyObject_Call(((PyObject *)((PyObject*)(&PyList_Type))), ((PyObject *)__pyx_t_10), NULL); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 377; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_9);
    __Pyx_DECREF(((PyObject *)__pyx_t_10)); __pyx_t_10 = 0;
    __pyx_t_12 = (__pyx_v_i + 1);
    if (__Pyx_SetItemInt(((PyObject *)__pyx_v_d), __pyx_t_12, __pyx_t_9, sizeof(long), PyInt_FromLong) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 377; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
  }

  /* "lgcpp.pyx":378
 *                 k += 1
 *             d[i+1] = list(reversed(sorted(v)))
 *         print >> sys.stderr, "Done"             # <<<<<<<<<<<<<<
 *         return d
 * 
 */
  __pyx_t_9 = __Pyx_GetName(__pyx_m, __pyx_n_s__sys); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 378; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_9);
  __pyx_t_10 = PyObject_GetAttr(__pyx_t_9, __pyx_n_s__stderr); if (unlikely(!__pyx_t_10)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 378; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_10);
  __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
  if (__Pyx_PrintOne(__pyx_t_10, ((PyObject *)__pyx_n_s__Done)) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 378; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;

  /* "lgcpp.pyx":379
 *             d[i+1] = list(reversed(sorted(v)))
 *         print >> sys.stderr, "Done"
 *         return d             # <<<<<<<<<<<<<<
 * 
 *     def setFossilatNodebyMRCA(self, names, int area):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_d));
  __pyx_r = ((PyObject *)__pyx_v_d);
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_AddTraceback("lgcpp.BioGeoTree.ancsplits", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_a);
  __Pyx_XDECREF(__pyx_v_d);
  __Pyx_XDECREF(__pyx_v_v);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_5lgcpp_10BioGeoTree_21setFossilatNodebyMRCA(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_5lgcpp_10BioGeoTree_21setFossilatNodebyMRCA(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_names = 0;
  int __pyx_v_area;
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__names,&__pyx_n_s__area,0};
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("setFossilatNodebyMRCA (wrapper)", 0);
  {
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__names);
        if (likely(values[0])) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__area);
        if (likely(values[1])) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("setFossilatNodebyMRCA", 1, 2, 2, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 381; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "setFossilatNodebyMRCA") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 381; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_names = values[0];
    __pyx_v_area = __Pyx_PyInt_AsInt(values[1]); if (unlikely((__pyx_v_area == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 381; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("setFossilatNodebyMRCA", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 381; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("lgcpp.BioGeoTree.setFossilatNodebyMRCA", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5lgcpp_10BioGeoTree_20setFossilatNodebyMRCA(((struct __pyx_obj_5lgcpp_BioGeoTree *)__pyx_v_self), __pyx_v_names, __pyx_v_area);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "lgcpp.pyx":381
 *         return d
 * 
 *     def setFossilatNodebyMRCA(self, names, int area):             # <<<<<<<<<<<<<<
 *         cdef vector[string] v = vector[string]()
 *         for s in names: v.push_back(string(<char *>s))
 */

static PyObject *__pyx_pf_5lgcpp_10BioGeoTree_20setFossilatNodebyMRCA(struct __pyx_obj_5lgcpp_BioGeoTree *__pyx_v_self, PyObject *__pyx_v_names, int __pyx_v_area) {
  std::vector<std::string> __pyx_v_v;
  PyObject *__pyx_v_s = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  PyObject *(*__pyx_t_3)(PyObject *);
  PyObject *__pyx_t_4 = NULL;
  char *__pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("setFossilatNodebyMRCA", 0);

  /* "lgcpp.pyx":382
 * 
 *     def setFossilatNodebyMRCA(self, names, int area):
 *         cdef vector[string] v = vector[string]()             # <<<<<<<<<<<<<<
 *         for s in names: v.push_back(string(<char *>s))
 *         self.ptr.setFossilatNodeByMRCA(v, area)
 */
  __pyx_v_v = std::vector<std::string>();

  /* "lgcpp.pyx":383
 *     def setFossilatNodebyMRCA(self, names, int area):
 *         cdef vector[string] v = vector[string]()
 *         for s in names: v.push_back(string(<char *>s))             # <<<<<<<<<<<<<<
 *         self.ptr.setFossilatNodeByMRCA(v, area)
 * 
 */
  if (PyList_CheckExact(__pyx_v_names) || PyTuple_CheckExact(__pyx_v_names)) {
    __pyx_t_1 = __pyx_v_names; __Pyx_INCREF(__pyx_t_1); __pyx_t_2 = 0;
    __pyx_t_3 = NULL;
  } else {
    __pyx_t_2 = -1; __pyx_t_1 = PyObject_GetIter(__pyx_v_names); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 383; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = Py_TYPE(__pyx_t_1)->tp_iternext;
  }
  for (;;) {
    if (!__pyx_t_3 && PyList_CheckExact(__pyx_t_1)) {
      if (__pyx_t_2 >= PyList_GET_SIZE(__pyx_t_1)) break;
      __pyx_t_4 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++;
    } else if (!__pyx_t_3 && PyTuple_CheckExact(__pyx_t_1)) {
      if (__pyx_t_2 >= PyTuple_GET_SIZE(__pyx_t_1)) break;
      __pyx_t_4 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++;
    } else {
      __pyx_t_4 = __pyx_t_3(__pyx_t_1);
      if (unlikely(!__pyx_t_4)) {
        if (PyErr_Occurred()) {
          if (likely(PyErr_ExceptionMatches(PyExc_StopIteration))) PyErr_Clear();
          else {__pyx_filename = __pyx_f[0]; __pyx_lineno = 383; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_4);
    }
    __Pyx_XDECREF(__pyx_v_s);
    __pyx_v_s = __pyx_t_4;
    __pyx_t_4 = 0;
    __pyx_t_5 = PyBytes_AsString(__pyx_v_s); if (unlikely((!__pyx_t_5) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 383; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_v_v.push_back(std::string(((char *)__pyx_t_5)));
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "lgcpp.pyx":384
 *         cdef vector[string] v = vector[string]()
 *         for s in names: v.push_back(string(<char *>s))
 *         self.ptr.setFossilatNodeByMRCA(v, area)             # <<<<<<<<<<<<<<
 * 
 *     def setFossilatNodebyMRCA_id(self, Node n, int area):
 */
  __pyx_v_self->ptr->setFossilatNodeByMRCA(__pyx_v_v, __pyx_v_area);

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("lgcpp.BioGeoTree.setFossilatNodebyMRCA", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_s);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_5lgcpp_10BioGeoTree_23setFossilatNodebyMRCA_id(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_5lgcpp_10BioGeoTree_23setFossilatNodebyMRCA_id(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_5lgcpp_Node *__pyx_v_n = 0;
  int __pyx_v_area;
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__n,&__pyx_n_s__area,0};
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("setFossilatNodebyMRCA_id (wrapper)", 0);
  {
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__n);
        if (likely(values[0])) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__area);
        if (likely(values[1])) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("setFossilatNodebyMRCA_id", 1, 2, 2, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 386; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "setFossilatNodebyMRCA_id") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 386; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_n = ((struct __pyx_obj_5lgcpp_Node *)values[0]);
    __pyx_v_area = __Pyx_PyInt_AsInt(values[1]); if (unlikely((__pyx_v_area == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 386; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("setFossilatNodebyMRCA_id", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 386; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("lgcpp.BioGeoTree.setFossilatNodebyMRCA_id", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_n), __pyx_ptype_5lgcpp_Node, 1, "n", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 386; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_pf_5lgcpp_10BioGeoTree_22setFossilatNodebyMRCA_id(((struct __pyx_obj_5lgcpp_BioGeoTree *)__pyx_v_self), __pyx_v_n, __pyx_v_area);
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "lgcpp.pyx":386
 *         self.ptr.setFossilatNodeByMRCA(v, area)
 * 
 *     def setFossilatNodebyMRCA_id(self, Node n, int area):             # <<<<<<<<<<<<<<
 *         self.ptr.setFossilatNodeByMRCA_id(n.ptr, area)
 * 
 */

static PyObject *__pyx_pf_5lgcpp_10BioGeoTree_22setFossilatNodebyMRCA_id(struct __pyx_obj_5lgcpp_BioGeoTree *__pyx_v_self, struct __pyx_obj_5lgcpp_Node *__pyx_v_n, int __pyx_v_area) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("setFossilatNodebyMRCA_id", 0);

  /* "lgcpp.pyx":387
 * 
 *     def setFossilatNodebyMRCA_id(self, Node n, int area):
 *         self.ptr.setFossilatNodeByMRCA_id(n.ptr, area)             # <<<<<<<<<<<<<<
 * 
 *     def setFossilatBranchbyMRCA(self, names, int area, double age):
 */
  __pyx_v_self->ptr->setFossilatNodeByMRCA_id(__pyx_v_n->ptr, __pyx_v_area);

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_5lgcpp_10BioGeoTree_25setFossilatBranchbyMRCA(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_5lgcpp_10BioGeoTree_25setFossilatBranchbyMRCA(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_names = 0;
  int __pyx_v_area;
  double __pyx_v_age;
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__names,&__pyx_n_s__area,&__pyx_n_s__age,0};
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("setFossilatBranchbyMRCA (wrapper)", 0);
  {
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__names);
        if (likely(values[0])) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__area);
        if (likely(values[1])) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("setFossilatBranchbyMRCA", 1, 3, 3, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 389; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  2:
        values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__age);
        if (likely(values[2])) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("setFossilatBranchbyMRCA", 1, 3, 3, 2); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 389; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "setFossilatBranchbyMRCA") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 389; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v_names = values[0];
    __pyx_v_area = __Pyx_PyInt_AsInt(values[1]); if (unlikely((__pyx_v_area == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 389; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    __pyx_v_age = __pyx_PyFloat_AsDouble(values[2]); if (unlikely((__pyx_v_age == (double)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 389; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("setFossilatBranchbyMRCA", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 389; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("lgcpp.BioGeoTree.setFossilatBranchbyMRCA", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5lgcpp_10BioGeoTree_24setFossilatBranchbyMRCA(((struct __pyx_obj_5lgcpp_BioGeoTree *)__pyx_v_self), __pyx_v_names, __pyx_v_area, __pyx_v_age);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "lgcpp.pyx":389
 *         self.ptr.setFossilatNodeByMRCA_id(n.ptr, area)
 * 
 *     def setFossilatBranchbyMRCA(self, names, int area, double age):             # <<<<<<<<<<<<<<
 *         cdef vector[string] v = vector[string]()
 *         for s in names: v.push_back(string(<char *>s))
 */

static PyObject *__pyx_pf_5lgcpp_10BioGeoTree_24setFossilatBranchbyMRCA(struct __pyx_obj_5lgcpp_BioGeoTree *__pyx_v_self, PyObject *__pyx_v_names, int __pyx_v_area, double __pyx_v_age) {
  std::vector<std::string> __pyx_v_v;
  PyObject *__pyx_v_s = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  PyObject *(*__pyx_t_3)(PyObject *);
  PyObject *__pyx_t_4 = NULL;
  char *__pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("setFossilatBranchbyMRCA", 0);

  /* "lgcpp.pyx":390
 * 
 *     def setFossilatBranchbyMRCA(self, names, int area, double age):
 *         cdef vector[string] v = vector[string]()             # <<<<<<<<<<<<<<
 *         for s in names: v.push_back(string(<char *>s))
 *         self.ptr.setFossilatBranchByMRCA(v, area, age)
 */
  __pyx_v_v = std::vector<std::string>();

  /* "lgcpp.pyx":391
 *     def setFossilatBranchbyMRCA(self, names, int area, double age):
 *         cdef vector[string] v = vector[string]()
 *         for s in names: v.push_back(string(<char *>s))             # <<<<<<<<<<<<<<
 *         self.ptr.setFossilatBranchByMRCA(v, area, age)
 * 
 */
  if (PyList_CheckExact(__pyx_v_names) || PyTuple_CheckExact(__pyx_v_names)) {
    __pyx_t_1 = __pyx_v_names; __Pyx_INCREF(__pyx_t_1); __pyx_t_2 = 0;
    __pyx_t_3 = NULL;
  } else {
    __pyx_t_2 = -1; __pyx_t_1 = PyObject_GetIter(__pyx_v_names); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 391; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = Py_TYPE(__pyx_t_1)->tp_iternext;
  }
  for (;;) {
    if (!__pyx_t_3 && PyList_CheckExact(__pyx_t_1)) {
      if (__pyx_t_2 >= PyList_GET_SIZE(__pyx_t_1)) break;
      __pyx_t_4 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++;
    } else if (!__pyx_t_3 && PyTuple_CheckExact(__pyx_t_1)) {
      if (__pyx_t_2 >= PyTuple_GET_SIZE(__pyx_t_1)) break;
      __pyx_t_4 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++;
    } else {
      __pyx_t_4 = __pyx_t_3(__pyx_t_1);
      if (unlikely(!__pyx_t_4)) {
        if (PyErr_Occurred()) {
          if (likely(PyErr_ExceptionMatches(PyExc_StopIteration))) PyErr_Clear();
          else {__pyx_filename = __pyx_f[0]; __pyx_lineno = 391; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_4);
    }
    __Pyx_XDECREF(__pyx_v_s);
    __pyx_v_s = __pyx_t_4;
    __pyx_t_4 = 0;
    __pyx_t_5 = PyBytes_AsString(__pyx_v_s); if (unlikely((!__pyx_t_5) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 391; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_v_v.push_back(std::string(((char *)__pyx_t_5)));
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "lgcpp.pyx":392
 *         cdef vector[string] v = vector[string]()
 *         for s in names: v.push_back(string(<char *>s))
 *         self.ptr.setFossilatBranchByMRCA(v, area, age)             # <<<<<<<<<<<<<<
 * 
 *     def setFossilatBranchbyMRCA_id(self, Node n, int area, double age):
 */
  __pyx_v_self->ptr->setFossilatBranchByMRCA(__pyx_v_v, __pyx_v_area, __pyx_v_age);

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("lgcpp.BioGeoTree.setFossilatBranchbyMRCA", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_s);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_5lgcpp_10BioGeoTree_27setFossilatBranchbyMRCA_id(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_5lgcpp_10BioGeoTree_27setFossilatBranchbyMRCA_id(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_5lgcpp_Node *__pyx_v_n = 0;
  int __pyx_v_area;
  double __pyx_v_age;
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__n,&__pyx_n_s__area,&__pyx_n_s__age,0};
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("setFossilatBranchbyMRCA_id (wrapper)", 0);
  {
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__n);
        if (likely(values[0])) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__area);
        if (likely(values[1])) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("setFossilatBranchbyMRCA_id", 1, 3, 3, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 394; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  2:
        values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__age);
        if (likely(values[2])) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("setFossilatBranchbyMRCA_id", 1, 3, 3, 2); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 394; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "setFossilatBranchbyMRCA_id") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 394; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v_n = ((struct __pyx_obj_5lgcpp_Node *)values[0]);
    __pyx_v_area = __Pyx_PyInt_AsInt(values[1]); if (unlikely((__pyx_v_area == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 394; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    __pyx_v_age = __pyx_PyFloat_AsDouble(values[2]); if (unlikely((__pyx_v_age == (double)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 394; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("setFossilatBranchbyMRCA_id", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 394; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("lgcpp.BioGeoTree.setFossilatBranchbyMRCA_id", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_n), __pyx_ptype_5lgcpp_Node, 1, "n", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 394; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_pf_5lgcpp_10BioGeoTree_26setFossilatBranchbyMRCA_id(((struct __pyx_obj_5lgcpp_BioGeoTree *)__pyx_v_self), __pyx_v_n, __pyx_v_area, __pyx_v_age);
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "lgcpp.pyx":394
 *         self.ptr.setFossilatBranchByMRCA(v, area, age)
 * 
 *     def setFossilatBranchbyMRCA_id(self, Node n, int area, double age):             # <<<<<<<<<<<<<<
 *         self.ptr.setFossilatBranchByMRCA_id(n.ptr, area, age)
 * 
 */

static PyObject *__pyx_pf_5lgcpp_10BioGeoTree_26setFossilatBranchbyMRCA_id(struct __pyx_obj_5lgcpp_BioGeoTree *__pyx_v_self, struct __pyx_obj_5lgcpp_Node *__pyx_v_n, int __pyx_v_area, double __pyx_v_age) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("setFossilatBranchbyMRCA_id", 0);

  /* "lgcpp.pyx":395
 * 
 *     def setFossilatBranchbyMRCA_id(self, Node n, int area, double age):
 *         self.ptr.setFossilatBranchByMRCA_id(n.ptr, area, age)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_v_self->ptr->setFossilatBranchByMRCA_id(__pyx_v_n->ptr, __pyx_v_area, __pyx_v_age);

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_5lgcpp_11InputReader_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_5lgcpp_11InputReader_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return -1;}
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__cinit__", 0))) return -1;
  __pyx_r = __pyx_pf_5lgcpp_11InputReader___cinit__(((struct __pyx_obj_5lgcpp_InputReader *)__pyx_v_self));
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "lgcpp.pyx":418
 *     cdef _InputReader* ptr
 *     ## cdef vector[_Tree*]* trees
 *     def __cinit__(self):             # <<<<<<<<<<<<<<
 *         self.ptr = new _InputReader()
 *         ## self.trees = new vector[_Tree*]()
 */

static int __pyx_pf_5lgcpp_11InputReader___cinit__(struct __pyx_obj_5lgcpp_InputReader *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "lgcpp.pyx":419
 *     ## cdef vector[_Tree*]* trees
 *     def __cinit__(self):
 *         self.ptr = new _InputReader()             # <<<<<<<<<<<<<<
 *         ## self.trees = new vector[_Tree*]()
 *     def __dealloc__(self):
 */
  __pyx_v_self->ptr = new InputReader();

  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static void __pyx_pw_5lgcpp_11InputReader_3__dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pw_5lgcpp_11InputReader_3__dealloc__(PyObject *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_pf_5lgcpp_11InputReader_2__dealloc__(((struct __pyx_obj_5lgcpp_InputReader *)__pyx_v_self));
  __Pyx_RefNannyFinishContext();
}

/* "lgcpp.pyx":421
 *         self.ptr = new _InputReader()
 *         ## self.trees = new vector[_Tree*]()
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         del self.ptr
 * 
 */

static void __pyx_pf_5lgcpp_11InputReader_2__dealloc__(CYTHON_UNUSED struct __pyx_obj_5lgcpp_InputReader *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__", 0);

  /* "lgcpp.pyx":422
 *         ## self.trees = new vector[_Tree*]()
 *     def __dealloc__(self):
 *         del self.ptr             # <<<<<<<<<<<<<<
 * 
 *     def read_treefile(self, filename):
 */
  delete __pyx_v_self->ptr;

  __Pyx_RefNannyFinishContext();
}

/* Python wrapper */
static PyObject *__pyx_pw_5lgcpp_11InputReader_5read_treefile(PyObject *__pyx_v_self, PyObject *__pyx_v_filename); /*proto*/
static PyObject *__pyx_pw_5lgcpp_11InputReader_5read_treefile(PyObject *__pyx_v_self, PyObject *__pyx_v_filename) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("read_treefile (wrapper)", 0);
  __pyx_r = __pyx_pf_5lgcpp_11InputReader_4read_treefile(((struct __pyx_obj_5lgcpp_InputReader *)__pyx_v_self), ((PyObject *)__pyx_v_filename));
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "lgcpp.pyx":424
 *         del self.ptr
 * 
 *     def read_treefile(self, filename):             # <<<<<<<<<<<<<<
 *         cdef string s = string(<char *>filename)
 *         cdef vector[_Tree*] *trees = new vector[_Tree*]() #deref(self.trees)
 */

static PyObject *__pyx_pf_5lgcpp_11InputReader_4read_treefile(struct __pyx_obj_5lgcpp_InputReader *__pyx_v_self, PyObject *__pyx_v_filename) {
  std::string __pyx_v_s;
  std::vector<Tree *> *__pyx_v_trees;
  std::vector<Tree *> __pyx_v_tv;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  char *__pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("read_treefile", 0);

  /* "lgcpp.pyx":425
 * 
 *     def read_treefile(self, filename):
 *         cdef string s = string(<char *>filename)             # <<<<<<<<<<<<<<
 *         cdef vector[_Tree*] *trees = new vector[_Tree*]() #deref(self.trees)
 *         cdef vector[_Tree*] tv
 */
  __pyx_t_1 = PyBytes_AsString(__pyx_v_filename); if (unlikely((!__pyx_t_1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 425; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_s = std::string(((char *)__pyx_t_1));

  /* "lgcpp.pyx":426
 *     def read_treefile(self, filename):
 *         cdef string s = string(<char *>filename)
 *         cdef vector[_Tree*] *trees = new vector[_Tree*]() #deref(self.trees)             # <<<<<<<<<<<<<<
 *         cdef vector[_Tree*] tv
 *         self.ptr.readMultipleTreeFile(<string>s, deref(trees))
 */
  __pyx_v_trees = new std::vector<Tree *>();

  /* "lgcpp.pyx":428
 *         cdef vector[_Tree*] *trees = new vector[_Tree*]() #deref(self.trees)
 *         cdef vector[_Tree*] tv
 *         self.ptr.readMultipleTreeFile(<string>s, deref(trees))             # <<<<<<<<<<<<<<
 *         tv = deref(trees)
 *         print tv.size()
 */
  __pyx_v_self->ptr->readMultipleTreeFile(((std::string)__pyx_v_s), (*__pyx_v_trees));

  /* "lgcpp.pyx":429
 *         cdef vector[_Tree*] tv
 *         self.ptr.readMultipleTreeFile(<string>s, deref(trees))
 *         tv = deref(trees)             # <<<<<<<<<<<<<<
 *         print tv.size()
 */
  __pyx_v_tv = (*__pyx_v_trees);

  /* "lgcpp.pyx":430
 *         self.ptr.readMultipleTreeFile(<string>s, deref(trees))
 *         tv = deref(trees)
 *         print tv.size()             # <<<<<<<<<<<<<<
 */
  __pyx_t_2 = __Pyx_PyInt_FromSize_t(__pyx_v_tv.size()); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 430; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (__Pyx_PrintOne(0, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 430; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("lgcpp.InputReader.read_treefile", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_tp_new_5lgcpp_Superdouble(PyTypeObject *t, PyObject *a, PyObject *k) {
  PyObject *o = (*t->tp_alloc)(t, 0);
  if (!o) return 0;
  if (__pyx_pw_5lgcpp_11Superdouble_1__cinit__(o, a, k) < 0) {
    Py_DECREF(o); o = 0;
  }
  return o;
}

static void __pyx_tp_dealloc_5lgcpp_Superdouble(PyObject *o) {
  (*Py_TYPE(o)->tp_free)(o);
}

static PyMethodDef __pyx_methods_5lgcpp_Superdouble[] = {
  {0, 0, 0, 0}
};

static PyNumberMethods __pyx_tp_as_number_Superdouble = {
  0, /*nb_add*/
  0, /*nb_subtract*/
  0, /*nb_multiply*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_divide*/
  #endif
  0, /*nb_remainder*/
  0, /*nb_divmod*/
  0, /*nb_power*/
  0, /*nb_negative*/
  0, /*nb_positive*/
  0, /*nb_absolute*/
  0, /*nb_nonzero*/
  0, /*nb_invert*/
  0, /*nb_lshift*/
  0, /*nb_rshift*/
  0, /*nb_and*/
  0, /*nb_xor*/
  0, /*nb_or*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_coerce*/
  #endif
  0, /*nb_int*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_long*/
  #else
  0, /*reserved*/
  #endif
  __pyx_pw_5lgcpp_11Superdouble_5__float__, /*nb_float*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_oct*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*nb_hex*/
  #endif
  0, /*nb_inplace_add*/
  0, /*nb_inplace_subtract*/
  0, /*nb_inplace_multiply*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_inplace_divide*/
  #endif
  0, /*nb_inplace_remainder*/
  0, /*nb_inplace_power*/
  0, /*nb_inplace_lshift*/
  0, /*nb_inplace_rshift*/
  0, /*nb_inplace_and*/
  0, /*nb_inplace_xor*/
  0, /*nb_inplace_or*/
  0, /*nb_floor_divide*/
  0, /*nb_true_divide*/
  0, /*nb_inplace_floor_divide*/
  0, /*nb_inplace_true_divide*/
  #if PY_VERSION_HEX >= 0x02050000
  0, /*nb_index*/
  #endif
};

static PySequenceMethods __pyx_tp_as_sequence_Superdouble = {
  0, /*sq_length*/
  0, /*sq_concat*/
  0, /*sq_repeat*/
  0, /*sq_item*/
  0, /*sq_slice*/
  0, /*sq_ass_item*/
  0, /*sq_ass_slice*/
  0, /*sq_contains*/
  0, /*sq_inplace_concat*/
  0, /*sq_inplace_repeat*/
};

static PyMappingMethods __pyx_tp_as_mapping_Superdouble = {
  0, /*mp_length*/
  0, /*mp_subscript*/
  0, /*mp_ass_subscript*/
};

static PyBufferProcs __pyx_tp_as_buffer_Superdouble = {
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getreadbuffer*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getwritebuffer*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getsegcount*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getcharbuffer*/
  #endif
  #if PY_VERSION_HEX >= 0x02060000
  0, /*bf_getbuffer*/
  #endif
  #if PY_VERSION_HEX >= 0x02060000
  0, /*bf_releasebuffer*/
  #endif
};

static PyTypeObject __pyx_type_5lgcpp_Superdouble = {
  PyVarObject_HEAD_INIT(0, 0)
  __Pyx_NAMESTR("lgcpp.Superdouble"), /*tp_name*/
  sizeof(struct __pyx_obj_5lgcpp_Superdouble), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_5lgcpp_Superdouble, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #else
  0, /*reserved*/
  #endif
  0, /*tp_repr*/
  &__pyx_tp_as_number_Superdouble, /*tp_as_number*/
  &__pyx_tp_as_sequence_Superdouble, /*tp_as_sequence*/
  &__pyx_tp_as_mapping_Superdouble, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  __pyx_pw_5lgcpp_11Superdouble_3__str__, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  &__pyx_tp_as_buffer_Superdouble, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_5lgcpp_Superdouble, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_5lgcpp_Superdouble, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  #if PY_VERSION_HEX >= 0x02060000
  0, /*tp_version_tag*/
  #endif
};

static PyObject *__pyx_tp_new_5lgcpp_Node(PyTypeObject *t, PyObject *a, PyObject *k) {
  PyObject *o = (*t->tp_alloc)(t, 0);
  if (!o) return 0;
  if (__pyx_pw_5lgcpp_4Node_1__cinit__(o, __pyx_empty_tuple, NULL) < 0) {
    Py_DECREF(o); o = 0;
  }
  return o;
}

static void __pyx_tp_dealloc_5lgcpp_Node(PyObject *o) {
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    ++Py_REFCNT(o);
    __pyx_pw_5lgcpp_4Node_3__dealloc__(o);
    if (PyErr_Occurred()) PyErr_WriteUnraisable(o);
    --Py_REFCNT(o);
    PyErr_Restore(etype, eval, etb);
  }
  (*Py_TYPE(o)->tp_free)(o);
}

static PyMethodDef __pyx_methods_5lgcpp_Node[] = {
  {__Pyx_NAMESTR("getName"), (PyCFunction)__pyx_pw_5lgcpp_4Node_5getName, METH_NOARGS, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("getNumber"), (PyCFunction)__pyx_pw_5lgcpp_4Node_7getNumber, METH_NOARGS, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("getParent"), (PyCFunction)__pyx_pw_5lgcpp_4Node_9getParent, METH_NOARGS, __Pyx_DOCSTR(0)},
  {0, 0, 0, 0}
};

static PyNumberMethods __pyx_tp_as_number_Node = {
  0, /*nb_add*/
  0, /*nb_subtract*/
  0, /*nb_multiply*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_divide*/
  #endif
  0, /*nb_remainder*/
  0, /*nb_divmod*/
  0, /*nb_power*/
  0, /*nb_negative*/
  0, /*nb_positive*/
  0, /*nb_absolute*/
  0, /*nb_nonzero*/
  0, /*nb_invert*/
  0, /*nb_lshift*/
  0, /*nb_rshift*/
  0, /*nb_and*/
  0, /*nb_xor*/
  0, /*nb_or*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_coerce*/
  #endif
  0, /*nb_int*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_long*/
  #else
  0, /*reserved*/
  #endif
  0, /*nb_float*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_oct*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*nb_hex*/
  #endif
  0, /*nb_inplace_add*/
  0, /*nb_inplace_subtract*/
  0, /*nb_inplace_multiply*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_inplace_divide*/
  #endif
  0, /*nb_inplace_remainder*/
  0, /*nb_inplace_power*/
  0, /*nb_inplace_lshift*/
  0, /*nb_inplace_rshift*/
  0, /*nb_inplace_and*/
  0, /*nb_inplace_xor*/
  0, /*nb_inplace_or*/
  0, /*nb_floor_divide*/
  0, /*nb_true_divide*/
  0, /*nb_inplace_floor_divide*/
  0, /*nb_inplace_true_divide*/
  #if PY_VERSION_HEX >= 0x02050000
  0, /*nb_index*/
  #endif
};

static PySequenceMethods __pyx_tp_as_sequence_Node = {
  0, /*sq_length*/
  0, /*sq_concat*/
  0, /*sq_repeat*/
  0, /*sq_item*/
  0, /*sq_slice*/
  0, /*sq_ass_item*/
  0, /*sq_ass_slice*/
  0, /*sq_contains*/
  0, /*sq_inplace_concat*/
  0, /*sq_inplace_repeat*/
};

static PyMappingMethods __pyx_tp_as_mapping_Node = {
  0, /*mp_length*/
  0, /*mp_subscript*/
  0, /*mp_ass_subscript*/
};

static PyBufferProcs __pyx_tp_as_buffer_Node = {
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getreadbuffer*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getwritebuffer*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getsegcount*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getcharbuffer*/
  #endif
  #if PY_VERSION_HEX >= 0x02060000
  0, /*bf_getbuffer*/
  #endif
  #if PY_VERSION_HEX >= 0x02060000
  0, /*bf_releasebuffer*/
  #endif
};

static PyTypeObject __pyx_type_5lgcpp_Node = {
  PyVarObject_HEAD_INIT(0, 0)
  __Pyx_NAMESTR("lgcpp.Node"), /*tp_name*/
  sizeof(struct __pyx_obj_5lgcpp_Node), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_5lgcpp_Node, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #else
  0, /*reserved*/
  #endif
  0, /*tp_repr*/
  &__pyx_tp_as_number_Node, /*tp_as_number*/
  &__pyx_tp_as_sequence_Node, /*tp_as_sequence*/
  &__pyx_tp_as_mapping_Node, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  &__pyx_tp_as_buffer_Node, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_5lgcpp_Node, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_5lgcpp_Node, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  #if PY_VERSION_HEX >= 0x02060000
  0, /*tp_version_tag*/
  #endif
};

static PyObject *__pyx_tp_new_5lgcpp_BranchSegment(PyTypeObject *t, PyObject *a, PyObject *k) {
  PyObject *o = (*t->tp_alloc)(t, 0);
  if (!o) return 0;
  if (__pyx_pw_5lgcpp_13BranchSegment_1__cinit__(o, __pyx_empty_tuple, NULL) < 0) {
    Py_DECREF(o); o = 0;
  }
  return o;
}

static void __pyx_tp_dealloc_5lgcpp_BranchSegment(PyObject *o) {
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    ++Py_REFCNT(o);
    __pyx_pw_5lgcpp_13BranchSegment_3__dealloc__(o);
    if (PyErr_Occurred()) PyErr_WriteUnraisable(o);
    --Py_REFCNT(o);
    PyErr_Restore(etype, eval, etb);
  }
  (*Py_TYPE(o)->tp_free)(o);
}

static PyMethodDef __pyx_methods_5lgcpp_BranchSegment[] = {
  {0, 0, 0, 0}
};

static PyNumberMethods __pyx_tp_as_number_BranchSegment = {
  0, /*nb_add*/
  0, /*nb_subtract*/
  0, /*nb_multiply*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_divide*/
  #endif
  0, /*nb_remainder*/
  0, /*nb_divmod*/
  0, /*nb_power*/
  0, /*nb_negative*/
  0, /*nb_positive*/
  0, /*nb_absolute*/
  0, /*nb_nonzero*/
  0, /*nb_invert*/
  0, /*nb_lshift*/
  0, /*nb_rshift*/
  0, /*nb_and*/
  0, /*nb_xor*/
  0, /*nb_or*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_coerce*/
  #endif
  0, /*nb_int*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_long*/
  #else
  0, /*reserved*/
  #endif
  0, /*nb_float*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_oct*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*nb_hex*/
  #endif
  0, /*nb_inplace_add*/
  0, /*nb_inplace_subtract*/
  0, /*nb_inplace_multiply*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_inplace_divide*/
  #endif
  0, /*nb_inplace_remainder*/
  0, /*nb_inplace_power*/
  0, /*nb_inplace_lshift*/
  0, /*nb_inplace_rshift*/
  0, /*nb_inplace_and*/
  0, /*nb_inplace_xor*/
  0, /*nb_inplace_or*/
  0, /*nb_floor_divide*/
  0, /*nb_true_divide*/
  0, /*nb_inplace_floor_divide*/
  0, /*nb_inplace_true_divide*/
  #if PY_VERSION_HEX >= 0x02050000
  0, /*nb_index*/
  #endif
};

static PySequenceMethods __pyx_tp_as_sequence_BranchSegment = {
  0, /*sq_length*/
  0, /*sq_concat*/
  0, /*sq_repeat*/
  0, /*sq_item*/
  0, /*sq_slice*/
  0, /*sq_ass_item*/
  0, /*sq_ass_slice*/
  0, /*sq_contains*/
  0, /*sq_inplace_concat*/
  0, /*sq_inplace_repeat*/
};

static PyMappingMethods __pyx_tp_as_mapping_BranchSegment = {
  0, /*mp_length*/
  0, /*mp_subscript*/
  0, /*mp_ass_subscript*/
};

static PyBufferProcs __pyx_tp_as_buffer_BranchSegment = {
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getreadbuffer*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getwritebuffer*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getsegcount*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getcharbuffer*/
  #endif
  #if PY_VERSION_HEX >= 0x02060000
  0, /*bf_getbuffer*/
  #endif
  #if PY_VERSION_HEX >= 0x02060000
  0, /*bf_releasebuffer*/
  #endif
};

static PyTypeObject __pyx_type_5lgcpp_BranchSegment = {
  PyVarObject_HEAD_INIT(0, 0)
  __Pyx_NAMESTR("lgcpp.BranchSegment"), /*tp_name*/
  sizeof(struct __pyx_obj_5lgcpp_BranchSegment), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_5lgcpp_BranchSegment, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #else
  0, /*reserved*/
  #endif
  0, /*tp_repr*/
  &__pyx_tp_as_number_BranchSegment, /*tp_as_number*/
  &__pyx_tp_as_sequence_BranchSegment, /*tp_as_sequence*/
  &__pyx_tp_as_mapping_BranchSegment, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  &__pyx_tp_as_buffer_BranchSegment, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_5lgcpp_BranchSegment, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_5lgcpp_BranchSegment, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  #if PY_VERSION_HEX >= 0x02060000
  0, /*tp_version_tag*/
  #endif
};

static PyObject *__pyx_tp_new_5lgcpp_RateModel(PyTypeObject *t, PyObject *a, PyObject *k) {
  PyObject *o = (*t->tp_alloc)(t, 0);
  if (!o) return 0;
  if (__pyx_pw_5lgcpp_9RateModel_1__cinit__(o, a, k) < 0) {
    Py_DECREF(o); o = 0;
  }
  return o;
}

static void __pyx_tp_dealloc_5lgcpp_RateModel(PyObject *o) {
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    ++Py_REFCNT(o);
    __pyx_pw_5lgcpp_9RateModel_3__dealloc__(o);
    if (PyErr_Occurred()) PyErr_WriteUnraisable(o);
    --Py_REFCNT(o);
    PyErr_Restore(etype, eval, etb);
  }
  (*Py_TYPE(o)->tp_free)(o);
}

static PyMethodDef __pyx_methods_5lgcpp_RateModel[] = {
  {__Pyx_NAMESTR("set_nthreads"), (PyCFunction)__pyx_pw_5lgcpp_9RateModel_5set_nthreads, METH_O, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("get_nthreads"), (PyCFunction)__pyx_pw_5lgcpp_9RateModel_7get_nthreads, METH_NOARGS, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("setup_dists"), (PyCFunction)__pyx_pw_5lgcpp_9RateModel_9setup_dists, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("setup_D"), (PyCFunction)__pyx_pw_5lgcpp_9RateModel_11setup_D, METH_O, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("setup_E"), (PyCFunction)__pyx_pw_5lgcpp_9RateModel_13setup_E, METH_O, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("setup_Q"), (PyCFunction)__pyx_pw_5lgcpp_9RateModel_15setup_Q, METH_NOARGS, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("setup_Dmask"), (PyCFunction)__pyx_pw_5lgcpp_9RateModel_17setup_Dmask, METH_NOARGS, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("set_Dmask_cell"), (PyCFunction)__pyx_pw_5lgcpp_9RateModel_19set_Dmask_cell, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(0)},
  {0, 0, 0, 0}
};

static PyNumberMethods __pyx_tp_as_number_RateModel = {
  0, /*nb_add*/
  0, /*nb_subtract*/
  0, /*nb_multiply*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_divide*/
  #endif
  0, /*nb_remainder*/
  0, /*nb_divmod*/
  0, /*nb_power*/
  0, /*nb_negative*/
  0, /*nb_positive*/
  0, /*nb_absolute*/
  0, /*nb_nonzero*/
  0, /*nb_invert*/
  0, /*nb_lshift*/
  0, /*nb_rshift*/
  0, /*nb_and*/
  0, /*nb_xor*/
  0, /*nb_or*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_coerce*/
  #endif
  0, /*nb_int*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_long*/
  #else
  0, /*reserved*/
  #endif
  0, /*nb_float*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_oct*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*nb_hex*/
  #endif
  0, /*nb_inplace_add*/
  0, /*nb_inplace_subtract*/
  0, /*nb_inplace_multiply*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_inplace_divide*/
  #endif
  0, /*nb_inplace_remainder*/
  0, /*nb_inplace_power*/
  0, /*nb_inplace_lshift*/
  0, /*nb_inplace_rshift*/
  0, /*nb_inplace_and*/
  0, /*nb_inplace_xor*/
  0, /*nb_inplace_or*/
  0, /*nb_floor_divide*/
  0, /*nb_true_divide*/
  0, /*nb_inplace_floor_divide*/
  0, /*nb_inplace_true_divide*/
  #if PY_VERSION_HEX >= 0x02050000
  0, /*nb_index*/
  #endif
};

static PySequenceMethods __pyx_tp_as_sequence_RateModel = {
  0, /*sq_length*/
  0, /*sq_concat*/
  0, /*sq_repeat*/
  0, /*sq_item*/
  0, /*sq_slice*/
  0, /*sq_ass_item*/
  0, /*sq_ass_slice*/
  0, /*sq_contains*/
  0, /*sq_inplace_concat*/
  0, /*sq_inplace_repeat*/
};

static PyMappingMethods __pyx_tp_as_mapping_RateModel = {
  0, /*mp_length*/
  0, /*mp_subscript*/
  0, /*mp_ass_subscript*/
};

static PyBufferProcs __pyx_tp_as_buffer_RateModel = {
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getreadbuffer*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getwritebuffer*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getsegcount*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getcharbuffer*/
  #endif
  #if PY_VERSION_HEX >= 0x02060000
  0, /*bf_getbuffer*/
  #endif
  #if PY_VERSION_HEX >= 0x02060000
  0, /*bf_releasebuffer*/
  #endif
};

static PyTypeObject __pyx_type_5lgcpp_RateModel = {
  PyVarObject_HEAD_INIT(0, 0)
  __Pyx_NAMESTR("lgcpp.RateModel"), /*tp_name*/
  sizeof(struct __pyx_obj_5lgcpp_RateModel), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_5lgcpp_RateModel, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #else
  0, /*reserved*/
  #endif
  0, /*tp_repr*/
  &__pyx_tp_as_number_RateModel, /*tp_as_number*/
  &__pyx_tp_as_sequence_RateModel, /*tp_as_sequence*/
  &__pyx_tp_as_mapping_RateModel, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  &__pyx_tp_as_buffer_RateModel, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_5lgcpp_RateModel, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_5lgcpp_RateModel, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  #if PY_VERSION_HEX >= 0x02060000
  0, /*tp_version_tag*/
  #endif
};

static PyObject *__pyx_tp_new_5lgcpp_Tree(PyTypeObject *t, PyObject *a, PyObject *k) {
  PyObject *o = (*t->tp_alloc)(t, 0);
  if (!o) return 0;
  if (__pyx_pw_5lgcpp_4Tree_1__cinit__(o, __pyx_empty_tuple, NULL) < 0) {
    Py_DECREF(o); o = 0;
  }
  return o;
}

static void __pyx_tp_dealloc_5lgcpp_Tree(PyObject *o) {
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    ++Py_REFCNT(o);
    __pyx_pw_5lgcpp_4Tree_3__dealloc__(o);
    if (PyErr_Occurred()) PyErr_WriteUnraisable(o);
    --Py_REFCNT(o);
    PyErr_Restore(etype, eval, etb);
  }
  (*Py_TYPE(o)->tp_free)(o);
}

static PyMethodDef __pyx_methods_5lgcpp_Tree[] = {
  {__Pyx_NAMESTR("getNodeCount"), (PyCFunction)__pyx_pw_5lgcpp_4Tree_5getNodeCount, METH_NOARGS, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("getExternalNodeCount"), (PyCFunction)__pyx_pw_5lgcpp_4Tree_7getExternalNodeCount, METH_NOARGS, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("getInternalNodeCount"), (PyCFunction)__pyx_pw_5lgcpp_4Tree_9getInternalNodeCount, METH_NOARGS, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("getExternalNode"), (PyCFunction)__pyx_pw_5lgcpp_4Tree_11getExternalNode, METH_O, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("getInternalNode"), (PyCFunction)__pyx_pw_5lgcpp_4Tree_13getInternalNode, METH_O, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("getMRCA"), (PyCFunction)__pyx_pw_5lgcpp_4Tree_15getMRCA, METH_O, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("internalNodes"), (PyCFunction)__pyx_pw_5lgcpp_4Tree_17internalNodes, METH_NOARGS, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("newick"), (PyCFunction)__pyx_pw_5lgcpp_4Tree_19newick, METH_NOARGS, __Pyx_DOCSTR(0)},
  {0, 0, 0, 0}
};

static PyNumberMethods __pyx_tp_as_number_Tree = {
  0, /*nb_add*/
  0, /*nb_subtract*/
  0, /*nb_multiply*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_divide*/
  #endif
  0, /*nb_remainder*/
  0, /*nb_divmod*/
  0, /*nb_power*/
  0, /*nb_negative*/
  0, /*nb_positive*/
  0, /*nb_absolute*/
  0, /*nb_nonzero*/
  0, /*nb_invert*/
  0, /*nb_lshift*/
  0, /*nb_rshift*/
  0, /*nb_and*/
  0, /*nb_xor*/
  0, /*nb_or*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_coerce*/
  #endif
  0, /*nb_int*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_long*/
  #else
  0, /*reserved*/
  #endif
  0, /*nb_float*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_oct*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*nb_hex*/
  #endif
  0, /*nb_inplace_add*/
  0, /*nb_inplace_subtract*/
  0, /*nb_inplace_multiply*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_inplace_divide*/
  #endif
  0, /*nb_inplace_remainder*/
  0, /*nb_inplace_power*/
  0, /*nb_inplace_lshift*/
  0, /*nb_inplace_rshift*/
  0, /*nb_inplace_and*/
  0, /*nb_inplace_xor*/
  0, /*nb_inplace_or*/
  0, /*nb_floor_divide*/
  0, /*nb_true_divide*/
  0, /*nb_inplace_floor_divide*/
  0, /*nb_inplace_true_divide*/
  #if PY_VERSION_HEX >= 0x02050000
  0, /*nb_index*/
  #endif
};

static PySequenceMethods __pyx_tp_as_sequence_Tree = {
  0, /*sq_length*/
  0, /*sq_concat*/
  0, /*sq_repeat*/
  0, /*sq_item*/
  0, /*sq_slice*/
  0, /*sq_ass_item*/
  0, /*sq_ass_slice*/
  0, /*sq_contains*/
  0, /*sq_inplace_concat*/
  0, /*sq_inplace_repeat*/
};

static PyMappingMethods __pyx_tp_as_mapping_Tree = {
  0, /*mp_length*/
  0, /*mp_subscript*/
  0, /*mp_ass_subscript*/
};

static PyBufferProcs __pyx_tp_as_buffer_Tree = {
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getreadbuffer*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getwritebuffer*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getsegcount*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getcharbuffer*/
  #endif
  #if PY_VERSION_HEX >= 0x02060000
  0, /*bf_getbuffer*/
  #endif
  #if PY_VERSION_HEX >= 0x02060000
  0, /*bf_releasebuffer*/
  #endif
};

static PyTypeObject __pyx_type_5lgcpp_Tree = {
  PyVarObject_HEAD_INIT(0, 0)
  __Pyx_NAMESTR("lgcpp.Tree"), /*tp_name*/
  sizeof(struct __pyx_obj_5lgcpp_Tree), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_5lgcpp_Tree, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #else
  0, /*reserved*/
  #endif
  0, /*tp_repr*/
  &__pyx_tp_as_number_Tree, /*tp_as_number*/
  &__pyx_tp_as_sequence_Tree, /*tp_as_sequence*/
  &__pyx_tp_as_mapping_Tree, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  &__pyx_tp_as_buffer_Tree, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_5lgcpp_Tree, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_5lgcpp_Tree, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  #if PY_VERSION_HEX >= 0x02060000
  0, /*tp_version_tag*/
  #endif
};

static PyObject *__pyx_tp_new_5lgcpp_BioGeoTree(PyTypeObject *t, PyObject *a, PyObject *k) {
  PyObject *o = (*t->tp_alloc)(t, 0);
  if (!o) return 0;
  if (__pyx_pw_5lgcpp_10BioGeoTree_1__cinit__(o, a, k) < 0) {
    Py_DECREF(o); o = 0;
  }
  return o;
}

static void __pyx_tp_dealloc_5lgcpp_BioGeoTree(PyObject *o) {
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    ++Py_REFCNT(o);
    __pyx_pw_5lgcpp_10BioGeoTree_3__dealloc__(o);
    if (PyErr_Occurred()) PyErr_WriteUnraisable(o);
    --Py_REFCNT(o);
    PyErr_Restore(etype, eval, etb);
  }
  (*Py_TYPE(o)->tp_free)(o);
}

static PyMethodDef __pyx_methods_5lgcpp_BioGeoTree[] = {
  {__Pyx_NAMESTR("set_store_p_matrices"), (PyCFunction)__pyx_pw_5lgcpp_10BioGeoTree_5set_store_p_matrices, METH_O, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("set_use_stored_matrices"), (PyCFunction)__pyx_pw_5lgcpp_10BioGeoTree_7set_use_stored_matrices, METH_O, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("update_default_model"), (PyCFunction)__pyx_pw_5lgcpp_10BioGeoTree_9update_default_model, METH_O, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("set_default_model"), (PyCFunction)__pyx_pw_5lgcpp_10BioGeoTree_11set_default_model, METH_O, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("set_excluded_dist"), (PyCFunction)__pyx_pw_5lgcpp_10BioGeoTree_13set_excluded_dist, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("set_tip_conditionals"), (PyCFunction)__pyx_pw_5lgcpp_10BioGeoTree_15set_tip_conditionals, METH_O, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("optimize_global_dispersal_extinction"), (PyCFunction)__pyx_pw_5lgcpp_10BioGeoTree_17optimize_global_dispersal_extinction, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("ancsplits"), (PyCFunction)__pyx_pw_5lgcpp_10BioGeoTree_19ancsplits, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("setFossilatNodebyMRCA"), (PyCFunction)__pyx_pw_5lgcpp_10BioGeoTree_21setFossilatNodebyMRCA, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("setFossilatNodebyMRCA_id"), (PyCFunction)__pyx_pw_5lgcpp_10BioGeoTree_23setFossilatNodebyMRCA_id, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("setFossilatBranchbyMRCA"), (PyCFunction)__pyx_pw_5lgcpp_10BioGeoTree_25setFossilatBranchbyMRCA, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("setFossilatBranchbyMRCA_id"), (PyCFunction)__pyx_pw_5lgcpp_10BioGeoTree_27setFossilatBranchbyMRCA_id, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(0)},
  {0, 0, 0, 0}
};

static PyNumberMethods __pyx_tp_as_number_BioGeoTree = {
  0, /*nb_add*/
  0, /*nb_subtract*/
  0, /*nb_multiply*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_divide*/
  #endif
  0, /*nb_remainder*/
  0, /*nb_divmod*/
  0, /*nb_power*/
  0, /*nb_negative*/
  0, /*nb_positive*/
  0, /*nb_absolute*/
  0, /*nb_nonzero*/
  0, /*nb_invert*/
  0, /*nb_lshift*/
  0, /*nb_rshift*/
  0, /*nb_and*/
  0, /*nb_xor*/
  0, /*nb_or*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_coerce*/
  #endif
  0, /*nb_int*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_long*/
  #else
  0, /*reserved*/
  #endif
  0, /*nb_float*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_oct*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*nb_hex*/
  #endif
  0, /*nb_inplace_add*/
  0, /*nb_inplace_subtract*/
  0, /*nb_inplace_multiply*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_inplace_divide*/
  #endif
  0, /*nb_inplace_remainder*/
  0, /*nb_inplace_power*/
  0, /*nb_inplace_lshift*/
  0, /*nb_inplace_rshift*/
  0, /*nb_inplace_and*/
  0, /*nb_inplace_xor*/
  0, /*nb_inplace_or*/
  0, /*nb_floor_divide*/
  0, /*nb_true_divide*/
  0, /*nb_inplace_floor_divide*/
  0, /*nb_inplace_true_divide*/
  #if PY_VERSION_HEX >= 0x02050000
  0, /*nb_index*/
  #endif
};

static PySequenceMethods __pyx_tp_as_sequence_BioGeoTree = {
  0, /*sq_length*/
  0, /*sq_concat*/
  0, /*sq_repeat*/
  0, /*sq_item*/
  0, /*sq_slice*/
  0, /*sq_ass_item*/
  0, /*sq_ass_slice*/
  0, /*sq_contains*/
  0, /*sq_inplace_concat*/
  0, /*sq_inplace_repeat*/
};

static PyMappingMethods __pyx_tp_as_mapping_BioGeoTree = {
  0, /*mp_length*/
  0, /*mp_subscript*/
  0, /*mp_ass_subscript*/
};

static PyBufferProcs __pyx_tp_as_buffer_BioGeoTree = {
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getreadbuffer*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getwritebuffer*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getsegcount*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getcharbuffer*/
  #endif
  #if PY_VERSION_HEX >= 0x02060000
  0, /*bf_getbuffer*/
  #endif
  #if PY_VERSION_HEX >= 0x02060000
  0, /*bf_releasebuffer*/
  #endif
};

static PyTypeObject __pyx_type_5lgcpp_BioGeoTree = {
  PyVarObject_HEAD_INIT(0, 0)
  __Pyx_NAMESTR("lgcpp.BioGeoTree"), /*tp_name*/
  sizeof(struct __pyx_obj_5lgcpp_BioGeoTree), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_5lgcpp_BioGeoTree, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #else
  0, /*reserved*/
  #endif
  0, /*tp_repr*/
  &__pyx_tp_as_number_BioGeoTree, /*tp_as_number*/
  &__pyx_tp_as_sequence_BioGeoTree, /*tp_as_sequence*/
  &__pyx_tp_as_mapping_BioGeoTree, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  &__pyx_tp_as_buffer_BioGeoTree, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_5lgcpp_BioGeoTree, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_5lgcpp_BioGeoTree, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  #if PY_VERSION_HEX >= 0x02060000
  0, /*tp_version_tag*/
  #endif
};

static PyObject *__pyx_tp_new_5lgcpp_InputReader(PyTypeObject *t, PyObject *a, PyObject *k) {
  PyObject *o = (*t->tp_alloc)(t, 0);
  if (!o) return 0;
  if (__pyx_pw_5lgcpp_11InputReader_1__cinit__(o, __pyx_empty_tuple, NULL) < 0) {
    Py_DECREF(o); o = 0;
  }
  return o;
}

static void __pyx_tp_dealloc_5lgcpp_InputReader(PyObject *o) {
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    ++Py_REFCNT(o);
    __pyx_pw_5lgcpp_11InputReader_3__dealloc__(o);
    if (PyErr_Occurred()) PyErr_WriteUnraisable(o);
    --Py_REFCNT(o);
    PyErr_Restore(etype, eval, etb);
  }
  (*Py_TYPE(o)->tp_free)(o);
}

static PyMethodDef __pyx_methods_5lgcpp_InputReader[] = {
  {__Pyx_NAMESTR("read_treefile"), (PyCFunction)__pyx_pw_5lgcpp_11InputReader_5read_treefile, METH_O, __Pyx_DOCSTR(0)},
  {0, 0, 0, 0}
};

static PyNumberMethods __pyx_tp_as_number_InputReader = {
  0, /*nb_add*/
  0, /*nb_subtract*/
  0, /*nb_multiply*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_divide*/
  #endif
  0, /*nb_remainder*/
  0, /*nb_divmod*/
  0, /*nb_power*/
  0, /*nb_negative*/
  0, /*nb_positive*/
  0, /*nb_absolute*/
  0, /*nb_nonzero*/
  0, /*nb_invert*/
  0, /*nb_lshift*/
  0, /*nb_rshift*/
  0, /*nb_and*/
  0, /*nb_xor*/
  0, /*nb_or*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_coerce*/
  #endif
  0, /*nb_int*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_long*/
  #else
  0, /*reserved*/
  #endif
  0, /*nb_float*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_oct*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*nb_hex*/
  #endif
  0, /*nb_inplace_add*/
  0, /*nb_inplace_subtract*/
  0, /*nb_inplace_multiply*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_inplace_divide*/
  #endif
  0, /*nb_inplace_remainder*/
  0, /*nb_inplace_power*/
  0, /*nb_inplace_lshift*/
  0, /*nb_inplace_rshift*/
  0, /*nb_inplace_and*/
  0, /*nb_inplace_xor*/
  0, /*nb_inplace_or*/
  0, /*nb_floor_divide*/
  0, /*nb_true_divide*/
  0, /*nb_inplace_floor_divide*/
  0, /*nb_inplace_true_divide*/
  #if PY_VERSION_HEX >= 0x02050000
  0, /*nb_index*/
  #endif
};

static PySequenceMethods __pyx_tp_as_sequence_InputReader = {
  0, /*sq_length*/
  0, /*sq_concat*/
  0, /*sq_repeat*/
  0, /*sq_item*/
  0, /*sq_slice*/
  0, /*sq_ass_item*/
  0, /*sq_ass_slice*/
  0, /*sq_contains*/
  0, /*sq_inplace_concat*/
  0, /*sq_inplace_repeat*/
};

static PyMappingMethods __pyx_tp_as_mapping_InputReader = {
  0, /*mp_length*/
  0, /*mp_subscript*/
  0, /*mp_ass_subscript*/
};

static PyBufferProcs __pyx_tp_as_buffer_InputReader = {
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getreadbuffer*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getwritebuffer*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getsegcount*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getcharbuffer*/
  #endif
  #if PY_VERSION_HEX >= 0x02060000
  0, /*bf_getbuffer*/
  #endif
  #if PY_VERSION_HEX >= 0x02060000
  0, /*bf_releasebuffer*/
  #endif
};

static PyTypeObject __pyx_type_5lgcpp_InputReader = {
  PyVarObject_HEAD_INIT(0, 0)
  __Pyx_NAMESTR("lgcpp.InputReader"), /*tp_name*/
  sizeof(struct __pyx_obj_5lgcpp_InputReader), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_5lgcpp_InputReader, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #else
  0, /*reserved*/
  #endif
  0, /*tp_repr*/
  &__pyx_tp_as_number_InputReader, /*tp_as_number*/
  &__pyx_tp_as_sequence_InputReader, /*tp_as_sequence*/
  &__pyx_tp_as_mapping_InputReader, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  &__pyx_tp_as_buffer_InputReader, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_5lgcpp_InputReader, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_5lgcpp_InputReader, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  #if PY_VERSION_HEX >= 0x02060000
  0, /*tp_version_tag*/
  #endif
};

static PyMethodDef __pyx_methods[] = {
  {0, 0, 0, 0}
};

#if PY_MAJOR_VERSION >= 3
static struct PyModuleDef __pyx_moduledef = {
    PyModuleDef_HEAD_INIT,
    __Pyx_NAMESTR("lgcpp"),
    0, /* m_doc */
    -1, /* m_size */
    __pyx_methods /* m_methods */,
    NULL, /* m_reload */
    NULL, /* m_traverse */
    NULL, /* m_clear */
    NULL /* m_free */
};
#endif

static __Pyx_StringTabEntry __pyx_string_tab[] = {
  {&__pyx_kp_s_1, __pyx_k_1, sizeof(__pyx_k_1), 0, 0, 1, 0},
  {&__pyx_kp_s_2, __pyx_k_2, sizeof(__pyx_k_2), 0, 0, 1, 0},
  {&__pyx_kp_s_3, __pyx_k_3, sizeof(__pyx_k_3), 0, 0, 1, 0},
  {&__pyx_kp_s_4, __pyx_k_4, sizeof(__pyx_k_4), 0, 0, 1, 0},
  {&__pyx_kp_s_5, __pyx_k_5, sizeof(__pyx_k_5), 0, 0, 1, 0},
  {&__pyx_kp_s_6, __pyx_k_6, sizeof(__pyx_k_6), 0, 0, 1, 0},
  {&__pyx_kp_s_9, __pyx_k_9, sizeof(__pyx_k_9), 0, 0, 1, 0},
  {&__pyx_n_s__Done, __pyx_k__Done, sizeof(__pyx_k__Done), 0, 0, 1, 1},
  {&__pyx_n_s____main__, __pyx_k____main__, sizeof(__pyx_k____main__), 0, 0, 1, 1},
  {&__pyx_n_s____test__, __pyx_k____test__, sizeof(__pyx_k____test__), 0, 0, 1, 1},
  {&__pyx_n_s__age, __pyx_k__age, sizeof(__pyx_k__age), 0, 0, 1, 1},
  {&__pyx_n_s__area, __pyx_k__area, sizeof(__pyx_k__area), 0, 0, 1, 1},
  {&__pyx_n_s__area2, __pyx_k__area2, sizeof(__pyx_k__area2), 0, 0, 1, 1},
  {&__pyx_n_s__areas, __pyx_k__areas, sizeof(__pyx_k__areas), 0, 0, 1, 1},
  {&__pyx_n_s__dist, __pyx_k__dist, sizeof(__pyx_k__dist), 0, 0, 1, 1},
  {&__pyx_n_s__enumerate, __pyx_k__enumerate, sizeof(__pyx_k__enumerate), 0, 0, 1, 1},
  {&__pyx_n_s__exponent, __pyx_k__exponent, sizeof(__pyx_k__exponent), 0, 0, 1, 1},
  {&__pyx_n_s__ge, __pyx_k__ge, sizeof(__pyx_k__ge), 0, 0, 1, 1},
  {&__pyx_n_s__incl, __pyx_k__incl, sizeof(__pyx_k__incl), 0, 0, 1, 1},
  {&__pyx_n_s__indists, __pyx_k__indists, sizeof(__pyx_k__indists), 0, 0, 1, 1},
  {&__pyx_n_s__intree, __pyx_k__intree, sizeof(__pyx_k__intree), 0, 0, 1, 1},
  {&__pyx_n_s__is_sparse, __pyx_k__is_sparse, sizeof(__pyx_k__is_sparse), 0, 0, 1, 1},
  {&__pyx_n_s__items, __pyx_k__items, sizeof(__pyx_k__items), 0, 0, 1, 1},
  {&__pyx_n_s__join, __pyx_k__join, sizeof(__pyx_k__join), 0, 0, 1, 1},
  {&__pyx_n_s__lgcpp, __pyx_k__lgcpp, sizeof(__pyx_k__lgcpp), 0, 0, 1, 1},
  {&__pyx_n_s__log, __pyx_k__log, sizeof(__pyx_k__log), 0, 0, 1, 1},
  {&__pyx_n_s__m, __pyx_k__m, sizeof(__pyx_k__m), 0, 0, 1, 1},
  {&__pyx_n_s__mantissa, __pyx_k__mantissa, sizeof(__pyx_k__mantissa), 0, 0, 1, 1},
  {&__pyx_n_s__marginal, __pyx_k__marginal, sizeof(__pyx_k__marginal), 0, 0, 1, 1},
  {&__pyx_n_s__math, __pyx_k__math, sizeof(__pyx_k__math), 0, 0, 1, 1},
  {&__pyx_n_s__n, __pyx_k__n, sizeof(__pyx_k__n), 0, 0, 1, 1},
  {&__pyx_n_s__na, __pyx_k__na, sizeof(__pyx_k__na), 0, 0, 1, 1},
  {&__pyx_n_s__names, __pyx_k__names, sizeof(__pyx_k__names), 0, 0, 1, 1},
  {&__pyx_n_s__period, __pyx_k__period, sizeof(__pyx_k__period), 0, 0, 1, 1},
  {&__pyx_n_s__periods, __pyx_k__periods, sizeof(__pyx_k__periods), 0, 0, 1, 1},
  {&__pyx_n_s__prob, __pyx_k__prob, sizeof(__pyx_k__prob), 0, 0, 1, 1},
  {&__pyx_n_s__range, __pyx_k__range, sizeof(__pyx_k__range), 0, 0, 1, 1},
  {&__pyx_n_s__reader, __pyx_k__reader, sizeof(__pyx_k__reader), 0, 0, 1, 1},
  {&__pyx_n_s__readtree, __pyx_k__readtree, sizeof(__pyx_k__readtree), 0, 0, 1, 1},
  {&__pyx_n_s__reversed, __pyx_k__reversed, sizeof(__pyx_k__reversed), 0, 0, 1, 1},
  {&__pyx_n_s__s, __pyx_k__s, sizeof(__pyx_k__s), 0, 0, 1, 1},
  {&__pyx_n_s__setup_D, __pyx_k__setup_D, sizeof(__pyx_k__setup_D), 0, 0, 1, 1},
  {&__pyx_n_s__setup_E, __pyx_k__setup_E, sizeof(__pyx_k__setup_E), 0, 0, 1, 1},
  {&__pyx_n_s__setup_Q, __pyx_k__setup_Q, sizeof(__pyx_k__setup_Q), 0, 0, 1, 1},
  {&__pyx_n_s__sorted, __pyx_k__sorted, sizeof(__pyx_k__sorted), 0, 0, 1, 1},
  {&__pyx_n_s__stderr, __pyx_k__stderr, sizeof(__pyx_k__stderr), 0, 0, 1, 1},
  {&__pyx_n_s__sym, __pyx_k__sym, sizeof(__pyx_k__sym), 0, 0, 1, 1},
  {&__pyx_n_s__sys, __pyx_k__sys, sizeof(__pyx_k__sys), 0, 0, 1, 1},
  {&__pyx_n_s__t, __pyx_k__t, sizeof(__pyx_k__t), 0, 0, 1, 1},
  {&__pyx_n_s__tree, __pyx_k__tree, sizeof(__pyx_k__tree), 0, 0, 1, 1},
  {&__pyx_n_s__treestr, __pyx_k__treestr, sizeof(__pyx_k__treestr), 0, 0, 1, 1},
  {0, 0, 0, 0, 0, 0, 0}
};
static int __Pyx_InitCachedBuiltins(void) {
  __pyx_builtin_range = __Pyx_GetName(__pyx_b, __pyx_n_s__range); if (!__pyx_builtin_range) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 207; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_builtin_sorted = __Pyx_GetName(__pyx_b, __pyx_n_s__sorted); if (!__pyx_builtin_sorted) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 289; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_builtin_enumerate = __Pyx_GetName(__pyx_b, __pyx_n_s__enumerate); if (!__pyx_builtin_enumerate) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 344; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_builtin_reversed = __Pyx_GetName(__pyx_b, __pyx_n_s__reversed); if (!__pyx_builtin_reversed) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 377; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  return 0;
  __pyx_L1_error:;
  return -1;
}

static int __Pyx_InitCachedConstants(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_InitCachedConstants", 0);

  /* "lgcpp.pyx":217
 *         _Tree* readTree(string)
 * 
 * def readtree(s):             # <<<<<<<<<<<<<<
 *     cdef _TreeReader* reader = new _TreeReader()
 *     cdef string treestr = string(<char *>s)
 */
  __pyx_k_tuple_7 = PyTuple_New(5); if (unlikely(!__pyx_k_tuple_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 217; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_k_tuple_7);
  __Pyx_INCREF(((PyObject *)__pyx_n_s__s));
  PyTuple_SET_ITEM(__pyx_k_tuple_7, 0, ((PyObject *)__pyx_n_s__s));
  __Pyx_GIVEREF(((PyObject *)__pyx_n_s__s));
  __Pyx_INCREF(((PyObject *)__pyx_n_s__reader));
  PyTuple_SET_ITEM(__pyx_k_tuple_7, 1, ((PyObject *)__pyx_n_s__reader));
  __Pyx_GIVEREF(((PyObject *)__pyx_n_s__reader));
  __Pyx_INCREF(((PyObject *)__pyx_n_s__treestr));
  PyTuple_SET_ITEM(__pyx_k_tuple_7, 2, ((PyObject *)__pyx_n_s__treestr));
  __Pyx_GIVEREF(((PyObject *)__pyx_n_s__treestr));
  __Pyx_INCREF(((PyObject *)__pyx_n_s__tree));
  PyTuple_SET_ITEM(__pyx_k_tuple_7, 3, ((PyObject *)__pyx_n_s__tree));
  __Pyx_GIVEREF(((PyObject *)__pyx_n_s__tree));
  __Pyx_INCREF(((PyObject *)__pyx_n_s__t));
  PyTuple_SET_ITEM(__pyx_k_tuple_7, 4, ((PyObject *)__pyx_n_s__t));
  __Pyx_GIVEREF(((PyObject *)__pyx_n_s__t));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_7));
  __pyx_k_codeobj_8 = (PyObject*)__Pyx_PyCode_New(1, 0, 5, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_k_tuple_7, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_9, __pyx_n_s__readtree, 217, __pyx_empty_bytes); if (unlikely(!__pyx_k_codeobj_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 217; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_RefNannyFinishContext();
  return -1;
}

static int __Pyx_InitGlobals(void) {
  if (__Pyx_InitStrings(__pyx_string_tab) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  return 0;
  __pyx_L1_error:;
  return -1;
}

#if PY_MAJOR_VERSION < 3
PyMODINIT_FUNC initlgcpp(void); /*proto*/
PyMODINIT_FUNC initlgcpp(void)
#else
PyMODINIT_FUNC PyInit_lgcpp(void); /*proto*/
PyMODINIT_FUNC PyInit_lgcpp(void)
#endif
{
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannyDeclarations
  #if CYTHON_REFNANNY
  __Pyx_RefNanny = __Pyx_RefNannyImportAPI("refnanny");
  if (!__Pyx_RefNanny) {
      PyErr_Clear();
      __Pyx_RefNanny = __Pyx_RefNannyImportAPI("Cython.Runtime.refnanny");
      if (!__Pyx_RefNanny)
          Py_FatalError("failed to import 'refnanny' module");
  }
  #endif
  __Pyx_RefNannySetupContext("PyMODINIT_FUNC PyInit_lgcpp(void)", 0);
  if ( __Pyx_check_binary_version() < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_empty_tuple = PyTuple_New(0); if (unlikely(!__pyx_empty_tuple)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_empty_bytes = PyBytes_FromStringAndSize("", 0); if (unlikely(!__pyx_empty_bytes)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #ifdef __Pyx_CyFunction_USED
  if (__Pyx_CyFunction_init() < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #endif
  #ifdef __Pyx_FusedFunction_USED
  if (__pyx_FusedFunction_init() < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #endif
  #ifdef __Pyx_Generator_USED
  if (__pyx_Generator_init() < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #endif
  /*--- Library function declarations ---*/
  /*--- Threads initialization code ---*/
  #if defined(__PYX_FORCE_INIT_THREADS) && __PYX_FORCE_INIT_THREADS
  #ifdef WITH_THREAD /* Python build with threading support? */
  PyEval_InitThreads();
  #endif
  #endif
  /*--- Module creation code ---*/
  #if PY_MAJOR_VERSION < 3
  __pyx_m = Py_InitModule4(__Pyx_NAMESTR("lgcpp"), __pyx_methods, 0, 0, PYTHON_API_VERSION);
  #else
  __pyx_m = PyModule_Create(&__pyx_moduledef);
  #endif
  if (!__pyx_m) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  #if PY_MAJOR_VERSION < 3
  Py_INCREF(__pyx_m);
  #endif
  __pyx_b = PyImport_AddModule(__Pyx_NAMESTR(__Pyx_BUILTIN_MODULE_NAME));
  if (!__pyx_b) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  if (__Pyx_SetAttrString(__pyx_m, "__builtins__", __pyx_b) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  /*--- Initialize various global constants etc. ---*/
  if (unlikely(__Pyx_InitGlobals() < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__pyx_module_is_main_lgcpp) {
    if (__Pyx_SetAttrString(__pyx_m, "__name__", __pyx_n_s____main__) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  }
  /*--- Builtin init code ---*/
  if (unlikely(__Pyx_InitCachedBuiltins() < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  /*--- Constants init code ---*/
  if (unlikely(__Pyx_InitCachedConstants() < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  /*--- Global init code ---*/
  /*--- Variable export code ---*/
  /*--- Function export code ---*/
  /*--- Type init code ---*/
  if (PyType_Ready(&__pyx_type_5lgcpp_Superdouble) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 47; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__Pyx_SetAttrString(__pyx_m, "Superdouble", (PyObject *)&__pyx_type_5lgcpp_Superdouble) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 47; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_5lgcpp_Superdouble = &__pyx_type_5lgcpp_Superdouble;
  if (PyType_Ready(&__pyx_type_5lgcpp_Node) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 77; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__Pyx_SetAttrString(__pyx_m, "Node", (PyObject *)&__pyx_type_5lgcpp_Node) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 77; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_5lgcpp_Node = &__pyx_type_5lgcpp_Node;
  if (PyType_Ready(&__pyx_type_5lgcpp_BranchSegment) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 104; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__Pyx_SetAttrString(__pyx_m, "BranchSegment", (PyObject *)&__pyx_type_5lgcpp_BranchSegment) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 104; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_5lgcpp_BranchSegment = &__pyx_type_5lgcpp_BranchSegment;
  if (PyType_Ready(&__pyx_type_5lgcpp_RateModel) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 135; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__Pyx_SetAttrString(__pyx_m, "RateModel", (PyObject *)&__pyx_type_5lgcpp_RateModel) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 135; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_5lgcpp_RateModel = &__pyx_type_5lgcpp_RateModel;
  if (PyType_Ready(&__pyx_type_5lgcpp_Tree) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 182; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__Pyx_SetAttrString(__pyx_m, "Tree", (PyObject *)&__pyx_type_5lgcpp_Tree) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 182; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_5lgcpp_Tree = &__pyx_type_5lgcpp_Tree;
  if (PyType_Ready(&__pyx_type_5lgcpp_BioGeoTree) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 263; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__Pyx_SetAttrString(__pyx_m, "BioGeoTree", (PyObject *)&__pyx_type_5lgcpp_BioGeoTree) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 263; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_5lgcpp_BioGeoTree = &__pyx_type_5lgcpp_BioGeoTree;
  if (PyType_Ready(&__pyx_type_5lgcpp_InputReader) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 415; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__Pyx_SetAttrString(__pyx_m, "InputReader", (PyObject *)&__pyx_type_5lgcpp_InputReader) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 415; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_5lgcpp_InputReader = &__pyx_type_5lgcpp_InputReader;
  /*--- Type import code ---*/
  /*--- Variable import code ---*/
  /*--- Function import code ---*/
  /*--- Execution code ---*/

  /* "lgcpp.pyx":1
 * import sys             # <<<<<<<<<<<<<<
 * from math import log
 * from cython.operator cimport dereference as deref, preincrement as inc
 */
  __pyx_t_1 = __Pyx_Import(((PyObject *)__pyx_n_s__sys), 0, -1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__sys, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "lgcpp.pyx":2
 * import sys
 * from math import log             # <<<<<<<<<<<<<<
 * from cython.operator cimport dereference as deref, preincrement as inc
 * from cython import address as addr
 */
  __pyx_t_1 = PyList_New(1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(((PyObject *)__pyx_n_s__log));
  PyList_SET_ITEM(__pyx_t_1, 0, ((PyObject *)__pyx_n_s__log));
  __Pyx_GIVEREF(((PyObject *)__pyx_n_s__log));
  __pyx_t_2 = __Pyx_Import(((PyObject *)__pyx_n_s__math), ((PyObject *)__pyx_t_1), -1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(((PyObject *)__pyx_t_1)); __pyx_t_1 = 0;
  __pyx_t_1 = PyObject_GetAttr(__pyx_t_2, __pyx_n_s__log);
  if (__pyx_t_1 == NULL) {
    if (PyErr_ExceptionMatches(PyExc_AttributeError)) __Pyx_RaiseImportError(__pyx_n_s__log);
    if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __Pyx_GOTREF(__pyx_t_1);
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__log, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "lgcpp.pyx":217
 *         _Tree* readTree(string)
 * 
 * def readtree(s):             # <<<<<<<<<<<<<<
 *     cdef _TreeReader* reader = new _TreeReader()
 *     cdef string treestr = string(<char *>s)
 */
  __pyx_t_2 = PyCFunction_NewEx(&__pyx_mdef_5lgcpp_1readtree, NULL, __pyx_n_s__lgcpp); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 217; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__readtree, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 217; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "lgcpp.pyx":1
 * import sys             # <<<<<<<<<<<<<<
 * from math import log
 * from cython.operator cimport dereference as deref, preincrement as inc
 */
  __pyx_t_2 = PyDict_New(); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_2));
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s____test__, ((PyObject *)__pyx_t_2)) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(((PyObject *)__pyx_t_2)); __pyx_t_2 = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  if (__pyx_m) {
    __Pyx_AddTraceback("init lgcpp", __pyx_clineno, __pyx_lineno, __pyx_filename);
    Py_DECREF(__pyx_m); __pyx_m = 0;
  } else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_ImportError, "init lgcpp");
  }
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  #if PY_MAJOR_VERSION < 3
  return;
  #else
  return __pyx_m;
  #endif
}

/* Runtime support code */
#if CYTHON_REFNANNY
static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname) {
    PyObject *m = NULL, *p = NULL;
    void *r = NULL;
    m = PyImport_ImportModule((char *)modname);
    if (!m) goto end;
    p = PyObject_GetAttrString(m, (char *)"RefNannyAPI");
    if (!p) goto end;
    r = PyLong_AsVoidPtr(p);
end:
    Py_XDECREF(p);
    Py_XDECREF(m);
    return (__Pyx_RefNannyAPIStruct *)r;
}
#endif /* CYTHON_REFNANNY */

static PyObject *__Pyx_GetName(PyObject *dict, PyObject *name) {
    PyObject *result;
    result = PyObject_GetAttr(dict, name);
    if (!result) {
        if (dict != __pyx_b) {
            PyErr_Clear();
            result = PyObject_GetAttr(__pyx_b, name);
        }
        if (!result) {
            PyErr_SetObject(PyExc_NameError, name);
        }
    }
    return result;
}

static void __Pyx_RaiseDoubleKeywordsError(
    const char* func_name,
    PyObject* kw_name)
{
    PyErr_Format(PyExc_TypeError,
        #if PY_MAJOR_VERSION >= 3
        "%s() got multiple values for keyword argument '%U'", func_name, kw_name);
        #else
        "%s() got multiple values for keyword argument '%s'", func_name,
        PyString_AS_STRING(kw_name));
        #endif
}

static int __Pyx_ParseOptionalKeywords(
    PyObject *kwds,
    PyObject **argnames[],
    PyObject *kwds2,
    PyObject *values[],
    Py_ssize_t num_pos_args,
    const char* function_name)
{
    PyObject *key = 0, *value = 0;
    Py_ssize_t pos = 0;
    PyObject*** name;
    PyObject*** first_kw_arg = argnames + num_pos_args;
    while (PyDict_Next(kwds, &pos, &key, &value)) {
        name = first_kw_arg;
        while (*name && (**name != key)) name++;
        if (*name) {
            values[name-argnames] = value;
        } else {
            #if PY_MAJOR_VERSION < 3
            if (unlikely(!PyString_CheckExact(key)) && unlikely(!PyString_Check(key))) {
            #else
            if (unlikely(!PyUnicode_Check(key))) {
            #endif
                goto invalid_keyword_type;
            } else {
                for (name = first_kw_arg; *name; name++) {
                    #if PY_MAJOR_VERSION >= 3
                    if (PyUnicode_GET_SIZE(**name) == PyUnicode_GET_SIZE(key) &&
                        PyUnicode_Compare(**name, key) == 0) break;
                    #else
                    if (PyString_GET_SIZE(**name) == PyString_GET_SIZE(key) &&
                        _PyString_Eq(**name, key)) break;
                    #endif
                }
                if (*name) {
                    values[name-argnames] = value;
                } else {
                    for (name=argnames; name != first_kw_arg; name++) {
                        if (**name == key) goto arg_passed_twice;
                        #if PY_MAJOR_VERSION >= 3
                        if (PyUnicode_GET_SIZE(**name) == PyUnicode_GET_SIZE(key) &&
                            PyUnicode_Compare(**name, key) == 0) goto arg_passed_twice;
                        #else
                        if (PyString_GET_SIZE(**name) == PyString_GET_SIZE(key) &&
                            _PyString_Eq(**name, key)) goto arg_passed_twice;
                        #endif
                    }
                    if (kwds2) {
                        if (unlikely(PyDict_SetItem(kwds2, key, value))) goto bad;
                    } else {
                        goto invalid_keyword;
                    }
                }
            }
        }
    }
    return 0;
arg_passed_twice:
    __Pyx_RaiseDoubleKeywordsError(function_name, **name);
    goto bad;
invalid_keyword_type:
    PyErr_Format(PyExc_TypeError,
        "%s() keywords must be strings", function_name);
    goto bad;
invalid_keyword:
    PyErr_Format(PyExc_TypeError,
    #if PY_MAJOR_VERSION < 3
        "%s() got an unexpected keyword argument '%s'",
        function_name, PyString_AsString(key));
    #else
        "%s() got an unexpected keyword argument '%U'",
        function_name, key);
    #endif
bad:
    return -1;
}

static void __Pyx_RaiseArgtupleInvalid(
    const char* func_name,
    int exact,
    Py_ssize_t num_min,
    Py_ssize_t num_max,
    Py_ssize_t num_found)
{
    Py_ssize_t num_expected;
    const char *more_or_less;
    if (num_found < num_min) {
        num_expected = num_min;
        more_or_less = "at least";
    } else {
        num_expected = num_max;
        more_or_less = "at most";
    }
    if (exact) {
        more_or_less = "exactly";
    }
    PyErr_Format(PyExc_TypeError,
                 "%s() takes %s %"PY_FORMAT_SIZE_T"d positional argument%s (%"PY_FORMAT_SIZE_T"d given)",
                 func_name, more_or_less, num_expected,
                 (num_expected == 1) ? "" : "s", num_found);
}

static double __Pyx__PyObject_AsDouble(PyObject* obj) {
    PyObject* float_value;
    if (Py_TYPE(obj)->tp_as_number && Py_TYPE(obj)->tp_as_number->nb_float) {
        return PyFloat_AsDouble(obj);
    } else if (PyUnicode_CheckExact(obj) || PyBytes_CheckExact(obj)) {
#if PY_MAJOR_VERSION >= 3
        float_value = PyFloat_FromString(obj);
#else
        float_value = PyFloat_FromString(obj, 0);
#endif
    } else {
        PyObject* args = PyTuple_New(1);
        if (unlikely(!args)) goto bad;
        PyTuple_SET_ITEM(args, 0, obj);
        float_value = PyObject_Call((PyObject*)&PyFloat_Type, args, 0);
        PyTuple_SET_ITEM(args, 0, 0);
        Py_DECREF(args);
    }
    if (likely(float_value)) {
        double value = PyFloat_AS_DOUBLE(float_value);
        Py_DECREF(float_value);
        return value;
    }
bad:
    return (double)-1;
}

static CYTHON_INLINE int __Pyx_TypeTest(PyObject *obj, PyTypeObject *type) {
    if (unlikely(!type)) {
        PyErr_Format(PyExc_SystemError, "Missing type object");
        return 0;
    }
    if (likely(PyObject_TypeCheck(obj, type)))
        return 1;
    PyErr_Format(PyExc_TypeError, "Cannot convert %.200s to %.200s",
                 Py_TYPE(obj)->tp_name, type->tp_name);
    return 0;
}

static CYTHON_INLINE int __Pyx_CheckKeywordStrings(
    PyObject *kwdict,
    const char* function_name,
    int kw_allowed)
{
    PyObject* key = 0;
    Py_ssize_t pos = 0;
    while (PyDict_Next(kwdict, &pos, &key, 0)) {
        #if PY_MAJOR_VERSION < 3
        if (unlikely(!PyString_CheckExact(key)) && unlikely(!PyString_Check(key)))
        #else
        if (unlikely(!PyUnicode_Check(key)))
        #endif
            goto invalid_keyword_type;
    }
    if ((!kw_allowed) && unlikely(key))
        goto invalid_keyword;
    return 1;
invalid_keyword_type:
    PyErr_Format(PyExc_TypeError,
        "%s() keywords must be strings", function_name);
    return 0;
invalid_keyword:
    PyErr_Format(PyExc_TypeError,
    #if PY_MAJOR_VERSION < 3
        "%s() got an unexpected keyword argument '%s'",
        function_name, PyString_AsString(key));
    #else
        "%s() got an unexpected keyword argument '%U'",
        function_name, key);
    #endif
    return 0;
}

static int __Pyx_ArgTypeTest(PyObject *obj, PyTypeObject *type, int none_allowed,
    const char *name, int exact)
{
    if (!type) {
        PyErr_Format(PyExc_SystemError, "Missing type object");
        return 0;
    }
    if (none_allowed && obj == Py_None) return 1;
    else if (exact) {
        if (Py_TYPE(obj) == type) return 1;
    }
    else {
        if (PyObject_TypeCheck(obj, type)) return 1;
    }
    PyErr_Format(PyExc_TypeError,
        "Argument '%s' has incorrect type (expected %s, got %s)",
        name, type->tp_name, Py_TYPE(obj)->tp_name);
    return 0;
}

static CYTHON_INLINE void __Pyx_RaiseNeedMoreValuesError(Py_ssize_t index) {
    PyErr_Format(PyExc_ValueError,
                 "need more than %"PY_FORMAT_SIZE_T"d value%s to unpack",
                 index, (index == 1) ? "" : "s");
}

static CYTHON_INLINE void __Pyx_RaiseTooManyValuesError(Py_ssize_t expected) {
    PyErr_Format(PyExc_ValueError,
                 "too many values to unpack (expected %"PY_FORMAT_SIZE_T"d)", expected);
}

static int __Pyx_IternextUnpackEndCheck(PyObject *retval, Py_ssize_t expected) {
    if (unlikely(retval)) {
        Py_DECREF(retval);
        __Pyx_RaiseTooManyValuesError(expected);
        return -1;
    } else if (PyErr_Occurred()) {
        if (likely(PyErr_ExceptionMatches(PyExc_StopIteration))) {
            PyErr_Clear();
            return 0;
        } else {
            return -1;
        }
    }
    return 0;
}



static PyObject *__Pyx_Import(PyObject *name, PyObject *from_list, long level) {
    PyObject *py_import = 0;
    PyObject *empty_list = 0;
    PyObject *module = 0;
    PyObject *global_dict = 0;
    PyObject *empty_dict = 0;
    PyObject *list;
    py_import = __Pyx_GetAttrString(__pyx_b, "__import__");
    if (!py_import)
        goto bad;
    if (from_list)
        list = from_list;
    else {
        empty_list = PyList_New(0);
        if (!empty_list)
            goto bad;
        list = empty_list;
    }
    global_dict = PyModule_GetDict(__pyx_m);
    if (!global_dict)
        goto bad;
    empty_dict = PyDict_New();
    if (!empty_dict)
        goto bad;
    #if PY_VERSION_HEX >= 0x02050000
    {
        #if PY_MAJOR_VERSION >= 3
        if (level == -1) {
            if (strchr(__Pyx_MODULE_NAME, '.')) {
                /* try package relative import first */
                PyObject *py_level = PyInt_FromLong(1);
                if (!py_level)
                    goto bad;
                module = PyObject_CallFunctionObjArgs(py_import,
                    name, global_dict, empty_dict, list, py_level, NULL);
                Py_DECREF(py_level);
                if (!module) {
                    if (!PyErr_ExceptionMatches(PyExc_ImportError))
                        goto bad;
                    PyErr_Clear();
                }
            }
            level = 0; /* try absolute import on failure */
        }
        #endif
        if (!module) {
            PyObject *py_level = PyInt_FromLong(level);
            if (!py_level)
                goto bad;
            module = PyObject_CallFunctionObjArgs(py_import,
                name, global_dict, empty_dict, list, py_level, NULL);
            Py_DECREF(py_level);
        }
    }
    #else
    if (level>0) {
        PyErr_SetString(PyExc_RuntimeError, "Relative import is not supported for Python <=2.4.");
        goto bad;
    }
    module = PyObject_CallFunctionObjArgs(py_import,
        name, global_dict, empty_dict, list, NULL);
    #endif
bad:
    Py_XDECREF(empty_list);
    Py_XDECREF(py_import);
    Py_XDECREF(empty_dict);
    return module;
}

static CYTHON_INLINE void __Pyx_RaiseImportError(PyObject *name) {
#if PY_MAJOR_VERSION < 3
    PyErr_Format(PyExc_ImportError, "cannot import name %.230s",
                 PyString_AsString(name));
#else
    PyErr_Format(PyExc_ImportError, "cannot import name %S", name);
#endif
}

#if PY_MAJOR_VERSION < 3
static PyObject *__Pyx_GetStdout(void) {
    PyObject *f = PySys_GetObject((char *)"stdout");
    if (!f) {
        PyErr_SetString(PyExc_RuntimeError, "lost sys.stdout");
    }
    return f;
}
static int __Pyx_Print(PyObject* f, PyObject *arg_tuple, int newline) {
    PyObject* v;
    int i;
    if (!f) {
        if (!(f = __Pyx_GetStdout()))
            return -1;
    }
    for (i=0; i < PyTuple_GET_SIZE(arg_tuple); i++) {
        if (PyFile_SoftSpace(f, 1)) {
            if (PyFile_WriteString(" ", f) < 0)
                return -1;
        }
        v = PyTuple_GET_ITEM(arg_tuple, i);
        if (PyFile_WriteObject(v, f, Py_PRINT_RAW) < 0)
            return -1;
        if (PyString_Check(v)) {
            char *s = PyString_AsString(v);
            Py_ssize_t len = PyString_Size(v);
            if (len > 0 &&
                isspace(Py_CHARMASK(s[len-1])) &&
                s[len-1] != ' ')
                    PyFile_SoftSpace(f, 0);
        }
    }
    if (newline) {
        if (PyFile_WriteString("\n", f) < 0)
            return -1;
        PyFile_SoftSpace(f, 0);
    }
    return 0;
}
#else /* Python 3 has a print function */
static int __Pyx_Print(PyObject* stream, PyObject *arg_tuple, int newline) {
    PyObject* kwargs = 0;
    PyObject* result = 0;
    PyObject* end_string;
    if (unlikely(!__pyx_print)) {
        __pyx_print = __Pyx_GetAttrString(__pyx_b, "print");
        if (!__pyx_print)
            return -1;
    }
    if (stream) {
        kwargs = PyDict_New();
        if (unlikely(!kwargs))
            return -1;
        if (unlikely(PyDict_SetItemString(kwargs, "file", stream) < 0))
            goto bad;
        if (!newline) {
            end_string = PyUnicode_FromStringAndSize(" ", 1);
            if (unlikely(!end_string))
                goto bad;
            if (PyDict_SetItemString(kwargs, "end", end_string) < 0) {
                Py_DECREF(end_string);
                goto bad;
            }
            Py_DECREF(end_string);
        }
    } else if (!newline) {
        if (unlikely(!__pyx_print_kwargs)) {
            __pyx_print_kwargs = PyDict_New();
            if (unlikely(!__pyx_print_kwargs))
                return -1;
            end_string = PyUnicode_FromStringAndSize(" ", 1);
            if (unlikely(!end_string))
                return -1;
            if (PyDict_SetItemString(__pyx_print_kwargs, "end", end_string) < 0) {
                Py_DECREF(end_string);
                return -1;
            }
            Py_DECREF(end_string);
        }
        kwargs = __pyx_print_kwargs;
    }
    result = PyObject_Call(__pyx_print, arg_tuple, kwargs);
    if (unlikely(kwargs) && (kwargs != __pyx_print_kwargs))
        Py_DECREF(kwargs);
    if (!result)
        return -1;
    Py_DECREF(result);
    return 0;
bad:
    if (kwargs != __pyx_print_kwargs)
        Py_XDECREF(kwargs);
    return -1;
}
#endif

#if PY_MAJOR_VERSION < 3
static int __Pyx_PrintOne(PyObject* f, PyObject *o) {
    if (!f) {
        if (!(f = __Pyx_GetStdout()))
            return -1;
    }
    if (PyFile_SoftSpace(f, 0)) {
        if (PyFile_WriteString(" ", f) < 0)
            return -1;
    }
    if (PyFile_WriteObject(o, f, Py_PRINT_RAW) < 0)
        return -1;
    if (PyFile_WriteString("\n", f) < 0)
        return -1;
    return 0;
    /* the line below is just to avoid compiler
     * compiler warnings about unused functions */
    return __Pyx_Print(f, NULL, 0);
}
#else /* Python 3 has a print function */
static int __Pyx_PrintOne(PyObject* stream, PyObject *o) {
    int res;
    PyObject* arg_tuple = PyTuple_New(1);
    if (unlikely(!arg_tuple))
        return -1;
    Py_INCREF(o);
    PyTuple_SET_ITEM(arg_tuple, 0, o);
    res = __Pyx_Print(stream, arg_tuple, 1);
    Py_DECREF(arg_tuple);
    return res;
}
#endif

static CYTHON_INLINE unsigned char __Pyx_PyInt_AsUnsignedChar(PyObject* x) {
    const unsigned char neg_one = (unsigned char)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
    if (sizeof(unsigned char) < sizeof(long)) {
        long val = __Pyx_PyInt_AsLong(x);
        if (unlikely(val != (long)(unsigned char)val)) {
            if (!unlikely(val == -1 && PyErr_Occurred())) {
                PyErr_SetString(PyExc_OverflowError,
                    (is_unsigned && unlikely(val < 0)) ?
                    "can't convert negative value to unsigned char" :
                    "value too large to convert to unsigned char");
            }
            return (unsigned char)-1;
        }
        return (unsigned char)val;
    }
    return (unsigned char)__Pyx_PyInt_AsUnsignedLong(x);
}

static CYTHON_INLINE unsigned short __Pyx_PyInt_AsUnsignedShort(PyObject* x) {
    const unsigned short neg_one = (unsigned short)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
    if (sizeof(unsigned short) < sizeof(long)) {
        long val = __Pyx_PyInt_AsLong(x);
        if (unlikely(val != (long)(unsigned short)val)) {
            if (!unlikely(val == -1 && PyErr_Occurred())) {
                PyErr_SetString(PyExc_OverflowError,
                    (is_unsigned && unlikely(val < 0)) ?
                    "can't convert negative value to unsigned short" :
                    "value too large to convert to unsigned short");
            }
            return (unsigned short)-1;
        }
        return (unsigned short)val;
    }
    return (unsigned short)__Pyx_PyInt_AsUnsignedLong(x);
}

static CYTHON_INLINE unsigned int __Pyx_PyInt_AsUnsignedInt(PyObject* x) {
    const unsigned int neg_one = (unsigned int)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
    if (sizeof(unsigned int) < sizeof(long)) {
        long val = __Pyx_PyInt_AsLong(x);
        if (unlikely(val != (long)(unsigned int)val)) {
            if (!unlikely(val == -1 && PyErr_Occurred())) {
                PyErr_SetString(PyExc_OverflowError,
                    (is_unsigned && unlikely(val < 0)) ?
                    "can't convert negative value to unsigned int" :
                    "value too large to convert to unsigned int");
            }
            return (unsigned int)-1;
        }
        return (unsigned int)val;
    }
    return (unsigned int)__Pyx_PyInt_AsUnsignedLong(x);
}

static CYTHON_INLINE char __Pyx_PyInt_AsChar(PyObject* x) {
    const char neg_one = (char)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
    if (sizeof(char) < sizeof(long)) {
        long val = __Pyx_PyInt_AsLong(x);
        if (unlikely(val != (long)(char)val)) {
            if (!unlikely(val == -1 && PyErr_Occurred())) {
                PyErr_SetString(PyExc_OverflowError,
                    (is_unsigned && unlikely(val < 0)) ?
                    "can't convert negative value to char" :
                    "value too large to convert to char");
            }
            return (char)-1;
        }
        return (char)val;
    }
    return (char)__Pyx_PyInt_AsLong(x);
}

static CYTHON_INLINE short __Pyx_PyInt_AsShort(PyObject* x) {
    const short neg_one = (short)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
    if (sizeof(short) < sizeof(long)) {
        long val = __Pyx_PyInt_AsLong(x);
        if (unlikely(val != (long)(short)val)) {
            if (!unlikely(val == -1 && PyErr_Occurred())) {
                PyErr_SetString(PyExc_OverflowError,
                    (is_unsigned && unlikely(val < 0)) ?
                    "can't convert negative value to short" :
                    "value too large to convert to short");
            }
            return (short)-1;
        }
        return (short)val;
    }
    return (short)__Pyx_PyInt_AsLong(x);
}

static CYTHON_INLINE int __Pyx_PyInt_AsInt(PyObject* x) {
    const int neg_one = (int)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
    if (sizeof(int) < sizeof(long)) {
        long val = __Pyx_PyInt_AsLong(x);
        if (unlikely(val != (long)(int)val)) {
            if (!unlikely(val == -1 && PyErr_Occurred())) {
                PyErr_SetString(PyExc_OverflowError,
                    (is_unsigned && unlikely(val < 0)) ?
                    "can't convert negative value to int" :
                    "value too large to convert to int");
            }
            return (int)-1;
        }
        return (int)val;
    }
    return (int)__Pyx_PyInt_AsLong(x);
}

static CYTHON_INLINE signed char __Pyx_PyInt_AsSignedChar(PyObject* x) {
    const signed char neg_one = (signed char)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
    if (sizeof(signed char) < sizeof(long)) {
        long val = __Pyx_PyInt_AsLong(x);
        if (unlikely(val != (long)(signed char)val)) {
            if (!unlikely(val == -1 && PyErr_Occurred())) {
                PyErr_SetString(PyExc_OverflowError,
                    (is_unsigned && unlikely(val < 0)) ?
                    "can't convert negative value to signed char" :
                    "value too large to convert to signed char");
            }
            return (signed char)-1;
        }
        return (signed char)val;
    }
    return (signed char)__Pyx_PyInt_AsSignedLong(x);
}

static CYTHON_INLINE signed short __Pyx_PyInt_AsSignedShort(PyObject* x) {
    const signed short neg_one = (signed short)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
    if (sizeof(signed short) < sizeof(long)) {
        long val = __Pyx_PyInt_AsLong(x);
        if (unlikely(val != (long)(signed short)val)) {
            if (!unlikely(val == -1 && PyErr_Occurred())) {
                PyErr_SetString(PyExc_OverflowError,
                    (is_unsigned && unlikely(val < 0)) ?
                    "can't convert negative value to signed short" :
                    "value too large to convert to signed short");
            }
            return (signed short)-1;
        }
        return (signed short)val;
    }
    return (signed short)__Pyx_PyInt_AsSignedLong(x);
}

static CYTHON_INLINE signed int __Pyx_PyInt_AsSignedInt(PyObject* x) {
    const signed int neg_one = (signed int)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
    if (sizeof(signed int) < sizeof(long)) {
        long val = __Pyx_PyInt_AsLong(x);
        if (unlikely(val != (long)(signed int)val)) {
            if (!unlikely(val == -1 && PyErr_Occurred())) {
                PyErr_SetString(PyExc_OverflowError,
                    (is_unsigned && unlikely(val < 0)) ?
                    "can't convert negative value to signed int" :
                    "value too large to convert to signed int");
            }
            return (signed int)-1;
        }
        return (signed int)val;
    }
    return (signed int)__Pyx_PyInt_AsSignedLong(x);
}

static CYTHON_INLINE int __Pyx_PyInt_AsLongDouble(PyObject* x) {
    const int neg_one = (int)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
    if (sizeof(int) < sizeof(long)) {
        long val = __Pyx_PyInt_AsLong(x);
        if (unlikely(val != (long)(int)val)) {
            if (!unlikely(val == -1 && PyErr_Occurred())) {
                PyErr_SetString(PyExc_OverflowError,
                    (is_unsigned && unlikely(val < 0)) ?
                    "can't convert negative value to int" :
                    "value too large to convert to int");
            }
            return (int)-1;
        }
        return (int)val;
    }
    return (int)__Pyx_PyInt_AsLong(x);
}

static CYTHON_INLINE unsigned long __Pyx_PyInt_AsUnsignedLong(PyObject* x) {
    const unsigned long neg_one = (unsigned long)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_VERSION_HEX < 0x03000000
    if (likely(PyInt_Check(x))) {
        long val = PyInt_AS_LONG(x);
        if (is_unsigned && unlikely(val < 0)) {
            PyErr_SetString(PyExc_OverflowError,
                            "can't convert negative value to unsigned long");
            return (unsigned long)-1;
        }
        return (unsigned long)val;
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
            if (unlikely(Py_SIZE(x) < 0)) {
                PyErr_SetString(PyExc_OverflowError,
                                "can't convert negative value to unsigned long");
                return (unsigned long)-1;
            }
            return (unsigned long)PyLong_AsUnsignedLong(x);
        } else {
            return (unsigned long)PyLong_AsLong(x);
        }
    } else {
        unsigned long val;
        PyObject *tmp = __Pyx_PyNumber_Int(x);
        if (!tmp) return (unsigned long)-1;
        val = __Pyx_PyInt_AsUnsignedLong(tmp);
        Py_DECREF(tmp);
        return val;
    }
}

static CYTHON_INLINE unsigned PY_LONG_LONG __Pyx_PyInt_AsUnsignedLongLong(PyObject* x) {
    const unsigned PY_LONG_LONG neg_one = (unsigned PY_LONG_LONG)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_VERSION_HEX < 0x03000000
    if (likely(PyInt_Check(x))) {
        long val = PyInt_AS_LONG(x);
        if (is_unsigned && unlikely(val < 0)) {
            PyErr_SetString(PyExc_OverflowError,
                            "can't convert negative value to unsigned PY_LONG_LONG");
            return (unsigned PY_LONG_LONG)-1;
        }
        return (unsigned PY_LONG_LONG)val;
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
            if (unlikely(Py_SIZE(x) < 0)) {
                PyErr_SetString(PyExc_OverflowError,
                                "can't convert negative value to unsigned PY_LONG_LONG");
                return (unsigned PY_LONG_LONG)-1;
            }
            return (unsigned PY_LONG_LONG)PyLong_AsUnsignedLongLong(x);
        } else {
            return (unsigned PY_LONG_LONG)PyLong_AsLongLong(x);
        }
    } else {
        unsigned PY_LONG_LONG val;
        PyObject *tmp = __Pyx_PyNumber_Int(x);
        if (!tmp) return (unsigned PY_LONG_LONG)-1;
        val = __Pyx_PyInt_AsUnsignedLongLong(tmp);
        Py_DECREF(tmp);
        return val;
    }
}

static CYTHON_INLINE long __Pyx_PyInt_AsLong(PyObject* x) {
    const long neg_one = (long)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_VERSION_HEX < 0x03000000
    if (likely(PyInt_Check(x))) {
        long val = PyInt_AS_LONG(x);
        if (is_unsigned && unlikely(val < 0)) {
            PyErr_SetString(PyExc_OverflowError,
                            "can't convert negative value to long");
            return (long)-1;
        }
        return (long)val;
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
            if (unlikely(Py_SIZE(x) < 0)) {
                PyErr_SetString(PyExc_OverflowError,
                                "can't convert negative value to long");
                return (long)-1;
            }
            return (long)PyLong_AsUnsignedLong(x);
        } else {
            return (long)PyLong_AsLong(x);
        }
    } else {
        long val;
        PyObject *tmp = __Pyx_PyNumber_Int(x);
        if (!tmp) return (long)-1;
        val = __Pyx_PyInt_AsLong(tmp);
        Py_DECREF(tmp);
        return val;
    }
}

static CYTHON_INLINE PY_LONG_LONG __Pyx_PyInt_AsLongLong(PyObject* x) {
    const PY_LONG_LONG neg_one = (PY_LONG_LONG)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_VERSION_HEX < 0x03000000
    if (likely(PyInt_Check(x))) {
        long val = PyInt_AS_LONG(x);
        if (is_unsigned && unlikely(val < 0)) {
            PyErr_SetString(PyExc_OverflowError,
                            "can't convert negative value to PY_LONG_LONG");
            return (PY_LONG_LONG)-1;
        }
        return (PY_LONG_LONG)val;
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
            if (unlikely(Py_SIZE(x) < 0)) {
                PyErr_SetString(PyExc_OverflowError,
                                "can't convert negative value to PY_LONG_LONG");
                return (PY_LONG_LONG)-1;
            }
            return (PY_LONG_LONG)PyLong_AsUnsignedLongLong(x);
        } else {
            return (PY_LONG_LONG)PyLong_AsLongLong(x);
        }
    } else {
        PY_LONG_LONG val;
        PyObject *tmp = __Pyx_PyNumber_Int(x);
        if (!tmp) return (PY_LONG_LONG)-1;
        val = __Pyx_PyInt_AsLongLong(tmp);
        Py_DECREF(tmp);
        return val;
    }
}

static CYTHON_INLINE signed long __Pyx_PyInt_AsSignedLong(PyObject* x) {
    const signed long neg_one = (signed long)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_VERSION_HEX < 0x03000000
    if (likely(PyInt_Check(x))) {
        long val = PyInt_AS_LONG(x);
        if (is_unsigned && unlikely(val < 0)) {
            PyErr_SetString(PyExc_OverflowError,
                            "can't convert negative value to signed long");
            return (signed long)-1;
        }
        return (signed long)val;
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
            if (unlikely(Py_SIZE(x) < 0)) {
                PyErr_SetString(PyExc_OverflowError,
                                "can't convert negative value to signed long");
                return (signed long)-1;
            }
            return (signed long)PyLong_AsUnsignedLong(x);
        } else {
            return (signed long)PyLong_AsLong(x);
        }
    } else {
        signed long val;
        PyObject *tmp = __Pyx_PyNumber_Int(x);
        if (!tmp) return (signed long)-1;
        val = __Pyx_PyInt_AsSignedLong(tmp);
        Py_DECREF(tmp);
        return val;
    }
}

static CYTHON_INLINE signed PY_LONG_LONG __Pyx_PyInt_AsSignedLongLong(PyObject* x) {
    const signed PY_LONG_LONG neg_one = (signed PY_LONG_LONG)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_VERSION_HEX < 0x03000000
    if (likely(PyInt_Check(x))) {
        long val = PyInt_AS_LONG(x);
        if (is_unsigned && unlikely(val < 0)) {
            PyErr_SetString(PyExc_OverflowError,
                            "can't convert negative value to signed PY_LONG_LONG");
            return (signed PY_LONG_LONG)-1;
        }
        return (signed PY_LONG_LONG)val;
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
            if (unlikely(Py_SIZE(x) < 0)) {
                PyErr_SetString(PyExc_OverflowError,
                                "can't convert negative value to signed PY_LONG_LONG");
                return (signed PY_LONG_LONG)-1;
            }
            return (signed PY_LONG_LONG)PyLong_AsUnsignedLongLong(x);
        } else {
            return (signed PY_LONG_LONG)PyLong_AsLongLong(x);
        }
    } else {
        signed PY_LONG_LONG val;
        PyObject *tmp = __Pyx_PyNumber_Int(x);
        if (!tmp) return (signed PY_LONG_LONG)-1;
        val = __Pyx_PyInt_AsSignedLongLong(tmp);
        Py_DECREF(tmp);
        return val;
    }
}

static int __Pyx_check_binary_version(void) {
    char ctversion[4], rtversion[4];
    PyOS_snprintf(ctversion, 4, "%d.%d", PY_MAJOR_VERSION, PY_MINOR_VERSION);
    PyOS_snprintf(rtversion, 4, "%s", Py_GetVersion());
    if (ctversion[0] != rtversion[0] || ctversion[2] != rtversion[2]) {
        char message[200];
        PyOS_snprintf(message, sizeof(message),
                      "compiletime version %s of module '%.100s' "
                      "does not match runtime version %s",
                      ctversion, __Pyx_MODULE_NAME, rtversion);
        #if PY_VERSION_HEX < 0x02050000
        return PyErr_Warn(NULL, message);
        #else
        return PyErr_WarnEx(NULL, message, 1);
        #endif
    }
    return 0;
}

static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line) {
    int start = 0, mid = 0, end = count - 1;
    if (end >= 0 && code_line > entries[end].code_line) {
        return count;
    }
    while (start < end) {
        mid = (start + end) / 2;
        if (code_line < entries[mid].code_line) {
            end = mid;
        } else if (code_line > entries[mid].code_line) {
             start = mid + 1;
        } else {
            return mid;
        }
    }
    if (code_line <= entries[mid].code_line) {
        return mid;
    } else {
        return mid + 1;
    }
}
static PyCodeObject *__pyx_find_code_object(int code_line) {
    PyCodeObject* code_object;
    int pos;
    if (unlikely(!code_line) || unlikely(!__pyx_code_cache.entries)) {
        return NULL;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if (unlikely(pos >= __pyx_code_cache.count) || unlikely(__pyx_code_cache.entries[pos].code_line != code_line)) {
        return NULL;
    }
    code_object = __pyx_code_cache.entries[pos].code_object;
    Py_INCREF(code_object);
    return code_object;
}
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object) {
    int pos, i;
    __Pyx_CodeObjectCacheEntry* entries = __pyx_code_cache.entries;
    if (unlikely(!code_line)) {
        return;
    }
    if (unlikely(!entries)) {
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Malloc(64*sizeof(__Pyx_CodeObjectCacheEntry));
        if (likely(entries)) {
            __pyx_code_cache.entries = entries;
            __pyx_code_cache.max_count = 64;
            __pyx_code_cache.count = 1;
            entries[0].code_line = code_line;
            entries[0].code_object = code_object;
            Py_INCREF(code_object);
        }
        return;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if ((pos < __pyx_code_cache.count) && unlikely(__pyx_code_cache.entries[pos].code_line == code_line)) {
        PyCodeObject* tmp = entries[pos].code_object;
        entries[pos].code_object = code_object;
        Py_DECREF(tmp);
        return;
    }
    if (__pyx_code_cache.count == __pyx_code_cache.max_count) {
        int new_max = __pyx_code_cache.max_count + 64;
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Realloc(
            __pyx_code_cache.entries, new_max*sizeof(__Pyx_CodeObjectCacheEntry));
        if (unlikely(!entries)) {
            return;
        }
        __pyx_code_cache.entries = entries;
        __pyx_code_cache.max_count = new_max;
    }
    for (i=__pyx_code_cache.count; i>pos; i--) {
        entries[i] = entries[i-1];
    }
    entries[pos].code_line = code_line;
    entries[pos].code_object = code_object;
    __pyx_code_cache.count++;
    Py_INCREF(code_object);
}

#include "compile.h"
#include "frameobject.h"
#include "traceback.h"
static PyCodeObject* __Pyx_CreateCodeObjectForTraceback(
            const char *funcname, int c_line,
            int py_line, const char *filename) {
    PyCodeObject *py_code = 0;
    PyObject *py_srcfile = 0;
    PyObject *py_funcname = 0;
    #if PY_MAJOR_VERSION < 3
    py_srcfile = PyString_FromString(filename);
    #else
    py_srcfile = PyUnicode_FromString(filename);
    #endif
    if (!py_srcfile) goto bad;
    if (c_line) {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        #else
        py_funcname = PyUnicode_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        #endif
    }
    else {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromString(funcname);
        #else
        py_funcname = PyUnicode_FromString(funcname);
        #endif
    }
    if (!py_funcname) goto bad;
    py_code = __Pyx_PyCode_New(
        0,            /*int argcount,*/
        0,            /*int kwonlyargcount,*/
        0,            /*int nlocals,*/
        0,            /*int stacksize,*/
        0,            /*int flags,*/
        __pyx_empty_bytes, /*PyObject *code,*/
        __pyx_empty_tuple, /*PyObject *consts,*/
        __pyx_empty_tuple, /*PyObject *names,*/
        __pyx_empty_tuple, /*PyObject *varnames,*/
        __pyx_empty_tuple, /*PyObject *freevars,*/
        __pyx_empty_tuple, /*PyObject *cellvars,*/
        py_srcfile,   /*PyObject *filename,*/
        py_funcname,  /*PyObject *name,*/
        py_line,      /*int firstlineno,*/
        __pyx_empty_bytes  /*PyObject *lnotab*/
    );
    Py_DECREF(py_srcfile);
    Py_DECREF(py_funcname);
    return py_code;
bad:
    Py_XDECREF(py_srcfile);
    Py_XDECREF(py_funcname);
    return NULL;
}
static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename) {
    PyCodeObject *py_code = 0;
    PyObject *py_globals = 0;
    PyFrameObject *py_frame = 0;
    py_code = __pyx_find_code_object(c_line ? c_line : py_line);
    if (!py_code) {
        py_code = __Pyx_CreateCodeObjectForTraceback(
            funcname, c_line, py_line, filename);
        if (!py_code) goto bad;
        __pyx_insert_code_object(c_line ? c_line : py_line, py_code);
    }
    py_globals = PyModule_GetDict(__pyx_m);
    if (!py_globals) goto bad;
    py_frame = PyFrame_New(
        PyThreadState_GET(), /*PyThreadState *tstate,*/
        py_code,             /*PyCodeObject *code,*/
        py_globals,          /*PyObject *globals,*/
        0                    /*PyObject *locals*/
    );
    if (!py_frame) goto bad;
    py_frame->f_lineno = py_line;
    PyTraceBack_Here(py_frame);
bad:
    Py_XDECREF(py_code);
    Py_XDECREF(py_frame);
}

static int __Pyx_InitStrings(__Pyx_StringTabEntry *t) {
    while (t->p) {
        #if PY_MAJOR_VERSION < 3
        if (t->is_unicode) {
            *t->p = PyUnicode_DecodeUTF8(t->s, t->n - 1, NULL);
        } else if (t->intern) {
            *t->p = PyString_InternFromString(t->s);
        } else {
            *t->p = PyString_FromStringAndSize(t->s, t->n - 1);
        }
        #else  /* Python 3+ has unicode identifiers */
        if (t->is_unicode | t->is_str) {
            if (t->intern) {
                *t->p = PyUnicode_InternFromString(t->s);
            } else if (t->encoding) {
                *t->p = PyUnicode_Decode(t->s, t->n - 1, t->encoding, NULL);
            } else {
                *t->p = PyUnicode_FromStringAndSize(t->s, t->n - 1);
            }
        } else {
            *t->p = PyBytes_FromStringAndSize(t->s, t->n - 1);
        }
        #endif
        if (!*t->p)
            return -1;
        ++t;
    }
    return 0;
}


/* Type Conversion Functions */

static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject* x) {
   int is_true = x == Py_True;
   if (is_true | (x == Py_False) | (x == Py_None)) return is_true;
   else return PyObject_IsTrue(x);
}

static CYTHON_INLINE PyObject* __Pyx_PyNumber_Int(PyObject* x) {
  PyNumberMethods *m;
  const char *name = NULL;
  PyObject *res = NULL;
#if PY_VERSION_HEX < 0x03000000
  if (PyInt_Check(x) || PyLong_Check(x))
#else
  if (PyLong_Check(x))
#endif
    return Py_INCREF(x), x;
  m = Py_TYPE(x)->tp_as_number;
#if PY_VERSION_HEX < 0x03000000
  if (m && m->nb_int) {
    name = "int";
    res = PyNumber_Int(x);
  }
  else if (m && m->nb_long) {
    name = "long";
    res = PyNumber_Long(x);
  }
#else
  if (m && m->nb_int) {
    name = "int";
    res = PyNumber_Long(x);
  }
#endif
  if (res) {
#if PY_VERSION_HEX < 0x03000000
    if (!PyInt_Check(res) && !PyLong_Check(res)) {
#else
    if (!PyLong_Check(res)) {
#endif
      PyErr_Format(PyExc_TypeError,
                   "__%s__ returned non-%s (type %.200s)",
                   name, name, Py_TYPE(res)->tp_name);
      Py_DECREF(res);
      return NULL;
    }
  }
  else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_TypeError,
                    "an integer is required");
  }
  return res;
}

static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject* b) {
  Py_ssize_t ival;
  PyObject* x = PyNumber_Index(b);
  if (!x) return -1;
  ival = PyInt_AsSsize_t(x);
  Py_DECREF(x);
  return ival;
}

static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t ival) {
#if PY_VERSION_HEX < 0x02050000
   if (ival <= LONG_MAX)
       return PyInt_FromLong((long)ival);
   else {
       unsigned char *bytes = (unsigned char *) &ival;
       int one = 1; int little = (int)*(unsigned char*)&one;
       return _PyLong_FromByteArray(bytes, sizeof(size_t), little, 0);
   }
#else
   return PyInt_FromSize_t(ival);
#endif
}

static CYTHON_INLINE size_t __Pyx_PyInt_AsSize_t(PyObject* x) {
   unsigned PY_LONG_LONG val = __Pyx_PyInt_AsUnsignedLongLong(x);
   if (unlikely(val == (unsigned PY_LONG_LONG)-1 && PyErr_Occurred())) {
       return (size_t)-1;
   } else if (unlikely(val != (unsigned PY_LONG_LONG)(size_t)val)) {
       PyErr_SetString(PyExc_OverflowError,
                       "value too large to convert to size_t");
       return (size_t)-1;
   }
   return (size_t)val;
}


#endif /* Py_PYTHON_H */
